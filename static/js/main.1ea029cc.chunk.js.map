{"version":3,"sources":["Contexts/AppContext.js","config.js","Components/DesktopMenu/DesktopMenu.js","Components/Backdrop/Backdrop.js","Components/MobileMenu/MobileMenu.js","Components/Header/Header.js","Components/HomePageSection/HomePageSection.js","Routes/HomePage/HomePage.js","HelperFunctions/InputFieldValidations.js","Components/CreateAccount/CreateAccount.js","Routes/CreateAccountPage/CreateAccountPage.js","Services/TokenService.js","Services/AuthApiService.js","Components/LoginForm/LoginForm.js","Routes/LoginPage/LoginPage.js","HelperFunctions/HelperFunctions.js","Components/LoadListBox/LoadListBox.js","Services/DriversService.js","Components/DriverCard/DriverCard.js","Components/IdleDriversBox/IdleDriversBox.js","Routes/DashboardPage/DashboardPage.js","Services/CarrierServices.js","Components/Logout/Logout.js","Services/EquipmentsService.js","HelperFunctions/LoadsPageHelperFunctions.js","Routes/LoadsPage/LoadsPage.js","Components/EquipmentCard/EquipmentCard.js","Routes/EquipmentsPage/EquipmentsPage.js","Routes/DriversPage/DriversPage.js","Components/DriversDropDown/DriversDropDown.js","Routes/EquipmentEditPaage/EquipmentEditPage.js","Services/ShipmentsService.js","Routes/AddLoadPage/AddLoadPage.js","Routes/LoadByIdPage/LoadByIdPage.js","Routes/AddDriverPage/AddDriverPage.js","Routes/AddEquipmentPage/AddEquipmentPage.js","Routes/DriverEditPage/DriverEditPage.js","Routes/EditLoadPage/EditLoadPage.js","Components/App/App.js","index.js"],"names":["React","createContext","basePath","loggedIn","newUser","setLoggedIn","setNewUser","setShipments","setEquipments","setIdleDrivers","setDrivers","getAllData","loggedInCarrier","shipments","setLoggedInCarrier","idleDrivers","idleEquipments","equipments","drivers","loadStatus","API_ENDPOINT","process","TOKEN_KEY","BASEPATH","DesktopMenu","config","aria-label","className","to","tabIndex","Component","Backdrop","MobileMenu","props","changeMenuOpenState","setState","menuOpen","state","closeMenuIfOpen","e","console","log","closeMenuWhenLargerScreen","window","innerWidth","componentDidMount","addEventListener","componentWillUnMount","removeEventListener","this","context","onClick","contextType","AppContext","Header","HomePageSection","HomePage","emptySpaces","word","trim","notValidDate","date","length","test","isNotValidDriverName","name","isNotValidPay","pay","isNaN","CreateAccount","validateUserName","username","usernameError","validatePassword","password","passwordError","validateFullName","full_name","fullNameError","checkErrors","errInState","handleFormSubmit","preventDefault","target","company_name","mc_num","value","companyNameError","mcNumError","onSubmit","htmlFor","type","id","required","onChange","CreateAccountPage","TokenService","saveAuthToken","token","localStorage","setItem","getAuthToken","getItem","clearAuthToken","removeItem","hasAuthToken","AuthApiService","postLogin","credentials","fetch","method","headers","body","JSON","stringify","then","res","ok","json","Error","error","message","catch","postCarrier","carrier","err","LoginForm","incorrectUsername","incorrectPassword","handleSubmitLoginForm","focus","authToken","loggedInUser","onLoginSuccess","defaultProps","LoginPage","a","history","push","handleGoBack","goBack","routeUserTo","route","objectIsEmpty","obj","Object","entries","constructor","arrayIsEmpty","arr","formatCurrency","amount","parseFloat","toFixed","toString","replace","formatDate","dbDate","Date","day","getDate","month","getMonth","year","getFullYear","renderEquipmentOptions","map","equipment","key","unit_num","getAvailableDrivers","filter","driver","removeEquipmentDriver","pay_rate","LoadListBox","renderShipments","shipment","pickup_warehouse","city","pickup_date","icon","faTruck","status","delivery_warehouse","delivery_date","faFolderOpen","faEdit","boxHeader","DriversService","getDriversData","response","driversData","getIdleDrivers","updateEquipment","equipment_id","Authorization","updateDriver","addDriver","DriverCard","handleDeleteDriver","driverToRemove","driverId","updateDriverInDB","shipmentId","idleDriver","IdleDriversBox","renderIdleDriversList","iDriver","DashboardPage","unAssignedShipments","includes","getShipmentWithStatus","shipmentsInProgress","getAllShipmentsInProgress","oldLoadStatus","CarrierService","getCarrierData","carrierData","getCarrierInfo","carrierInfo","Logout","getCarrierInfoInComponent","CarrierServices","handleLogout","EquipmentService","getEquipments","addNewEquipment","getShipmentsWithDriverId","parseInt","LoadsPage","handleOpeningFilterMenu","filterMenu","selectedDriver","i","selectedOption","Array","from","getElementsByTagName","getAttribute","data-id","data-name","renderAllDriverOptions","EquipmentCard","handleDeleteEquipment","EquipmentsService","editingMode","idleEquipment","hasOwnProperty","EquipmentsPage","handleAddEquipment","renderEquipmentList","equip","DriversPage","renderDrivers","DriversDropDown","handleChange","optionsValue","renderDriverOptions","defaultValue","EquipmentEditPage","giveEquipment","takeAwayEquipment","setDriverForEquipment","removeDriverFromEquipment","changeEquipmentForDriver","newDriverId","oldDriverId","oldDriver","handleEquipmentEdit","equipmentArray","undefined","inIdleQueue","removeExecuted","changeEquipemnt","changeEquipment","rprops","validateUnitNum","unitNum","unitNumError","match","params","availableDrivers","currentDriver","unshift","idleDr","ShipmentsSerivce","insertShipment","rate","miles","driver_id","broker","pickup_city","pickup_state","pickup_zipcode","delivery_city","delivery_state","delivery_zipcode","updateShipment","deleteShipment","AddLoadPage","validateInputDate","pickupDate","deliveryDate","validateCityInput","pickupCity","deliveryCity","validateStateInput","pickupState","deliveryState","validateZipcodeInput","zipcode","pickupZipcode","deliveryZipcode","updateIdleDriverQueue","handleAddLoad","toUpperCase","contextDriver","shipmentInDB","newShipment","hasError","dateError","cityError","stateError","zipcodeError","maxLength","onBlur","placeholder","min","disabled","LoadByIdPage","removeDriverAndEquipmentFromShipment","sendDriverToIdleDrivers","handleChangeLoadStatus","ShipmentsService","propShipment","completedShipment","handleAssignDriver","driverAssigned","avaialableDrivers","onDriverDropDownChange","handleShipmentDelete","shipmentToDelete","renderUpdateLoadStatusBox","driverPayout","AddDriverPage","validateDriverName","isNotValid","driverName","driverNameError","validatePayRate","driverPay","driverPayError","handleAddDriver","dbDriver","contextEquipment","availableEquipments","AddEquipmentPage","validateUnitNumField","equipmentNumError","equipmentNum","dbEquipment","DriverEditPage","driverToChange","makeDriverChanges","changes","handleEditDriver","changeDriver","newEquipmentId","oldEquipmentId","newEquipment","DriversSerivce","propsEquipment","EditLoadPage","stateCode","handleEditLoad","newShipmentFields","updateShipmentInDB","App","getShipments","data","getDrivers","Promise","all","Provider","path","component","exact","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1ea029cc.chunk.js","sourcesContent":["import React from 'react';\n\nexport default React.createContext({\n    basePath: '',\n    loggedIn: () => {},\n    newUser: () => {},\n    setLoggedIn: () => {},\n    setNewUser: () => {},\n    setShipments: () => {},\n    setEquipments: () => {},\n    setIdleDrivers: () => {},\n    setDrivers: () => {},\n    getAllData: () => {},\n    loggedInCarrier: {},\n    shipments: [],\n    setLoggedInCarrier: () => {},\n    idleDrivers: [],\n    idleEquipments: [],\n    equipments: [],\n    drivers: [],\n    loadStatus: []\n});","// const path = 'http://localhost:8000/api';\nconst path = 'https://rocky-waters-07125.herokuapp.com/api';\n\nexport default {\n    API_ENDPOINT: process.env.API_ENDPOINT || path,\n    TOKEN_KEY: process.env.TOKEN_KEY || '9e7d73be-f7f1-11e9-8f0b-362b9e155667',\n    BASEPATH: '/dispatch-office-client',\n}","import React, { Component } from 'react';\nimport './DesktopMenu.css';\nimport { Link } from 'react-router-dom';\nimport config from '../../config';\n\nclass DesktopMenu extends Component {\n\n    render() {\n\n        const basePath = config.BASEPATH;\n\n        return (\n            <nav\n                aria-label=\"Main Navigation\"\n                className='DesktopMenu'>\n                <ul>\n                    <li>\n                        <Link to={basePath}>\n                            Dashboard\n                        </Link>\n                    </li>\n                    <li className=\"has-submenu\" tabIndex=\"0\">\n                        <span>\n                            Loads\n                        </span>\n                        <ul>\n                            <li>\n                                <Link to={`${basePath}/load/new`}>Add Load</Link>\n                            </li>\n                            <li tabIndex=\"0\">\n                                <Link to={`${basePath}/loads`}>View Loads</Link>\n                            </li>\n                        </ul>\n                    </li>\n                    <li className=\"has-submenu\" tabIndex=\"0\">\n                        <span>\n                            Equipments\n                        </span>\n                        <ul>\n                            <li tabIndex=\"0\">\n                                <Link to={`${basePath}/equipment/new`}>Add Equipment</Link>\n                            </li>\n                            <li tabIndex=\"0\">\n                                <Link to={`${basePath}/equipments`}>View Equipments</Link>\n                            </li>\n                        </ul>\n                    </li>\n                    <li className=\"has-submenu\" tabIndex=\"0\">\n                        <span>\n                            Drivers\n                        </span>\n                        <ul>\n                            <li tabIndex=\"0\">\n                                <Link to={`${basePath}/driver/new`}>Add Driver</Link>\n                            </li>\n                            <li tabIndex=\"0\">\n                                <Link to={`${basePath}/drivers`}>View Drivers</Link>\n                            </li>\n                        </ul>\n                    </li>\n                </ul>\n            </nav>\n        );\n    }\n}\n\n\nexport default DesktopMenu","import React, { Component } from 'react';\nimport './Backdrop.css';\n\nclass Backdrop extends Component {\n    \n    render() { \n        return (\n            <div className='Backdrop'>\n            </div>\n        );\n    }\n}\n \nexport default Backdrop;","import React, { Component } from 'react';\nimport './MobileMenu.css';\nimport AppContext from '../../Contexts/AppContext';\nimport { Link } from 'react-router-dom';\nimport Backdrop from '../Backdrop/Backdrop';\n\nclass MobileMenu extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            menuOpen: false\n        }\n    }\n\n    static contextType = AppContext;\n\n    changeMenuOpenState = () => {\n        this.setState({\n            menuOpen: !this.state.menuOpen\n        })\n    }\n\n    closeMenuIfOpen = (e) => {\n        console.log(`backdrop clicked`);\n        if (this.state.menuOpen) {\n            this.setState({\n                menuOpen: false\n            })\n        }\n    }\n\n    // closes menu \n    // When it is open on mobile and resized to larger screen\n    // and the menu for larger screen pops up and this closes\n    closeMenuWhenLargerScreen = (e) => {\n        if (window.innerWidth > 1050) {\n            this.setState({\n                menuOpen: false\n            })\n        }\n    }\n\n    componentDidMount = () => {\n        window.addEventListener('resize', this.closeMenuWhenLargerScreen);\n    }\n\n    componentWillUnMount = () => {\n        window.removeEventListener('resize', this.closeMenuWhenLargerScreen);\n    }\n\n\n    render() {\n\n        const { basePath } = this.context;\n\n        return (\n            <nav className='MobileMenu'>\n                <button className='menu-button' onClick={this.changeMenuOpenState}>\n                    <div></div>\n                    <div></div>\n                    <div></div>\n                </button>\n                {\n                    this.state.menuOpen &&\n                    <>\n                        <Backdrop />\n                        <ul className='menu-list'>\n                            <button\n                                className='close-button'\n                                onClick={this.changeMenuOpenState}>\n                                X\n                            </button>\n                            <li className='menu-item'>\n                                <Link\n                                    to={`${basePath}/dashboard`}\n                                    onClick={this.changeMenuOpenState}>\n                                    Dashboard\n                                </Link>\n                            </li>\n                            <li className='menu-item'>\n                                <hr />\n                                <Link \n                                    to={`${basePath}/load/new`}\n                                    onClick={this.changeMenuOpenState}>\n                                    Add Load\n                                </Link>\n                            </li>\n                            <li className='menu-item'>\n                                <Link \n                                    to={`${basePath}/loads`}\n                                    onClick={this.changeMenuOpenState}>\n                                    View Loads\n                                </Link>\n                            </li>\n\n                            <li className='menu-item'>\n                                <hr />\n                                <Link \n                                    to={`${basePath}/equipment/new`}\n                                    onClick={this.changeMenuOpenState}>\n                                    Add Equipments\n                                </Link>\n                            </li>\n                            <li className='menu-item'>\n                                <Link\n                                    to={`${basePath}/equipments`}\n                                    onClick={this.changeMenuOpenState}>\n                                    View Equipments\n                                </Link>\n                            </li>\n                            <li className='menu-item'>\n                                <hr />\n                                <Link \n                                    to={`${basePath}/driver/new`}\n                                    onClick={this.changeMenuOpenState}>\n                                    Add Driver\n                                </Link>\n                            </li>\n                            <li className='menu-item'>\n                                <Link \n                                    to={`${basePath}/drivers`}\n                                    onClick={this.changeMenuOpenState}>\n                                    View Drivers\n                                </Link>\n                            </li>\n                        </ul>\n                    </>\n                }\n            </nav>\n        );\n    }\n}\n\nexport default MobileMenu;","import React, { Component } from 'react';\nimport './Header.css';\nimport { Link } from 'react-router-dom';\nimport AppContext from '../../Contexts/AppContext';\nimport DesktopMenu from '../DesktopMenu/DesktopMenu';\nimport MobileMenu from '../MobileMenu/MobileMenu';\n\nclass Header extends Component {\n\n    static contextType = AppContext;\n\n    render() {\n\n        const {loggedIn} = this.context;\n\n        return (\n            <header className='Header blue-back white-text'>\n                <div className='width-wrapper'>\n                    <Link to='/'>\n                        <div className='logo'>\n                            <span>Dispatch</span>\n                            <span>Office</span>\n                        </div>\n                    </Link>\n                    {\n                        loggedIn &&\n                        <>\n                            <DesktopMenu />\n                            <MobileMenu />\n                        </>\n                    }\n                </div>\n            </header>\n        );\n    }\n}\n\nexport default Header;","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport AppContext from '../../Contexts/AppContext';\nimport './HomePageSection.css';\n\nclass HomePageSection extends Component {\n\n    static contextType = AppContext;\n\n    render() {\n\n        const { basePath } = this.context;\n\n        return (\n            <div className='HomePageSection width-wrapper'>\n                <p>\n                    Welcome !! to <span className='span-title red-text'>Dispatch Office</span>, a transportation management\n                    system, which assists in keeping track of shipments, equipments and drivers. It also assists a carrier \n                    with assigning drivers to shipments.\n                </p>\n                <p className='user-info'>\n                    Dummy User Info <br />\n                    Username: <span>dundermifflin</span>\n                </p>\n                <p className='user-info'>\n                    Password: <span>password</span>\n                </p>\n                <Link to={`${basePath}/create-account`} className='app-button'>\n                    Create Account\n                </Link>\n                <Link to={`${basePath}/login`} className='app-link'>\n                    Login\n                </Link>\n            </div>\n        );\n    }\n}\n\nexport default HomePageSection;","import React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport './HomePage.css';\nimport AppContext from '../../Contexts/AppContext';\nimport HomePageSection from '../../Components/HomePageSection/HomePageSection';\n\nclass HomePage extends Component {\n\n    static contextType = AppContext;\n\n    render() {\n        const { basePath, loggedIn, newUser } = this.context;\n        return (\n            !loggedIn\n                ?   <section className='HomePage blue-text'>\n                        <HomePageSection />\n                    </section>\n                :   !newUser\n                    ? <Redirect to={`${basePath}/dashboard`} />\n                    : <Redirect to={`${basePath}/newuser`} />\n        );\n    }\n}\n\nexport default HomePage;","export function emptySpaces(word){\n    if(word.trim() === '')\n        return true;\n\n    return false;\n}\n\nexport function notValidState(state){\n    if(state.trim().length < 2)\n        return `Invalid state code, Eg. TX`\n}\n\nexport function notValidDate(date){\n    const date_regex = /^(0?[1-9]|1[0-2])\\/(0?[1-9]|1\\d|2\\d|3[01])\\/(15|18|17|16|19|20|21|23|24|25)\\d{2}$/ ;\n    return date.length < 8 || !date_regex.test(date);\n}\n\nexport function isNotValidDriverName(name){\n    if(name.trim() === ''){\n        return `Driver is required and cannot be just empty spaces`\n    }\n\n    return false;\n}\n\nexport function isNotValidPay(pay){\n    if(pay.trim() === ''){\n        return `Pay cannot be empty spaces`\n    }\n\n    if(isNaN(pay)){\n        return `Pay can only be numeric, cannot contain characters other than 0-9 and only one '.'`;\n    }\n\n    if(pay < 0){\n        return `Pay cannot be negative`;\n    }\n\n    return false;\n}","import React, { Component } from 'react';\nimport './CreateAccount.css';\nimport { emptySpaces } from '../../HelperFunctions/InputFieldValidations';\n\n\nclass CreateAccount extends Component {\n\n    constructor(props){\n        super(props);\n        this.state = {\n            usernameError: '',\n            passwordError: '',\n            companyNameError: '',\n            mcNumError: '',\n            fullNameError: '',            \n        }\n    }\n\n    validateUserName = (username) => {\n        if(emptySpaces(username)){\n            this.setState({usernameError: `Username is required`})\n        } else if(username.trim().length < 6 || username.trim().length > 20){\n            this.setState({usernameError: `Username must be between 6 to 20 characters`})\n        } else {\n            this.setState({usernameError: ``})\n        }\n    }\n\n    validatePassword = (password) => {\n        if(emptySpaces(password)){\n            this.setState({passwordError: `Username is required`})\n        } else if(password.trim().length < 6 || password.trim().length > 72){\n            this.setState({passwordError: `Password must be between 6 to 72 characters`})\n        } else {\n            this.setState({passwordError: ``})\n        }\n    }\n\n    validateFullName = (full_name) => {\n        if(emptySpaces(full_name)){\n            this.setState({fullNameError: `Full Name is required`})\n        } else if(full_name.trim().length < 6 || full_name.trim().length > 40){\n            this.setState({fullNameError: `Full Name must be between 6 to 40 characters`})\n        } else {\n            this.setState({fullNameError: ``})\n        }\n    }\n\n    checkErrors = (errInState) => {\n        // if()\n    }\n\n    handleFormSubmit = (e) => {\n        this.checkErrors(this.state);\n        e.preventDefault();\n        const { username, password, full_name, company_name, mc_num } = e.target\n        const user = {\n            username: username.value,\n            password: password.value,\n            company_name: company_name.value,\n            mc_num: mc_num.value,\n            full_name: full_name.value\n        }\n\n    }\n\n    render() {\n        return (\n            <form className='CreateAccount width-wrapper' onSubmit={(e) => { this.handleFormSubmit(e) }}>\n                <fieldset>\n                    <legend className='blue-back white-text'>\n                        Create Account\n                    </legend>\n                    <div className='flex'>\n                        <label htmlFor='username'>\n                            <span className='input-title'>* Username:</span>\n                            <input\n                                type='text'\n                                id='username'\n                                name='username'\n                                required\n                                onChange={(e) => {this.validateUserName(e.target.value)}}\n                            />\n                            {\n                                this.state.usernameError &&\n                                <span className='error'>{this.state.usernameError}</span>\n                            }\n                        </label>\n                        <label htmlFor='password'>\n                            <span className='input-title'>* Password:</span>\n                            <input\n                                type='password'\n                                id='password'\n                                name='password'\n                                required\n                                onChange={(e) => {this.validatePassword(e.target.value)}}\n                            />\n                            {\n                                this.state.passwordError &&\n                                <span className='error'>{this.state.passwordError}</span>\n                            }\n                        </label>\n                        <label htmlFor='full_name'>\n                            <span className='input-title'>* Full Name:</span>\n                            <input type='text' id='full_name' name='full_name' required />\n                            {\n                                this.state.fullNameError &&\n                                <span className='error'>{this.state.fullNameError}</span>\n                            }\n                        </label>\n                        <label htmlFor='company_name'>\n                            <span className='input-title'>Company Name:</span>\n                            <input type='text' id='company_name' name='company_name' />\n                            {\n                                this.state.companyNameError &&\n                                <span className='error'>{this.state.companyNameError}</span>\n                            }\n                        </label>\n                        <label htmlFor='mc_num'>\n                            <span className='input-title'>MC Number:</span>\n                            <input type='text' id='mc_num' name='mc_num' />\n                            {\n                                this.state.mcNumError &&\n                                <span className='error'>{this.state.mcNumError}</span>\n                            }\n                        </label>\n                        <button\n                            className='app-button'\n                            type='submit'\n                        >\n                            Create Account\n                        </button>\n                    </div>\n                </fieldset>\n            </form>\n        );\n    }\n}\n\nexport default CreateAccount;","import React, { Component } from 'react';\nimport './CreateAccountPage.css';\nimport AppContext from '../../Contexts/AppContext';\nimport { Redirect } from 'react-router-dom';\nimport CreateAccount from '../../Components/CreateAccount/CreateAccount';\n\nclass CreateAccountPage extends Component {\n\n    static contextType = AppContext;\n\n    render() {\n\n        const { basePath, loggedIn, newUser } = this.context;\n\n        return (\n            !loggedIn\n                ? <div className='CreateAccountPage'>\n                    <CreateAccount />\n                </div>\n                : !newUser\n                    ? <Redirect to={`${basePath}/dashboard`} />\n                    : <Redirect to={`${basePath}/newuser`} />\n        );\n    }\n}\n\nexport default CreateAccountPage;","import config from '../config';\n\nconst TokenService = {\n  saveAuthToken(token) {\n    window.localStorage.setItem(config.TOKEN_KEY, token)\n  },\n  getAuthToken() {\n    return window.localStorage.getItem(config.TOKEN_KEY)\n  },\n  clearAuthToken() {\n    window.localStorage.removeItem(config.TOKEN_KEY)\n  },\n  hasAuthToken() {\n    return !!TokenService.getAuthToken()\n  },\n}\n\nexport default TokenService","import config from '../config';\n\nconst AuthApiService = {\n    // login authorization\n    postLogin(credentials){\n        return fetch(`${config.API_ENDPOINT}/auth/login`, {\n            method: \"POST\",\n            headers: {\n                \"content-type\": \"application/json\"\n            },\n            body: JSON.stringify(credentials)\n        })\n        .then(res => {\n            if(!res.ok) {\n                return res.json().then(e => {\n                    throw new Error(e.error.message)\n                })\n            }\n            \n            return res.json();\n        })\n        .then(res => res)\n        .catch(error => error)\n    },\n\n    // creating a user\n    postCarrier(carrier){\n        return fetch(`${config.API_ENDPOINT}/user`, {\n            method: \"POST\",\n            headers: {\n                \"content-type\": \"application/json\"\n            },\n            body: JSON.stringify(carrier)\n        })\n        .then(res => {\n            if(!res.ok){\n                return res.json().then(e => {\n                    throw new Error(e.error.message)\n                })\n            }\n\n            return res.json();\n        })\n        .then(res => res)\n        .catch(err => err);\n    }\n}\n\nexport default AuthApiService;","import React, { Component } from 'react';\nimport './LoginForm.css';\nimport TokenService from '../../Services/TokenService';\nimport AuthApiService from '../../Services/AuthApiService';\nimport AppContext from '../../Contexts/AppContext';\n\nclass LoginForm extends Component {\n\n    state = {\n        error: null,\n        incorrectUsername: false,\n        incorrectPassword: false,\n    }\n\n    static contextType = AppContext;\n\n    static defaultProps = {\n        onLoginSuccess: () => {},\n    }\n\n    handleSubmitLoginForm = (e) => {\n        e.preventDefault();\n\n        this.setState({\n            error: null,\n            incorrectUsername: false,\n            incorrectPassword: false,\n        })\n\n        const { username, password } = e.target;\n\n        AuthApiService.postLogin({\n            username: username.value,\n            password: password.value\n        })\n            .then((res) => {\n                if(res.message === 'Incorrect Username'){\n                    this.setState({\n                        incorrectUsername: true,\n                        error: res.message\n                    })\n                    username.value = '';\n                    password.value = '';\n                    username.focus();\n                }\n                if(res.message === 'Incorrect Password'){\n                    this.setState({\n                        incorrectPassword: true,\n                        error: res.message\n                    })\n                    password.value = '';\n                }\n                \n                if(!this.state.incorrectPassword && !this.state.incorrectUsername){\n                    TokenService.saveAuthToken(res.authToken);\n                    this.context.setLoggedInCarrier(res.loggedInUser);\n                    this.props.onLoginSuccess();\n                    username.value = '';\n                    password.value = '';\n                }\n            })\n            .catch((res) => {\n                this.setState({\n                    error: res.error\n                })\n            })\n    }\n\n    render() {\n\n\n        const { incorrectPassword, incorrectUsername, error } = this.state;\n\n\n        return (\n\n            <form className='LoginForm width-wrapper' onSubmit={(e) => { this.handleSubmitLoginForm(e) }}>\n                <fieldset>\n                    <legend className='blue-back white-text'>\n                        Login\n                        </legend>\n                    <div className='flex'>\n                        <label htmlFor='username'>\n                            <span className='input-title'>* Username:</span>\n                            <input\n                                type='text'\n                                id='username'\n                                name='username'\n                                required\n                            />\n                            {\n                                incorrectUsername &&\n                                <span className='error'>{error}</span>\n                            }\n                        </label>\n                        \n                        <label htmlFor='password'>\n                            <span className='input-title'>* Password:</span>\n                            <input\n                                type='password'\n                                id='password'\n                                name='password'\n                                required\n                            />\n                            {\n                                incorrectPassword &&\n                                <span className='error'>{error}</span>\n                            }\n                        </label>\n                        <button\n                            className='app-button'\n                            type='submit'\n                        >\n                            Login\n                        </button>\n                    </div>\n                </fieldset>\n            </form>\n        );\n    }\n}\n\nexport default LoginForm;","import React, { Component } from \"react\";\nimport \"./LoginPage.css\";\nimport AppContext from \"../../Contexts/AppContext\";\nimport LoginForm from \"../../Components/LoginForm/LoginForm\";\nimport { Redirect } from \"react-router-dom\";\n\nclass LoginPage extends Component {\n  static contextType = AppContext;\n\n  // using async await so app proceeds only once complete data for carrier is received\n  onLoginSuccess = async () => {\n    this.props.history.push(\"/\");\n    this.context.setLoggedIn(true);\n    this.context.getAllData();\n  };\n\n  render() {\n    const { basePath, loggedIn, newUser } = this.context;\n\n    return !loggedIn ? (\n      <section className=\"LoginPage\">\n        <LoginForm\n          onLoginSuccess={() => {\n            this.onLoginSuccess();\n          }}\n        />\n      </section>\n    ) : !newUser ? (\n      <Redirect to={`${basePath}/dashboard`} />\n    ) : (\n      <Redirect to={`${basePath}/newuser`} />\n    );\n  }\n}\n\nexport default LoginPage;\n","import React from 'react';\n\n// takes user back to the previous page in history\nexport function handleGoBack(history) {\n    return history.goBack();\n}\n\nexport function routeUserTo(history, route) {\n    return history.push(route);\n}\n\n// Returns true if the object is empty\nexport function objectIsEmpty(obj) {\n    return (Object.entries(obj).length === 0 && obj.constructor === Object);\n}\n\n// Return true is value passed in not undefined\nexport function isNotUndefined(value){\n    return value !== undefined;\n}\n\n// Returns true if array is empty\nexport function arrayIsEmpty(arr) {\n    return (arr.length === 0);\n}\n\nexport function formatCurrency(amount) {\n    amount = parseFloat(amount).toFixed(2);\n    return `$${amount.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}`;\n}\n\n// Returns date in a formatted manner\nexport function formatDate(dbDate) {\n    const date = new Date(dbDate);\n    const day = date.getDate();\n    const month = date.getMonth();\n    const year = date.getFullYear();\n    return `${month + 1}/${day}/${year}`;\n};\n\nexport function sortShipments(shipments, property) {\n    return shipments.sort((a, b) => (a[property] < b[property] ? 1 : -1));\n};\n\nexport function renderLoadStatusOptions(statusArray) {\n    return statusArray.map((status, i) => {\n        return (\n            <option\n                key={i}\n                value={status}\n            >\n                {status}\n            </option>\n        )\n    })\n}\n\nexport function renderEquipmentOptions(equipments) {\n    return equipments.map((equipment) => {\n        return (\n            <option\n                key={equipment.id}\n                value={equipment.id}\n            >\n                {equipment.unit_num}\n            </option>\n        )\n    })\n}\n\nexport function renderDriverOptions(drivers) {\n    return drivers.map((driver) => {\n        return (\n            <option\n                key={driver.id}\n                value={driver.id}\n            >\n                {driver.full_name}\n            </option>\n        )\n    })\n}\n\n// to populate the drivers drop down list\n// with only those drivers that are idle and \n// have an equipment avialable to be assigned\nexport function getAvailableDrivers(idleDrivers) {\n    const availableDrivers = idleDrivers.filter((driver) => !(Object.entries(driver.equipment).length === 0 && driver.equipment.constructor === Object));\n    return availableDrivers;\n}\n\nexport function removeEquipmentDriver(equipment){\n    equipment.driver = {\n        full_name: '',\n        pay_rate: '',\n    }\n    return equipment;\n}\n\nexport function pickupAfterDelivery(pickup, delivery){\n    const pickupYear = new Date(pickup).getFullYear();\n\n    console.log(pickupYear);\n    \n    return false;\n}\n\nexport function getUnAssignedShipments(shipments){\n    if(!arrayIsEmpty(shipments)){\n        return shipments.filter(shipment => shipment.status === 'un-assigned')\n    }\n    return [];\n}\n\n// This function can take in either one string \n// which will be either one status or take in an\n// array of status and return shipments that have that status\nexport function getShipmentWithStatus(shipments, status){\n    if(typeof status === 'string'){\n        status = [status];\n    }\n    if(!arrayIsEmpty(shipments)){\n        return shipments.filter(shipment => status.includes(shipment.status));\n    }\n}\n\n// return all shipments except un-assigned or completed\n// because those are the only two shipments that are not in progress\n// as un-assigned has no driver and completed is already over\nexport function getAllShipmentsInProgress(shipments){\n    if(!arrayIsEmpty(shipments)){\n        return shipments.filter(shipment => !['un-assigned', 'completed'].includes(shipment.status))\n    }\n    return shipments;\n}","import React, { Component } from \"react\";\nimport \"./LoadListBox.css\";\nimport AppContext from \"../../Contexts/AppContext\";\nimport { Link } from \"react-router-dom\";\nimport {\n  formatDate,\n  formatCurrency,\n  arrayIsEmpty\n} from '../../HelperFunctions/HelperFunctions'\nimport config from \"../../config\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faTruck, faEdit, faFolderOpen } from '@fortawesome/free-solid-svg-icons'\n\nclass LoadListBox extends Component {\n\n  static contextType = AppContext;\n\n  static defaultProps = {\n    loadStatus: [],\n    boxHeader: 'Loads',\n    shipments: [],\n  };\n\n  // return the list of shipments\n  renderShipments = (shipments) => {\n\n    if (arrayIsEmpty(shipments)) {\n      return (\n        <li className='no-shipments'>\n          <div>\n            No Shipments Found\n          </div>\n        </li>\n      )\n    }\n\n    return shipments.map(shipment => {\n      return (\n        <li className=\"load\" key={shipment.id}>\n          <div className=\"pick-up\">\n            <h6>Pick-up</h6>\n            <br />\n            <span className=\"red-bold\">\n              {shipment.pickup_warehouse.city},{\" \"}\n              {shipment.pickup_warehouse.state}\n              <br />\n              Date: {formatDate(shipment.pickup_date)}\n            </span>\n          </div>\n          <div className=\"status-line-wrapper\">\n            <div className=\"rate-broker\">\n              <div className=\"driver\">\n                <h6>Driver</h6>\n                <br />\n                {shipment.driver.full_name}\n              </div>\n            </div>\n            <div className=\"status-line\">\n              <FontAwesomeIcon icon={faTruck} className={`truck ${shipment.status}`}/>\n              <div className='truck-status'>{shipment.status}</div>\n              <div className={`circle green ${shipment.status}`}></div>\n              <div className={`line increase green ${shipment.status}`}></div>\n              <div className=\"line red\"></div>\n              <div className=\"circle red\"></div>\n            </div>\n            <div className=\"rate-broker\">\n              <div className=\"status\">\n                <h6>Status</h6>\n                <br />\n                <span className=\"\">{shipment.status}</span>\n              </div>\n            </div>\n          </div>\n          <div className=\"delivery\">\n            <h6>Delivery</h6>\n            <br />\n            <span className=\"red-bold\">\n              {shipment.delivery_warehouse.city},{\" \"}\n              {shipment.delivery_warehouse.state} <br />\n              Date: {formatDate(shipment.delivery_date)}\n            </span>\n          </div>\n          <div className=\"load-buttons\">\n            <Link className='app-button' to={`${config.BASEPATH}/load/${shipment.id}`}>\n              <FontAwesomeIcon icon={faFolderOpen} className='update-icon' />\n              Update / View\n            </Link>\n            <Link className='app-button' to={`${config.BASEPATH}/load/edit/${shipment.id}`}>\n              <FontAwesomeIcon icon={faEdit} className='edit-icon' />\n              Edit\n            </Link>\n          </div>\n        </li>\n      );\n    });\n  }\n\n  render() {\n\n    const { shipments } = this.props;\n\n    return (\n      <div className=\"LoadListBox blue-text\">\n        <h3 className=\"blue-back white-text\">{this.props.boxHeader}</h3>\n        <ul className=\"un-assigned-loads\">\n          {this.renderShipments(shipments)}\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default LoadListBox;\n","import TokenService from './TokenService';\nimport config from '../config';\n\nconst DriversService = {\n    getDriversData() {\n        return fetch(`${config.API_ENDPOINT}/drivers`, {\n            method: 'GET',\n            headers: {\n                \"content-type\": \"application/json\",\n                \"Authorization\": `bearer ${TokenService.getAuthToken()}`\n            }\n        })\n            .then(response => response.json())\n            .then(driversData => driversData)\n            .catch((error) => {\n                console.log(error);\n            })\n    },\n\n    getIdleDrivers() {\n        return fetch(`${config.API_ENDPOINT}/drivers/idle`, {\n            method: 'GET',\n            headers: {\n                \"content-type\": \"application/json\",\n                \"Authorization\": `bearer ${TokenService.getAuthToken()}`\n            }\n        })\n            .then(response => response.json())\n            .then(idleDrivers => idleDrivers)\n            .catch((error) => {\n                console.log(error);\n            })\n    },\n\n    updateEquipment(id, equipment_id) {\n        return fetch(`${config.API_ENDPOINT}/drivers/${id}`, {\n            method: \"PATCH\",\n            headers: {\n                \"content-type\": \"application/json\",\n                Authorization: `bearer ${TokenService.getAuthToken()}`\n            },\n            body: JSON.stringify({\n                equipment_id\n            })\n        })\n            .then(response => response.json())\n            .then(driver => driver)\n            .catch((error) => {\n                console.log(error);\n            })\n    },\n\n    updateDriver(driver){\n        return fetch(`${config.API_ENDPOINT}/drivers/${driver.id}`, {\n            method: \"PATCH\",\n            headers: {\n                \"content-type\": \"application/json\",\n                Authorization: `bearer ${TokenService.getAuthToken()}`\n            },\n            body: JSON.stringify({\n                full_name: driver.full_name,\n                pay_rate: driver.pay_rate,\n                equipment_id: driver.equipment_id,\n                status: driver.status\n            })\n        })\n            .then(response => response.json())\n            .then(driver => driver)\n            .catch((error) => {\n                console.log(error);\n            })\n    },\n\n    addDriver(driver){\n        return fetch(`${config.API_ENDPOINT}/drivers`, {\n            method: \"POST\",\n            headers: {\n                \"content-type\": \"application/json\",\n                Authorization: `bearer ${TokenService.getAuthToken()}`\n            },\n            body: JSON.stringify({\n                full_name: driver.full_name,\n                pay_rate: driver.pay_rate,\n                equipment_id: driver.equipment_id,\n            })\n        })\n            .then(response => response.json())\n            .then(driver => driver)\n            .catch((error) => {\n                console.log(error);\n            })\n    }\n}\n\nexport default DriversService;","import React, {Component} from 'react';\nimport './DriverCard.css';\nimport {Link} from 'react-router-dom';\nimport config from '../../config';\nimport AppContext from '../../Contexts/AppContext';\nimport { arrayIsEmpty, objectIsEmpty, removeEquipmentDriver } from '../../HelperFunctions/HelperFunctions';\nimport DriversService from '../../Services/DriversService';\n\n\nclass DriverCard extends Component{\n    \n    static defaultProps = {\n        driver: {}\n    }\n\n    static contextType = AppContext\n\n    handleDeleteDriver = (driverToRemove) => {\n\n        let {drivers, idleDrivers, equipments} = this.context\n        const driverId = driverToRemove.id\n\n        // if driver had equipment remove driver from equipment\n        if(!objectIsEmpty(driverToRemove.equipment)){\n            equipments = equipments.map((equipment) => {\n                if(equipment.driver.id === driverId){\n                    removeEquipmentDriver(equipment)\n                }\n                return equipment;\n            })\n        }\n\n        // change driver status to inactive in all drivers array\n        drivers = drivers.map((driver)=>{\n\n            if(driver.id === driverId){\n                driver.status = 'inactive'\n            }\n            return driver\n        })\n\n        const updateDriverInDB = {\n            id: driverToRemove.id,\n            full_name: driverToRemove.full_name,\n            pay_rate: driverToRemove.pay_rate,\n            equipment_id: null,\n            status: 'inactive'\n        }\n        DriversService.updateDriver(updateDriverInDB);\n\n        // remove driver for idle driver array\n        idleDrivers = idleDrivers.filter((driver) => driver.id !== driverId)\n\n        this.context.setDrivers(drivers);\n        this.context.setIdleDrivers(idleDrivers);\n        this.context.setEquipments(equipments);\n    }\n\n    render(){\n\n        const {driver} = this.props;\n        const {idleDrivers, shipments} = this.context;\n        let shipmentId = -1;\n        const busyDriver = arrayIsEmpty(idleDrivers.filter(idleDriver => idleDriver.id === driver.id));\n        if(busyDriver){\n            shipmentId = shipments.filter((shipment) => (shipment.driver.id === driver.id && shipment.status !== 'completed'))[0].id;\n        }\n\n        return(\n            <div className='DriverCard grey-back blue-text'>\n                <div className='flex-row'>\n                    <div className='card-div'>\n                        <h6>Driver</h6>\n                        <p>{driver.full_name}</p>\n                    </div>\n                    <div className='card-div'>\n                        <h6>Pay Rate</h6>\n                        <p>${driver.pay_rate}</p>\n                    </div>\n                    <div className='card-div'>\n                        <h6 className='small-header'>Equipment #</h6>\n                        <p>{driver.equipment.unit_num ? driver.equipment.unit_num : 'No Equipment'}</p>\n                    </div>\n                </div>\n                {\n                    shipmentId === -1 \n                    ?\n                    <div className='driver-buttons'>\n                        <Link to={`${config.BASEPATH}/driver/edit/${driver.id}`} className='app-button'>\n                            Edit\n                        </Link>\n                        <button className='app-button' onClick={() => {this.handleDeleteDriver(driver)}}>\n                            Delete\n                        </button>\n                    </div>\n                    :\n                    <div className='driver-buttons'>\n                        <span>\n                            Driver Busy\n                        </span>\n                        <Link className='app-button' to={`${config.BASEPATH}/load/${shipmentId}`}>\n                            View Load\n                        </Link>\n                    </div>\n                }\n                \n            </div>\n        )\n    }\n}\n\nexport default DriverCard;","import React, { Component } from 'react';\nimport './IdleDriversBox.css';\nimport AppContext from '../../Contexts/AppContext';\nimport DriverCard from '../DriverCard/DriverCard';\n\nclass IdleDriversBox extends Component {\n    \n    static contextType = AppContext;\n\n    renderIdleDriversList = () => {\n        const {idleDrivers} = this.context\n        return idleDrivers.map((iDriver) => {\n            return <li key={iDriver.id}><DriverCard driver={iDriver} /></li>\n        })\n    }\n\n    render() { \n        return (\n            <div className='IdleDriversBox'>\n                <h3 className='blue-back white-text'>Idle Drivers</h3>\n                <ul>\n                    {this.renderIdleDriversList()}\n                </ul>\n            </div>\n        );\n    }\n}\n \nexport default IdleDriversBox;","import React, { Component } from 'react';\nimport './DashboardPage.css';\nimport LoadListBox from '../../Components/LoadListBox/LoadListBox';\nimport IdleDriversBox from '../../Components/IdleDriversBox/IdleDriversBox';\nimport AppContext from '../../Contexts/AppContext';\nimport { getShipmentWithStatus, getAllShipmentsInProgress } from '../../HelperFunctions/HelperFunctions';\n\nclass DashboardPage extends Component {\n\n    static contextType = AppContext\n\n    render() { \n\n        const {shipments} = this.context;\n        const unAssignedShipments = getShipmentWithStatus(shipments, 'un-assigned');\n        const shipmentsInProgress = getAllShipmentsInProgress(shipments);\n\n        return (  \n            <section className='DashboardPage width-wrapper'>\n                <LoadListBox \n                    oldLoadStatus='un-assigned' \n                    shipments={unAssignedShipments}\n                    boxHeader='Un Assigned Loads'\n                />\n                <LoadListBox \n                    oldLoadStatus='dispatched' \n                    shipments={shipmentsInProgress}\n                    boxHeader='Loads in progress'\n                />\n                <IdleDriversBox />\n\n            </section>\n        );\n    }\n}\n \nexport default DashboardPage;","import TokenService from './TokenService';\nimport config from '../config';\n\nconst CarrierService = {\n    getCarrierData(){\n        return fetch(`${config.API_ENDPOINT}/carrier`, {\n            method: 'GET',\n            headers: {\n                \"content-type\": \"application/json\",\n                \"Authorization\": `bearer ${TokenService.getAuthToken()}`\n            }\n        })\n        .then(res => res.json())\n        .then(carrierData => {\n            return carrierData;\n        })\n        .catch(err => {\n            console.log(err);\n        })\n    },\n    getCarrierInfo(){\n        return fetch(`${config.API_ENDPOINT}/carrier-info`, {\n            method: 'GET',\n            headers: {\n                \"content-type\": \"application/json\",\n                \"Authorization\" : `bearer ${TokenService.getAuthToken()}`\n            }\n        })\n        .then(res => res.json())\n        .then(carrierInfo =>  {\n            return carrierInfo;\n        })\n        .catch(err => {\n            console.log(err);\n        })\n    }\n}\n\nexport default CarrierService;","import React, {Component} from 'react';\nimport AppContext from '../../Contexts/AppContext';\nimport './Logout.css';\nimport TokenService from '../../Services/TokenService';\nimport CarrierServices from '../../Services/CarrierServices';\n\nclass Logout extends Component {\n\n    static contextType = AppContext;\n\n    getCarrierInfoInComponent = async () => {\n        const carrier = await CarrierServices.getCarrierInfo()\n            .then(res => {\n                this.context.setLoggedInCarrier(res);\n                return res;\n            })\n            .catch(error => error);\n        this.setState({\n            carrier: carrier[0]\n        })\n    }\n\n    constructor(props){\n        super(props);\n        this.state = {\n            carrier: {}\n        }\n        this.getCarrierInfoInComponent()\n    }\n\n    state = {\n        carrier: {}\n    }\n\n    handleLogout = () => {\n        this.context.setLoggedIn(false);\n        TokenService.clearAuthToken();\n        this.props.history.push('/');\n    }\n\n    \n\n    render(){\n        return (\n            <div className='Logout width-wrapper'>\n                Welcome, <span className='carrier-name red-text'>\n                    {this.state.carrier.full_name}\n                </span>, <button className='app-link' onClick={() => {this.handleLogout()}}>Logout</button>\n            </div>\n        )\n    }\n}\n\nexport default Logout;","import TokenService from \"./TokenService\";\nimport config from \"../config\";\n\nconst EquipmentService = {\n  getEquipments() {\n    return fetch(`${config.API_ENDPOINT}/equips`, {\n      method: \"GET\",\n      headers: {\n        \"content-type\": \"application/json\",\n        Authorization: `bearer ${TokenService.getAuthToken()}`\n      }\n    })\n      .then(response => response.json())\n      .then(equipments => equipments)\n      .catch(error => {\n        console.log(error);\n      });\n  },\n\n  addNewEquipment(unit_num){\n    return fetch(`${config.API_ENDPOINT}/equips`, {\n      method: \"POST\",\n      headers: {\n        \"content-type\": \"application/json\",\n        Authorization: `bearer ${TokenService.getAuthToken()}`\n      },\n      body: JSON.stringify({\n        unit_num,\n      })\n    })\n      .then(response => response.json())\n      .then(equipments => equipments)\n      .catch(error => {\n        console.log(error);\n      });\n  },\n\n  updateEquipment(unit_num, status, id){\n    return fetch(`${config.API_ENDPOINT}/equips/${id}`, {\n      method: \"PATCH\",\n      headers: {\n        \"content-type\": \"application/json\",\n        Authorization: `bearer ${TokenService.getAuthToken()}`\n      },\n      body: JSON.stringify({\n        unit_num,\n        status,\n      })\n    })\n      .then(response => response.json())\n      .then(equipments => equipments)\n      .catch(error => {\n        console.log(error);\n      });\n  }\n};\n\nexport default EquipmentService;\n","import React from 'react';\nimport { arrayIsEmpty } from './HelperFunctions';\n\nexport function renderAllDriverOptions(drivers){\n    if(!arrayIsEmpty(drivers)){\n        return drivers.map((driver, i) => (\n            <option\n                key={driver.id}\n                value={i}\n                data-id={driver.id}\n                data-name={driver.full_name}\n            >\n                {driver.full_name}\n                {\n                    driver.status === 'inactive' && ` (Inactive Driver)`\n                }\n            </option>\n        ))\n    }\n    return drivers;\n}\n\nexport function getShipmentsWithDriverId(shipments, driverId){\n    // making sure we are mathcing an integer\n    driverId = parseInt(driverId, 10);\n    if(!arrayIsEmpty(shipments) && driverId !== -1){\n        return shipments.filter((shipment) => shipment.driver.id === driverId)\n    }\n    return shipments\n}","import React, {Component} from 'react';\nimport './LoadsPage.css';\nimport LoadListBox from '../../Components/LoadListBox/LoadListBox';\nimport AppContext from '../../Contexts/AppContext';\nimport {\n    renderAllDriverOptions, getShipmentsWithDriverId,\n} from '../../HelperFunctions/LoadsPageHelperFunctions';\nimport Backdrop from '../../Components/Backdrop/Backdrop';\n\nclass LoadsPage extends Component {\n\n    static defaultProps = {\n        shipments: [],\n        boxHeader: 'Loads'\n    }\n\n    constructor(props){\n        super(props);\n\n        this.state = {\n            shipments: props.shipments,\n            boxHeader: props.boxHeader,\n            filterMenu: false,\n            selectedDriver: -1\n        }\n    }\n\n    static contextType = AppContext\n\n    handleOpeningFilterMenu = () => {\n        this.setState({\n            filterMenu: !this.state.filterMenu\n        })\n    }\n\n    render(){\n\n        const {shipments} = this.props;\n        const {drivers} = this.context;\n        \n        return (\n            <section className='LoadsPage width-wrapper'>\n                <div className='filters-div'>\n                    <button className='app-link' onClick={() => {this.handleOpeningFilterMenu()}}>Filters</button>\n                    {\n                        this.state.filterMenu &&\n                        <>\n                            <Backdrop />\n                            <div className='filter-menu'>\n                                <div className='filter'>\n                                    <span className='field-label'>Driver</span>\n                                    <select \n                                        className='select-css'\n                                        value={this.state.selectedDriver}\n                                        onChange={(e) => {\n                                            const i = parseInt(e.target.value, 10)+1;\n                                            const selectedOption = Array.from(e.target.getElementsByTagName('option'))[i];\n                                            const driverId = parseInt(selectedOption.getAttribute('data-id'),10);\n                                            this.setState({\n                                                shipments: getShipmentsWithDriverId(shipments, driverId),\n                                                filterMenu: false,\n                                                boxHeader: `${selectedOption.getAttribute('data-name')} Loads`,\n                                                selectedDriver: e.target.value\n                                            })\n                                        }}\n                                    >\n                                        <option value='-1' data-id='-1' data-name='All'>All Drivers</option>\n                                        {renderAllDriverOptions(drivers)}\n                                    </select>\n                                </div>\n                            </div>\n                        </>\n                    }\n                </div>\n                <LoadListBox \n                    shipments={this.state.shipments} \n                    boxHeader={this.state.boxHeader}\n                />\n            </section>\n        )\n    }\n}\n\nexport default LoadsPage;","import React, { Component } from 'react';\nimport './EquipmentCard.css';\nimport { Link } from 'react-router-dom';\nimport config from '../../config';\nimport AppContext from '../../Contexts/AppContext';\nimport {\n    arrayIsEmpty, objectIsEmpty\n} from '../../HelperFunctions/HelperFunctions';\nimport DriversService from '../../Services/DriversService';\nimport EquipmentsService from '../../Services/EquipmentsService';\n\nclass EquipmentCard extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            editingMode: false\n        }\n    }\n\n    static contextType = AppContext\n\n    handleDeleteEquipment = (id) => {\n\n        let { equipments } = this.context\n        const { drivers, idleDrivers } = this.context\n        equipments = equipments.map((equipment) => {\n            if(equipment.id === id){\n                EquipmentsService.updateEquipment(equipment.unit_num, 'inactive', equipment.id)\n                equipment.status = 'inactive'\n            }\n            return equipment\n        })\n\n        drivers.map(driver => {\n            if (driver.equipment.id === id) {\n                DriversService.updateEquipment(driver.id, null)\n                driver.equipment = {}\n            }\n            return driver\n        })\n        idleDrivers.map(driver => {\n            if (driver.equipment.id === id) {\n                driver.equipment = {}\n            }\n            return driver\n        })\n\n        this.context.setEquipments(equipments);\n        this.context.setDrivers(drivers);\n        this.context.setIdleDrivers(idleDrivers);\n\n    }\n\n    render() {\n\n        const { equipment } = this.props;\n        const { idleEquipments, shipments } = this.context;\n        const busyEquipment = arrayIsEmpty(idleEquipments.filter((idleEquipment) => idleEquipment.id === equipment.id))\n        let shipmentId = -1;\n        if(busyEquipment && equipment.driver.hasOwnProperty('id')){\n            shipmentId = shipments.filter((shipment) => shipment.equipment.id === equipment.id)[0].id;\n        }\n        \n        return (\n            <div className='EquipmentCard grey-back blue-text'>\n\n                <div className='flex-row'>\n                    <div className='equip-num'>\n                        <h6>Unit Num</h6>\n                        <p>{equipment.unit_num}</p>\n                    </div>\n                    {\n                        !objectIsEmpty(equipment.driver) &&\n                        <div className='equip-driver'>\n                            <h6>Driver</h6>\n                            <p className={equipment.driver.full_name ? '' : 'no-driver'}\n                            >{equipment.driver.full_name ? equipment.driver.full_name : 'No Driver Assigned'}</p>\n                        </div>\n                    }\n                </div>\n                {\n                    shipmentId === -1 \n                    ?\n                    <div className='equipment-buttons'>\n                        <Link className='app-button' to={`${config.BASEPATH}/equipment/edit/${equipment.id}`}>\n                            Edit\n                        </Link>\n                        <button className='app-button' onClick={() => { this.handleDeleteEquipment(equipment.id) }}>\n                            Delete\n                        </button>\n                    </div>\n                    :\n                    <div className='equipment-buttons'>\n                        <span>\n                            Equipment Busy\n                        </span>\n                        <Link className='app-button' to={`${config.BASEPATH}/load/${shipmentId}`}>\n                            View Load\n                        </Link>\n                    </div>\n                }\n\n\n\n            </div>\n        )\n    }\n}\n\nexport default EquipmentCard;","import React, { Component } from 'react';\nimport './EquipmentsPage.css';\nimport AppContext from '../../Contexts/AppContext';\nimport EquipmentCard from '../../Components/EquipmentCard/EquipmentCard';\n\nclass EquipmentsPage extends Component {\n\n    static contextType = AppContext;\n\n    handleAddEquipment = (e) => {\n        e.preventDefault();\n        console.log(`Equipment Add Submitted`);\n    }\n\n    renderEquipmentList = () => {\n\n        let { equipments } = this.context;\n        equipments = equipments.filter((equipment) => equipment.status === 'active')\n\n        return equipments.map(equip => {\n            return (\n                <li key={equip.id}>\n                    <EquipmentCard equipment={equip} />\n                </li>\n            )\n        })\n    }\n\n    render() {\n        return (\n            <section className='EquipmentPage width-wrapper'>\n                <div className='box'>\n                    <h3 className='box-header blue-back white-text'>Equipment List</h3>\n                    <ul className='equipment-list'>\n                        {this.renderEquipmentList()}\n                    </ul>\n                </div>\n            </section>\n        )\n    }\n}\n\n\nexport default EquipmentsPage;","import React, { Component } from 'react';\nimport './DriversPage.css';\nimport AppContext from '../../Contexts/AppContext';\nimport DriverCard from '../../Components/DriverCard/DriverCard';\n\nclass DriversPage extends Component {\n\n    static contextType = AppContext\n\n\n    renderDrivers = (drivers) => {\n        \n        return drivers.map((driver) => {\n            if(driver.status === 'active'){\n                return (\n                    <li key={driver.id}>\n                        <DriverCard driver={driver} />\n                    </li>\n                )\n            }\n            else{\n                return ''\n            }\n        })\n    }\n\n    render() {\n\n        const { drivers } = this.context\n        \n        // to change background color if viewing specific driver\n        // const { id } = !objectIsEmpty(this.props.match.params) ? this.props.match.params : -1\n\n        return (\n            <section className='DriversPage width-wrapper'>\n                <h4 className='blue-back white-text'>\n                    Drivers List\n                </h4>\n                <ul className='drivers-list'>\n                    {this.renderDrivers(drivers)}\n                </ul>\n            </section>\n        )\n    }\n}\n\n\nexport default DriversPage;","import React, { Component } from 'react';\nimport './DriversDropDown.css'\n\nclass DriversDropDown extends Component {\n    \n    constructor(props){\n        super(props)\n        this.state = {\n            optionsValue: props.defaultValue\n        }\n    }\n    \n    static defaultProps = {\n        drivers: [],\n        defaultValue: 0,\n        className: 'select-css',\n        name: 'driver',\n        id: 'driver'\n    }\n\n    handleChange = (e) => {\n        this.setState({\n            optionsValue: e.target.value\n        }, () => {\n            if(this.props.hasOwnProperty('handleChange')){\n                this.props.handleChange(this.state.optionsValue)\n            }\n        })\n    }\n\n    renderDriverOptions = (drivers) => {\n        if(drivers !== []){\n            return drivers.map((driver, i) => {\n                return (\n                    <option \n                        value={driver.id}\n                        key={i}\n                        defaultValue={true}\n                    >\n                        {driver.full_name}\n                    </option>\n                )\n            })\n        }   \n    }\n\n    render() {\n\n        const { \n            className = 'select-css', \n            drivers = [], \n            name='driver', \n            id='driver'\n        } = this.props;\n\n\n        return (\n            <div className='DriversDropDown'>\n                <select className={className}\n                    name={name}\n                    id={id} \n                    value={this.state.optionsValue} \n                    onChange={(e) => {this.handleChange(e)}}>\n                    <option value='-1'>No Driver</option>\n                    {this.renderDriverOptions(drivers)}    \n                </select>\n            </div>\n        );\n    }\n}\n\nexport default DriversDropDown;","import React, { Component } from 'react';\nimport './EquipmentEditPage.css';\nimport DriversDropDown from '../../Components/DriversDropDown/DriversDropDown';\nimport AppContext from '../../Contexts/AppContext';\nimport {\n    handleGoBack,\n    objectIsEmpty,\n    arrayIsEmpty,\n    removeEquipmentDriver,\n} from '../../HelperFunctions/HelperFunctions';\nimport EquipmentService from '../../Services/EquipmentsService';\nimport DriversService from '../../Services/DriversService';\n// import EquipmentService from '../../Services/EquipmentsService';\n// import DriversService from '../../Services/DriversService';\n\nclass EquipmentEditPage extends Component {\n\n    static defaultProps = {\n        equipments: {},\n        idleDrivers: {},\n        rprops: {},\n    }\n\n    constructor(props) {\n        super(props);\n\n        // setting state so that edit equipment page\n        // already has values in it for the selected equipment to edit\n        // if not done this way , then another Get request had to be made for\n        // getting equipment by id \n        const { equipments, idleDrivers } = props;\n        const { id } = this.props.rprops.match.params;\n        const equipment = equipments.filter(equipment => equipment.id === parseInt(id, 10));\n        let driver = {};\n        let availableDrivers = idleDrivers.filter(driver => objectIsEmpty(driver.equipment))\n        let unitNum = '';\n        let currentDriver = -1;\n        let inIdleQueue = true;\n        if (equipment[0] !== undefined) {\n            driver = equipment[0].driver;\n            unitNum = equipment[0].unit_num;\n\n            // The server after adding serialization is sending in full_name and driver\n            // properties with empty strings so to solve and empty driver populating\n            // in the select statement the below line is as is, if there is a driver.id then\n            // set one else leave it to current driver which is -1\n            currentDriver = driver.id ? driver.id : currentDriver;\n            if (currentDriver !== -1) {\n                availableDrivers.unshift(driver);\n                inIdleQueue = !arrayIsEmpty(idleDrivers.filter((idleDr) => driver.id === idleDr.id));\n            }\n        }\n\n        this.state = {\n            error: '',\n            unitNumError: false,\n            unitNum,\n            equipment,\n            availableDrivers,\n            currentDriver,\n            inIdleQueue,\n        }\n    }\n\n    static contextType = AppContext\n\n    giveEquipment = (driver, equipment) => {\n        DriversService.updateEquipment(driver.id, equipment.id);\n        driver.equipment = {\n            id: equipment.id,\n            unit_num: equipment.unit_num,\n            status: 'active'\n        }\n        return driver;\n    }\n\n    takeAwayEquipment = (driver) => {\n        DriversService.updateEquipment(driver.id, null)\n        driver.equipment = {}\n        return driver;        \n    }\n\n    setDriverForEquipment = (equipment, driver) => {\n        equipment.driver = driver\n        return equipment;\n    }\n\n    removeDriverFromEquipment = (equipment) => {\n        equipment.driver = {}\n        return equipment;\n    }\n\n    changeEquipmentForDriver = (idleDrivers, driver, newDriverId, oldDriverId, equipment) => {\n        if(driver.id === newDriverId && newDriverId !== -1){\n            driver = this.giveEquipment(driver, equipment);\n            idleDrivers.map((oldDriver) => {\n                if(oldDriverId === oldDriver.id){\n                    oldDriver = this.takeAwayEquipment(oldDriver)\n                }\n                return oldDriver;\n            })\n        } else if (driver.id === oldDriverId){ \n            driver = this.takeAwayEquipment(driver)\n        }\n        return driver;\n    }\n\n    // Updates the changes in state and in the database\n    handleEquipmentEdit = (e, equipmentArray) => {\n\n        e.preventDefault();\n        const equipment = equipmentArray[0];\n        const oldDriverId = equipment.driver.id === undefined ? -1 : equipment.driver.id;\n        const newDriverId = this.state.inIdleQueue ? parseInt(e.target['driver'].value, 10) : oldDriverId;\n        const unit_num = e.target['unit-num'].value;\n        const { equipments, idleDrivers, drivers } = this.props\n\n        // Enter changing driver only when they change driver selection\n        if(newDriverId !== oldDriverId){\n            \n            idleDrivers.map((driver) => {\n                driver = this.changeEquipmentForDriver(idleDrivers, driver, newDriverId, oldDriverId, equipment);\n                return driver;\n            })\n\n            drivers.map((driver) => {\n                driver = this.changeEquipmentForDriver(drivers, driver, newDriverId, oldDriverId, equipment);\n                return driver;\n            })\n\n            let removeExecuted = false;\n            equipments.map((changeEquipemnt) => {\n                if(oldDriverId === -1){\n                    changeEquipemnt = this.setDriverForEquipment(equipment, idleDrivers.filter(driver => driver.id === newDriverId)[0])\n                }else {\n\n                    if((newDriverId === changeEquipemnt.driver.id || newDriverId === -1) && !removeExecuted) {\n                        if(changeEquipemnt.id === equipment.id){\n                            changeEquipemnt = removeEquipmentDriver(changeEquipemnt)\n                            removeExecuted = true;\n                        }\n                    }\n                    if(changeEquipemnt.id === equipment.id && newDriverId !== -1){\n                        changeEquipemnt = this.setDriverForEquipment(equipment, idleDrivers.filter(driver => driver.id === newDriverId)[0]);\n                    } \n                }\n                return changeEquipemnt\n            })\n        }\n\n        if (unit_num !== equipment.unit_num) {\n            equipments.map((changeEquipment) => {\n                if (changeEquipment.id === equipment.id) {\n                    changeEquipment.unit_num = unit_num\n                }\n                return changeEquipment\n            });\n\n            idleDrivers.map((driver) => {\n                if(driver.equipment.id === equipment.id){\n                    driver.equipment.unit_num = unit_num\n                }\n                return driver;\n            });\n\n            drivers.map((driver) => {\n                if(driver.equipment.id === equipment.id){\n                    driver.equipment.unit_num = unit_num\n                }\n                return driver;\n            });\n            \n            // call service to update the database\n            EquipmentService.updateEquipment(unit_num, 'active', equipment.id);\n        }\n\n        \n        this.context.setIdleDrivers(idleDrivers);\n        this.context.setEquipments(equipments);\n        this.context.setDrivers(drivers);\n\n        handleGoBack(this.props.rprops.history);\n\n    }\n\n    validateUnitNum = (e) => {\n        const unitNum = e.target.value;\n        this.setState({\n            unitNum\n        })\n        if (unitNum.trim() === '') {\n            this.setState({\n                error: 'Invalid Unit Num',\n                unitNumError: true\n            })\n        } else {\n            this.setState({\n                error: '',\n                unitNumError: false\n            })\n        }\n    }\n\n    render() {\n\n        const { unitNum, equipment, availableDrivers, currentDriver } = this.state\n\n        return (\n            <section className='EquipmentEditPage width-wrapper'>\n\n                <form className='edit-equip' onSubmit={(e) => { this.handleEquipmentEdit(e, equipment) }}>\n                    <fieldset>\n                        <legend className='blue-back white-text'>\n                            <button type='button' className='app-button go-back' onClick={(e) => { handleGoBack(this.props.rprops.history) }}>\n                                Go Back\n                            </button>\n                            <span>Edit Equipment</span>\n                        </legend>\n                        <div className='flex'>\n                            <label htmlFor='unit-num'>\n                                <span className='input-title'>Unit Num:</span>\n                                <input\n                                    type='text'\n                                    id='unit-num'\n                                    name='unit-num'\n                                    required\n                                    value={unitNum}\n                                    onChange={(e) => { this.validateUnitNum(e) }}\n                                />\n                                {\n                                    this.state.unitNumError &&\n                                    <span className='error'>{this.state.error}</span>\n                                }\n                            </label>\n                            {\n                               this.state.inIdleQueue && \n                               <label htmlFor='driver'>\n                                    <span className='input-title'>Available Drivers</span>\n                                    {\n                                        equipment[0] !== undefined &&\n                                        <DriversDropDown\n                                            name={'driver'}\n                                            id={'driver'}\n                                            drivers={availableDrivers}\n                                            className={'select-css'}\n                                            defaultValue={currentDriver} />\n                                    }\n\n                                </label>\n                            }\n                            <button\n                                className='app-button'\n                                type='submit'\n                            >\n                                Save Changes\n                                </button>\n                        </div>\n                    </fieldset>\n                </form>\n            </section>\n        );\n    }\n}\n\nexport default EquipmentEditPage;","import TokenService from \"./TokenService\";\nimport config from \"../config\";\n\nconst ShipmentsSerivce = {\n    insertShipment(shipment){\n        return fetch(`${config.API_ENDPOINT}/shipments`, {\n            method: \"POST\",\n            headers: {\n              \"content-type\": \"application/json\",\n              Authorization: `bearer ${TokenService.getAuthToken()}`\n            },\n            body: JSON.stringify({\n                rate: shipment.rate || 0.0, \n                status: shipment.status, \n                miles: shipment.miles || 0, \n                driver_id: shipment.driver_id || null, \n                broker: shipment.broker || null,\n                pickup_date: shipment.pickup_date,\n                delivery_date: shipment.delivery_date,\n                pickup_city: shipment.pickup_city,\n                pickup_state: shipment.pickup_state,\n                pickup_zipcode: shipment.pickup_zipcode,\n                delivery_city: shipment.delivery_city,\n                delivery_state: shipment.delivery_state,\n                delivery_zipcode: shipment.delivery_zipcode\n            })\n          })\n            .then(response => response.json())\n            .then(shipment => shipment)\n            .catch(error => {\n              console.log(error);\n            });\n    },\n\n    updateShipment(shipment){\n      return fetch(`${config.API_ENDPOINT}/shipments/${shipment.id}`, {\n        method: \"PATCH\",\n        headers: {\n          \"content-type\": \"application/json\",\n          Authorization: `bearer ${TokenService.getAuthToken()}`\n        },\n        body: JSON.stringify({\n            rate: shipment.rate, \n            status: shipment.status, \n            miles: shipment.miles, \n            driver_id: shipment.driver_id, \n            broker: shipment.broker,\n            pickup_date: shipment.pickup_date,\n            delivery_date: shipment.delivery_date,\n            pickup_city: shipment.pickup_city,\n            pickup_state: shipment.pickup_state,\n            pickup_zipcode: shipment.pickup_zipcode,\n            delivery_city: shipment.delivery_city,\n            delivery_state: shipment.delivery_state,\n            delivery_zipcode: shipment.delivery_zipcode\n        })\n      })\n        .then(response => response.json())\n        .then(shipment => shipment)\n        .catch(error => {\n          console.log(error);\n        });\n    },\n\n    deleteShipment(id){\n      return fetch(`${config.API_ENDPOINT}/shipments/${id}`, {\n        method: \"DELETE\",\n        headers: {\n          \"content-type\": \"application/json\",\n          Authorization: `bearer ${TokenService.getAuthToken()}`\n        }\n      })\n        .then(response => response.json())\n        .then(shipment => shipment)\n        .catch(error => {\n          console.log(error);\n        });\n    }\n}\n\nexport default ShipmentsSerivce;","import React, { Component } from 'react';\nimport './AddLoadPage.css';\nimport {\n    handleGoBack,\n    routeUserTo,\n    formatDate,\n    getAvailableDrivers,\n} from '../../HelperFunctions/HelperFunctions';\nimport {\n    notValidDate,\n    emptySpaces,\n} from '../../HelperFunctions/InputFieldValidations';\nimport DriversDropDown from '../../Components/DriversDropDown/DriversDropDown';\nimport AppContext from '../../Contexts/AppContext';\nimport config from '../../config';\nimport ShipmentsSerivce from '../../Services/ShipmentsService';\n\nclass AddLoadPage extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            hasError: false,\n            availableDrivers: [],\n            error: {\n                dateError: 'Enter Date in correct format \"MM/DD/YYYY\"',\n                pickupDate: false,\n                deliveryDate: false,\n                cityError: 'City is required',\n                pickupCity: false,\n                deliveryCity: false,\n                stateError: 'State is required and must be two characters, Eg. for New York - NY',\n                pickupState: false,\n                deliveryState: false,\n                zipcodeError: 'Zipcode is required',\n                pickupZipcode: false,\n                deliveryZipcode: false,\n            },\n            pickupDate: formatDate(new Date()),\n            deliveryDate: formatDate(new Date()),\n            pickupCity: '',\n            deliveryCity: '',\n            pickupState: '',\n            deliveryState: '',\n            pickupZipcode: '',\n            deliveryZipcode: '',\n            miles: '',\n            rate: '',\n            broker: '',\n        }\n    }\n\n    static contextType = AppContext\n\n    // validation of date, Validates both pickup date and delivery date\n    // *** THIS FUNCTION IS DEPENDENT ON THE NAME PROPERTY OF THE INPUT BOXES ***\n    validateInputDate = (e) => {\n        const date = e.target.value;\n        const { name } = e.target;\n\n        name === 'pickup-date'\n            ? this.setState({ pickupDate: date })\n            : this.setState({ deliveryDate: date });\n\n        if (notValidDate(date)) {\n            name === 'pickup-date'\n                ? this.setState({\n                    error: {\n                        ...this.state.error,\n                        pickupDate: true,\n                    }\n                })\n                : this.setState({\n                    error: {\n                        ...this.state.error,\n                        deliveryDate: true,\n                    }\n                });\n        } else {\n            name === 'pickup-date'\n                ? this.setState({\n                    error: {\n                        ...this.state.error,\n                        pickupDate: false,\n                    }\n                })\n                : this.setState({\n                    error: {\n                        ...this.state.error,\n                        deliveryDate: false,\n                    }\n                });\n        }\n    }\n\n    validateCityInput = (e) => {\n        const city = e.target.value;\n        const { name } = e.target;\n\n        name === 'pickup-city'\n            ? this.setState({ pickupCity: city })\n            : this.setState({ deliveryCity: city });\n\n\n        if (emptySpaces(city)) {\n            name === 'pickup-city'\n                ? this.setState({\n                    error: {\n                        ...this.state.error,\n                        pickupCity: true,\n                    }\n                })\n                : this.setState({\n                    error: {\n                        ...this.state.error,\n                        deliveryCity: true,\n                    }\n                });\n        } else {\n            name === 'pickup-city'\n                ? this.setState({\n                    error: {\n                        ...this.state.error,\n                        pickupCity: false,\n                    }\n                })\n                : this.setState({\n                    error: {\n                        ...this.state.error,\n                        deliveryCity: false,\n                    }\n                });\n        }\n    }\n\n    validateStateInput = (e) => {\n        const state = e.target.value;\n        const { name } = e.target;\n\n        name === 'pickup-state'\n            ? this.setState({ pickupState: state })\n            : this.setState({ deliveryState: state });\n\n\n        if (emptySpaces(state) || state.trim().length !== 2) {\n            name === 'pickup-state'\n                ? this.setState({\n                    error: {\n                        ...this.state.error,\n                        pickupState: true,\n                    }\n                })\n                : this.setState({\n                    error: {\n                        ...this.state.error,\n                        deliveryState: true,\n                    }\n                });\n        } else {\n            name === 'pickup-state'\n                ? this.setState({\n                    error: {\n                        ...this.state.error,\n                        pickupState: false,\n                    }\n                })\n                : this.setState({\n                    error: {\n                        ...this.state.error,\n                        deliveryState: false,\n                    }\n                });\n        }\n    }\n\n    validateZipcodeInput = (e) => {\n        const zipcode = e.target.value;\n        const { name } = e.target;\n\n        name === 'pickup-zipcode'\n            ? this.setState({ pickupZipcode: zipcode })\n            : this.setState({ deliveryZipcode: zipcode });\n\n\n        if (emptySpaces(zipcode)) {\n            name === 'pickup-zipcode'\n                ? this.setState({\n                    error: {\n                        ...this.state.error,\n                        pickupZipcode: true,\n                    }\n                })\n                : this.setState({\n                    error: {\n                        ...this.state.error,\n                        deliveryZipcode: true,\n                    }\n                });\n        } else {\n            name === 'pickup-zipcode'\n                ? this.setState({\n                    error: {\n                        ...this.state.error,\n                        pickupZipcode: false,\n                    }\n                })\n                : this.setState({\n                    error: {\n                        ...this.state.error,\n                        deliveryZipcode: false,\n                    }\n                });\n        }\n    }\n\n    updateIdleDriverQueue = (driverId) => {\n        let { idleDrivers } = this.context;\n        idleDrivers = idleDrivers.filter(driver => driver.id !== driverId);\n        this.context.setIdleDrivers(idleDrivers)\n    }\n\n    handleAddLoad = async (e) => {\n\n        e.preventDefault();\n\n        const broker = e.target['broker'].value.trim() || '';\n        const delivery_warehouse = {\n            city: e.target['delivery-city'].value.trim(),\n            state: e.target['delivery-state'].value.toUpperCase(),\n            zipcode: e.target['delivery-zipcode'].value.trim()\n        };\n        const pickup_warehouse = {\n            city: e.target['pickup-city'].value.trim(),\n            state: e.target['pickup-state'].value.toUpperCase(),\n            zipcode: e.target['pickup-zipcode'].value.trim()\n        };\n        const miles = e.target['miles'].value.trim() || 0;\n        const rate = e.target['rate'].value.trim() || 0;\n        const driverId = parseInt(e.target['driver'].value, 10);\n\n        // getting driver and equipment from drivers array in context\n        let driver = {}\n        let equipment = {}\n        let status = 'un-assigned';\n        if (driverId !== -1) {\n            this.context.drivers.map(contextDriver => {\n                if (contextDriver.id === driverId) {\n                    driver = {\n                        id: driverId,\n                        full_name: contextDriver.full_name,\n                        pay_rate: contextDriver.pay_rate,\n                        status: contextDriver.status\n                    }\n                    equipment = {\n                        id: contextDriver.equipment.id,\n                        status: contextDriver.equipment.status,\n                        unit_num: contextDriver.equipment.unit_num\n                    }\n                }\n                return contextDriver\n            });\n            this.updateIdleDriverQueue(driverId);\n            status = 'dispatched'\n        }\n\n        const pickup_date = e.target['pickup-date'].value;\n        const delivery_date = e.target['delivery-date'].value;\n\n        // the shipment to store in the database\n        let shipmentInDB = {\n            rate,\n            status,\n            miles,\n            driver_id: driverId !== -1 ? driverId : null,\n            broker,\n            pickup_date,\n            delivery_date,\n            pickup_city: pickup_warehouse.city,\n            pickup_state: pickup_warehouse.state,\n            pickup_zipcode: pickup_warehouse.zipcode,\n            delivery_city: delivery_warehouse.city,\n            delivery_state: delivery_warehouse.state,\n            delivery_zipcode: delivery_warehouse.zipcode\n        }\n        // add and get the new shipment with the id\n        shipmentInDB = await ShipmentsSerivce.insertShipment(shipmentInDB)\n\n        // shipment in the format for the front end to display it correctly\n        // and keep all arrays in order.\n        const newShipment = {\n            id: shipmentInDB.id,\n            pickup_date,\n            delivery_date,\n            broker,\n            delivery_warehouse,\n            pickup_warehouse,\n            miles,\n            driver,\n            equipment,\n            rate,\n            status,\n        }\n\n        this.context.setShipments([\n            ...this.context.shipments,\n            newShipment\n        ])\n\n        // handleGoBack(this.props.history);\n        routeUserTo(this.props.history, `${config.BASEPATH}/load/${newShipment.id}`)\n\n    }\n\n    render() {\n        const availableDrivers = getAvailableDrivers(this.context.idleDrivers)\n        const { error } = this.state\n\n        return (\n            <section className='AddLoadPage width-wrapper'>\n                <form className='add-load-form' onSubmit={(e) => { this.handleAddLoad(e) }}>\n                    <fieldset>\n                        <legend className='blue-back white-text'>\n                            <button type='button' className='app-button go-back' onClick={(e) => { handleGoBack(this.props.history) }}>\n                                Go Back\n                            </button>\n                            <span>Add Load</span>\n                        </legend>\n                        <div className='flex'>\n                            <h4 className='fieldset-sub-title blue-text'>\n                                Pick Up Info\n                            </h4>\n                            <label htmlFor='pickup-date'>\n                                <span className='input-title'>* Date</span>\n                                <input\n                                    type='text'\n                                    id='pickup-date'\n                                    name='pickup-date'\n                                    maxLength='10'\n                                    value={this.state.pickupDate}\n                                    onChange={(e) => { this.validateInputDate(e) }}\n                                    onBlur={(e) => {\n                                        if (e.target.value === '') {\n                                            this.setState({\n                                                pickupDate: formatDate(new Date()),\n                                                error: {\n                                                    ...this.state.error,\n                                                    pickupDate: false\n                                                }\n                                            })\n                                        }\n                                    }}\n                                />\n                                {\n                                    error.pickupDate &&\n                                    <span className='error'>{error.dateError}</span>\n                                }\n                            </label>\n                            <label htmlFor='pickup-city'>\n                                <span className='input-title'>* City</span>\n                                <input\n                                    type='text'\n                                    id='pickup-city'\n                                    name='pickup-city'\n                                    placeholder='Eg. Dallas'\n                                    required\n                                    value={this.state.pickupCity}\n                                    onChange={(e) => { this.validateCityInput(e) }}\n                                />\n                                {\n                                    error.pickupCity &&\n                                    <span className='error'>{error.cityError}</span>\n                                }\n                            </label>\n                            <label htmlFor='pickup-state'>\n                                <span className='input-title'>* State</span>\n                                <input\n                                    type='text'\n                                    placeholder='Eg. TX'\n                                    maxLength='2'\n                                    id='pickup-state'\n                                    name='pickup-state'\n                                    required\n                                    value={this.state.pickupState}\n                                    onChange={(e) => { this.validateStateInput(e) }}\n                                />\n                                {\n                                    this.state.error.pickupState &&\n                                    <span className='error'>{this.state.error.stateError}</span>\n                                }\n                            </label>\n                            <label htmlFor='pickup-zipcode'>\n                                <span className='input-title'>* Zipcode</span>\n                                <input\n                                    type='text'\n                                    id='pickup-zipcode'\n                                    maxLength='10'\n                                    name='pickup-zipcode'\n                                    placeholder='Eg. 75001'\n                                    required\n                                    value={this.state.pickupZipcode}\n                                    onChange={(e) => { this.validateZipcodeInput(e) }}\n                                />\n                                {\n                                    this.state.error.pickupZipcode &&\n                                    <span className='error'>{this.state.error.zipcodeError}</span>\n                                }\n                            </label>\n                            <h4 className='fieldset-sub-title blue-text'>\n                                Delivery Info\n                            </h4>\n                            <label htmlFor='delivery-date'>\n                                <span className='input-title'>* Date</span>\n                                <input\n                                    type='text'\n                                    id='delivery-date'\n                                    name='delivery-date'\n                                    maxLength='10'\n                                    value={this.state.deliveryDate}\n                                    onChange={(e) => { this.validateInputDate(e) }}\n                                    onBlur={(e) => {\n                                        if (e.target.value === '') {\n                                            this.setState({\n                                                deliveryDate: formatDate(new Date()),\n                                                error: {\n                                                    ...this.state.error,\n                                                    deliveryDate: false\n                                                }\n                                            })\n                                        }\n                                    }}\n                                />\n                                {\n                                    this.state.error.deliveryDate &&\n                                    <span className='error'>{this.state.error.dateError}</span>\n                                }\n                            </label>\n                            <label htmlFor='delivery-city'>\n                                <span className='input-title'>* City</span>\n                                <input\n                                    type='text'\n                                    id='delivery-city'\n                                    name='delivery-city'\n                                    placeholder='Eg. Indianapolis'\n                                    required\n                                    value={this.state.deliveryCity}\n                                    onChange={(e) => { this.validateCityInput(e) }}\n                                />\n                                {\n                                    this.state.error.deliveryCity &&\n                                    <span className='error'>{this.state.error.cityError}</span>\n                                }\n                            </label>\n                            <label htmlFor='delivery-state'>\n                                <span className='input-title'>* State</span>\n                                <input\n                                    type='text'\n                                    placeholder='Eg. IN'\n                                    maxLength='2'\n                                    id='delivery-state'\n                                    name='delivery-state'\n                                    required\n                                    value={this.state.deliveryState}\n                                    onChange={(e) => { this.validateStateInput(e) }}\n                                />\n                                {\n                                    this.state.error.deliveryState &&\n                                    <span className='error'>{this.state.error.stateError}</span>\n                                }\n                            </label>\n                            <label htmlFor='delivery-zipcode'>\n                                <span className='input-title'>* Zipcode</span>\n                                <input\n                                    type='text'\n                                    id='delivery-zipcode'\n                                    name='delivery-zipcode'\n                                    maxLength='10'\n                                    placeholder='Eg. 46225'\n                                    required\n                                    value={this.state.deliveryZipcode}\n                                    onChange={(e) => { this.validateZipcodeInput(e) }}\n                                />\n                                {\n                                    this.state.error.deliveryZipcode &&\n                                    <span className='error'>{this.state.error.zipcodeError}</span>\n                                }\n                            </label>\n                            <h4 className='fieldset-sub-title blue-text'>\n                                Additional Info\n                            </h4>\n                            <label htmlFor='miles'>\n                                <span className='input-title'>Miles</span>\n                                <input\n                                    type='number'\n                                    min='0'\n                                    id='miles'\n                                    name='miles'\n                                />\n                                {\n                                    // this.state.unitNumError &&\n                                    // <span className='error'>{this.state.error}</span>\n                                }\n                            </label>\n                            <label htmlFor='rate'>\n                                <span className='input-title'>Rate</span>\n                                <input\n                                    type='number'\n                                    min='0'\n                                    id='rate'\n                                    name='rate'\n                                />\n                                {\n                                    // this.state.unitNumError &&\n                                    // <span className='error'>{this.state.error}</span>\n                                }\n                            </label>\n                            <label htmlFor='broker'>\n                                <span className='input-title'>Broker</span>\n                                <input\n                                    type='text'\n                                    id='broker'\n                                    name='broker'\n                                />\n                            </label>\n                            <label htmlFor='driver'>\n                                <span className='input-title'>Assign Driver</span>\n                                <DriversDropDown name='driver' id='driver' drivers={availableDrivers} className='select-css' />\n                                {\n                                    // incorrectPassword &&\n                                    // <span className='error'>{error}</span>\n                                }\n                            </label>\n                            {\n                                !(\n                                    error.pickupCity ||\n                                    error.deliveryCity ||\n                                    error.pickupDate ||\n                                    error.deliveryDate ||\n                                    error.pickupState ||\n                                    error.deliveryState ||\n                                    error.pickupZipcode ||\n                                    error.deliveryZipcode\n                                )\n                                    ?\n                                    <button\n                                        className='app-button'\n                                        type='submit'\n                                    >\n                                        Add New Load\n                                    </button>\n                                    :\n                                    <button\n                                        className='app-button'\n                                        type='submit'\n                                        disabled\n                                    >\n                                        Add New Load\n                                    </button>\n                            }\n\n                        </div>\n                    </fieldset>\n                </form>\n            </section>\n        );\n    }\n}\n\nexport default AddLoadPage;","import React, { Component } from 'react';\nimport './LoadByIdPage.css';\nimport AppContext from '../../Contexts/AppContext';\nimport {\n    arrayIsEmpty,\n    objectIsEmpty,\n    renderLoadStatusOptions,\n    formatCurrency,\n    getAvailableDrivers,\n    isNotUndefined,\n    routeUserTo,\n    handleGoBack\n} from '../../HelperFunctions/HelperFunctions';\nimport DriversDropDown from '../../Components/DriversDropDown/DriversDropDown';\nimport config from '../../config';\nimport {Link} from 'react-router-dom';\nimport ShipmentsService from '../../Services/ShipmentsService';\n\nclass LoadByIdPage extends Component {\n\n    static defaultProps = {\n        rprops: {},\n        shipments: [],\n        idleDrivers: []\n    }\n\n    static contextType = AppContext\n\n    constructor(props) {\n        super(props);\n\n        const id = parseInt(props.rprops.match.params.id, 10)\n        const { shipments } = props;\n        let shipment = {};\n        let status = '';\n        let avaialableDrivers = [];\n        let driverAssigned = -1;\n        if (!arrayIsEmpty(shipments)) {\n            shipment = shipments.filter(shipment => shipment.id === id)[0];\n            status = shipment.status\n            if (shipment.status === 'un-assigned') {\n                avaialableDrivers = getAvailableDrivers(props.idleDrivers)\n                driverAssigned = isNotUndefined(avaialableDrivers[0]) ? avaialableDrivers[0].id : -1\n            }\n        }\n        this.state = {\n            shipment,\n            status,\n            avaialableDrivers,\n            driverAssigned,\n            completedShipment: status === 'completed' ? true : false\n        }\n    }\n\n    // remove drivers when status is changed to un-assigned\n    removeDriverAndEquipmentFromShipment = (shipment) => {\n\n        this.sendDriverToIdleDrivers(shipment);\n\n        shipment.driver = {}\n        shipment.equipment = {}\n\n        return shipment;\n    }\n\n    sendDriverToIdleDrivers = (shipment) => {\n        const {idleDrivers} = this.context\n        const driver = {\n            ...shipment.driver,\n            pay_rate: shipment.driver.pay_rate.toString(), // converting to string to make sure all objects are of the same data type\n            equipment: shipment.equipment\n        }\n\n        this.context.setIdleDrivers([\n            ...idleDrivers,\n            driver\n        ])\n    }\n\n    handleChangeLoadStatus = (e) => {\n        e.preventDefault();\n\n        const { status } = this.state;\n        this.setState({\n            shipment: {\n                ...this.state.shipment,\n                status\n            }\n        }, () => {\n            const { shipment } = this.state;\n            let { shipments } = this.props;\n\n            ShipmentsService.updateShipment({id: shipment.id, status})\n            shipments = shipments.map((propShipment) => {\n                if (propShipment.id === shipment.id) {\n                    propShipment.status = status\n                    if (status === 'un-assigned') {\n                        propShipment = this.removeDriverAndEquipmentFromShipment(propShipment);\n                        // update shipment by setting driver_id to null and status to un-assigned\n                        ShipmentsService.updateShipment({id: shipment.id, driver_id: null})\n                    }\n                    if(status === 'completed'){\n                        this.setState({\n                            completedShipment: true\n                        })\n                        this.sendDriverToIdleDrivers(propShipment);\n                    }\n                }\n                return propShipment\n            })\n            this.context.setShipments(shipments);\n        })\n    }\n\n    handleAssignDriver = (e) => {\n        e.preventDefault();\n        let { shipment, driverAssigned } = this.state;\n        let { idleDrivers, shipments } = this.props;\n\n        let driver = {};\n        let equipment = {};\n\n        idleDrivers = idleDrivers.map((idleDriver) => {\n            if (idleDriver.id === driverAssigned) {\n                driver = {\n                    id: driverAssigned,\n                    full_name: idleDriver.full_name,\n                    pay_rate: idleDriver.pay_rate,\n                    status: idleDriver.status\n                }\n                equipment = {\n                    id: idleDriver.equipment.id,\n                    status: idleDriver.equipment.status,\n                    unit_num: idleDriver.equipment.unit_num\n                }\n            }\n            return idleDriver;\n        })\n        idleDrivers = idleDrivers.filter((idleDriver) => idleDriver.id !== driverAssigned);\n\n        shipments = shipments.map((propShipment) => {\n            if (propShipment.id === shipment.id) {\n                propShipment = {\n                    ...propShipment,\n                    driver,\n                    equipment,\n                    status: 'dispatched'\n                }\n            }\n            return propShipment\n        })\n\n        // update shipment in the database\n        ShipmentsService.updateShipment({id: shipment.id ,driver_id: driverAssigned, status: 'dispatched'})\n\n        this.setState({\n            shipment: {\n                ...this.state.shipment,\n                status: 'dispatched'\n            },\n            status: 'dispatched',\n            avaialableDrivers: idleDrivers,\n            driverAssigned: -1\n        })\n\n        this.context.setIdleDrivers(idleDrivers);\n        this.context.setShipments(shipments);\n\n    }\n\n    onDriverDropDownChange = (id) => {\n        this.setState({\n            driverAssigned: parseInt(id, 10)\n        })\n    }\n\n    handleShipmentDelete = (shipmentId) => {\n        \n        let {shipments, idleDrivers} = this.context\n\n        // if shipment has driver, send him to idle driver queue\n        const shipmentToDelete = shipments.filter((shipment) => shipment.id === shipmentId)[0];\n\n        let driver = {};\n        if(!objectIsEmpty(shipmentToDelete.driver)){\n            driver = {\n                ...shipmentToDelete.driver,\n                equipment: {\n                    ...shipmentToDelete.equipment,\n                }\n            }\n\n            idleDrivers = [\n                ...idleDrivers,\n                driver\n            ]            \n        }\n\n        shipments = shipments.filter((shipment) => shipment.id !== shipmentId);\n\n        // remove shipment from the database\n        ShipmentsService.deleteShipment(shipmentId);\n\n        this.context.setIdleDrivers(idleDrivers);\n        this.context.setShipments(shipments);\n        routeUserTo(this.props.rprops.history, '/');\n\n    }\n\n    // render the load status only when reuired and do it always\n    renderUpdateLoadStatusBox = (shipment) => {\n        return (\n            <form onSubmit={(e) => { this.handleChangeLoadStatus(e) }}>\n                <fieldset>\n                <legend><h6><label htmlFor='status'>Status</label></h6></legend>\n                {\n                    <select\n                        className='select-css'\n                        name='status'\n                        id='status'\n                        value={this.state.status}\n                        onChange={(e) => { this.setState({ status: e.target.value }) }}>\n                        {\n                            renderLoadStatusOptions(this.context.loadStatus)\n                        }\n                    </select>\n                }\n                {\n                    this.state.status !== shipment.status\n                    ?\n                    <button type='submit' className='app-button'>\n                        Change Status\n                    </button>\n                    :\n                    <button className='app-button' disabled>\n                        Change Status\n                    </button>\n                }\n            </fieldset>\n        </form>\n                \n        )\n    }\n\n    \n\n    render() {\n\n        const { shipment } = this.state\n        let driverPayout = 0;\n        if (!objectIsEmpty(shipment)) {\n            driverPayout = shipment.driver.pay_rate * shipment.miles;\n        }\n\n        return (\n            !objectIsEmpty(shipment) ?\n                <section className='LoadByIdPage width-wrapper'>\n                    <div className='load-header'>\n                        <button className='app-button' onClick={() => {handleGoBack(this.props.rprops.history)}}>\n                            Go Back\n                        </button>\n                        <Link className='app-button edit-button' to={`${config.BASEPATH}/load/edit/${shipment.id}`}>\n                            Edit\n                        </Link>\n                        <button className='app-button' onClick={() => {this.handleShipmentDelete(shipment.id)}}>\n                            Delete\n                        </button>\n                    </div>\n                    <div className='flex-row'>\n                        <div className='pick-up-info box-style'>\n                            <h3>Pick Up Info</h3>\n                            <div className='pickup info-wrapper'>\n                                <div className='pickup info date'>\n                                    <h6>Date</h6>\n                                    <p>{shipment.pickup_date}</p>\n                                </div>\n                                <div className='pickup info city'>\n                                    <h6>City, ST</h6>\n                                    <p>{shipment.pickup_warehouse.city}, {shipment.pickup_warehouse.state}</p>\n                                </div>\n                                <div className='pickup info state'>\n                                    <h6>Zipcode</h6>\n                                    <p>{shipment.pickup_warehouse.zipcode}</p>\n                                </div>\n                            </div>\n                        </div>\n                        <div className='delivery-info box-style'>\n                            <h3>Delivery Info</h3>\n                            <div className='delivery info-wrapper'>\n                                <div className='delivery info'>\n                                    <h6>Delivery Date</h6>\n                                    <p>{shipment.delivery_date}</p>\n                                </div>\n                                <div className='delivery info city'>\n                                    <h6>City, ST</h6>\n                                    <p>{shipment.delivery_warehouse.city}, {shipment.delivery_warehouse.state}</p>\n                                </div>\n                                <div className='delivery info state'>\n                                    <h6>Zipcode</h6>\n                                    <p>{shipment.delivery_warehouse.zipcode}</p>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    <div className='additional-info box-style'>\n                        <h3>Additional Info</h3>\n                        <div className='flex-row'>\n                            <div className='additional-info info-wrapper'>\n                                <div className='additional-info info'>\n                                    <h6>Miles</h6>\n                                    <p>{shipment.miles}</p>\n                                </div>\n                                <div className='additional-info info city'>\n                                    <h6>Rate</h6>\n                                    <p className='red-text'>{formatCurrency(shipment.rate)}</p>\n                                </div>\n                                <div className='additional-info info state'>\n                                    <h6>Broker</h6>\n                                    <p>{shipment.broker}</p>\n                                </div>\n                            </div>\n                            <div className='additional-info change-status'>\n                                <div className='additional-info info'>\n                                    {\n                                        (shipment.status !== 'un-assigned' && !this.state.completedShipment)\n                                        &&\n                                        this.renderUpdateLoadStatusBox(shipment)\n                                    }\n                                    {\n                                        shipment.status === 'un-assigned' &&\n                                        <div className='shipment-status'>\n                                            <h6>Status</h6>\n                                            <span>No Driver Assigned</span>\n                                        </div>\n                                    }\n                                    {\n                                        this.state.completedShipment &&\n                                        <div className='shipment-status'>\n                                            <h6>Status</h6>\n                                            <span>Shipment Delivered</span>\n                                        </div>\n                                    }\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    {\n                        shipment.status !== 'un-assigned'\n                            ?\n                            <div className='driver-info box-style'>\n                                <h3>Driver Info</h3>\n                                <div className='flex-row'>\n\n                                    <div className='additional-info info-wrapper'>\n                                        <div className='additional-info info'>\n                                            <h6>Driver</h6>\n                                            <p>{shipment.driver.full_name}</p>\n                                        </div>\n                                        <div className='additional-info info city'>\n                                            <h6>Pay per Mile</h6>\n                                            <p>{formatCurrency(shipment.driver.pay_rate)}</p>\n                                        </div>\n                                        <div className='additional-info info'>\n                                            <h6>Equipment #</h6>\n                                            <p>{shipment.equipment.unit_num}</p>\n                                        </div>\n                                    </div>\n                                    <div className='additional-info info-wrapper'>\n                                        <div className='additional-info info state'>\n                                            <h6>Drvier Payout</h6>\n                                            <p className='red-text'>{formatCurrency(driverPayout)}</p>\n                                        </div>\n                                        <div className='additional-info info'>\n                                            <h6>Load Balance Amount <br />\n                                                ( rate - driver payout )\n                                            </h6>\n                                            <p className='green-text'>{formatCurrency(shipment.rate - driverPayout)}</p>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                            :\n                            <div className='driver-info box-style'>\n                                <h3>Assign Driver</h3>\n                                <div className='assign-driver'>\n                                    <form className='assign-driver-form' onSubmit={(e) => { this.handleAssignDriver(e) }}>\n                                        <fieldset>\n                                            <div className='assign-driver-fields blue-text'>\n                                                <h6>Available Drivers</h6>\n                                                <DriversDropDown\n                                                    drivers={this.state.avaialableDrivers}\n                                                    defaultValue={this.state.driverAssigned}\n                                                    handleChange={(id) => { this.onDriverDropDownChange(id) }}\n                                                />\n                                                {\n                                                    this.state.driverAssigned === -1\n                                                        ?\n                                                        <button className='app-button' type='submit' disabled>Assign</button>\n                                                        :\n                                                        <button className='app-button' type='submit'>Assign</button>\n                                                }\n\n                                            </div>\n                                        </fieldset>\n                                    </form>\n                                </div>\n                            </div>\n                    }\n                </section>\n                :\n                <></>\n        );\n    }\n}\n\nexport default LoadByIdPage;","import React, { Component } from 'react';\nimport './AddDriverPage.css';\nimport {\n    handleGoBack,\n    routeUserTo,\n    renderEquipmentOptions,\n} from '../../HelperFunctions/HelperFunctions';\nimport AppContext from '../../Contexts/AppContext';\nimport config from '../../config';\nimport { isNotValidDriverName, isNotValidPay } from '../../HelperFunctions/InputFieldValidations';\nimport DriversService from '../../Services/DriversService';\n\nclass AddDriverPage extends Component {\n\n    static defaultProps = {\n        rprops: {},\n        equipments: [],\n    }\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            hasError: false,\n            availableEquipments: [],\n            error: {\n                driverNameError: 'Driver name is required',\n                driverName: false,\n                driverPayError: 'Driver pay cannot have characters in it',\n                driverPay: false,\n            },\n            full_name: '',\n            pay_rate: 0.0,\n            equipment_id: -1,\n        }\n    }\n\n    static contextType = AppContext\n\n    validateDriverName = (full_name) => {\n        const isNotValid = isNotValidDriverName(full_name)\n        this.setState({\n            full_name\n        })\n        if(isNotValid){\n            this.setState({\n                error: {\n                    ...this.state.error,\n                    driverName: true,\n                    driverNameError: isNotValid\n                }\n            })\n        }else{\n            this.setState({\n                error: {\n                    ...this.state.error,\n                    driverName: false,\n                    driverNameError: ''\n                }\n            })\n        }\n    }\n\n    validatePayRate = (pay_rate) => {\n        const isNotValid = isNotValidPay(pay_rate)\n        this.setState({\n            pay_rate\n        })\n        if(isNotValid){\n            this.setState({\n                error: {\n                    ...this.state.error,\n                    driverPay: true,\n                    driverPayError: isNotValid\n                }\n            })\n        }else{\n            this.setState({\n                error: {\n                    ...this.state.error,\n                    driverPay: false,\n                    driverPayError: ''\n                }\n            })\n        }\n    }\n\n    updateIdleDriverQueue = (driver) => {\n        let { idleDrivers } = this.context;\n        idleDrivers = [\n            ...idleDrivers,\n            driver\n        ]\n        this.context.setIdleDrivers(idleDrivers)\n    }\n\n    handleAddDriver = async (e) => {\n\n        e.preventDefault();\n        const full_name = e.target['full_name'].value;\n        const pay_rate = e.target['pay_rate'].value;\n        let equipment_id = parseInt(e.target['equipment_id'].value, 10);\n\n        let dbDriver = {\n            full_name,\n            pay_rate,\n            equipment_id: equipment_id !== -1 ? equipment_id : null\n        }\n\n        dbDriver = await DriversService.addDriver(dbDriver)\n\n        let {drivers, idleDrivers, equipments} = this.context\n\n        let driver = {\n            id: dbDriver.id,\n            full_name,\n            pay_rate,\n            status: 'active'\n        }\n        \n        let equipment = {}\n        if(equipment_id !== -1){\n\n            equipments = equipments.map((contextEquipment) => {\n                if(contextEquipment.id === equipment_id){\n                    contextEquipment.driver = driver\n                    equipment = {\n                        id: contextEquipment.id,\n                        unit_num: contextEquipment.unit_num,\n                        status: contextEquipment.status\n                    }\n                }\n                return contextEquipment\n            });\n        }\n\n        driver = {\n            ...driver,\n            equipment\n        }\n\n        // add new driver to all the drivers\n        drivers = [\n            ...drivers,\n            driver\n        ]\n\n        // adding new driver to the idle driver queue\n        idleDrivers = [\n            ...idleDrivers,\n            driver\n        ]\n\n        this.context.setDrivers(drivers);\n        this.context.setIdleDrivers(idleDrivers);\n        this.context.setEquipments(equipments);\n\n        routeUserTo(this.props.rprops.history, `${config.BASEPATH}/drivers`)\n    }\n\n    render() {\n\n        const { error } = this.state\n        const availableEquipments = this.props.equipments.filter((equipment) => !equipment.driver.hasOwnProperty('id') && equipment.status === 'active')\n\n        return (\n            <section className='AddDriverPage width-wrapper'>\n                <form className='add-load-form' onSubmit={(e) => { this.handleAddDriver(e) }}>\n                    <fieldset>\n                        <legend className='blue-back white-text'>\n                            <button type='button' className='app-button go-back' onClick={(e) => { handleGoBack(this.props.rprops.history) }}>\n                                Go Back\n                            </button>\n                            <span>Add Driver</span>\n                        </legend>\n                        <div className='flex'>\n                            <label htmlFor='full_name'>\n                                <span className='input-title'>* driver name</span>\n                                <input\n                                    type='text'\n                                    id='full_name'\n                                    name='full_name'\n                                    placeholder='Eg. John Doe'\n                                    value={this.state.full_name}\n                                    onChange={(e) => { this.validateDriverName(e.target.value) }}\n                                    required\n                                />\n                                {\n                                    error.driverName &&\n                                    <span className='error'>{error.driverNameError}</span>\n                                }\n                            </label>\n                            <label htmlFor='pay_rate'>\n                                <span className='input-title'>salary Per mile</span>\n                                <input\n                                    type='text'\n                                    id='pay_rate'\n                                    name='pay_rate'\n                                    min='0'\n                                    placeholder='Eg. 0.43'\n                                    value={this.state.pay_rate}\n                                    onChange={(e) => { this.validatePayRate(e.target.value) }}\n                                    onBlur={(e) => {\n                                        if(e.target.value.trim() === ''){\n                                            this.setState({\n                                                pay_rate: 0.0,\n                                                error: {\n                                                    ...this.state.error,\n                                                    driverPay: false,\n                                                    driverPayError: ''\n                                                }\n                                            })\n                                        }\n                                    }}\n                                />\n                                {\n                                    error.driverPay &&\n                                    <span className='error'>{error.driverPayError}</span>\n                                }\n                            </label>\n                            <label htmlFor='delivery-zipcode'>\n                                <span className='input-title'>Available Equipments</span>\n                                <select className='select-css' \n                                    name='equipment_id' \n                                    id='equipment_id'\n                                    value={this.state.equipment_id}\n                                    onChange={(e) => {this.setState({equipment_id: e.target.value})}}\n                                >\n                                    <option value='-1'>No Equipment</option>\n                                    {renderEquipmentOptions(availableEquipments)}\n                                </select>\n                                {\n                                    this.state.error.deliveryZipcode &&\n                                    <span className='error'>{this.state.error.zipcodeError}</span>\n                                }\n                            </label>\n                            {\n                                !(\n                                    error.driverName ||\n                                    error.driverPay\n                                )\n                                    ?\n                                    <button\n                                        className='app-button'\n                                        type='submit'\n                                    >\n                                        Add New Driver\n                                    </button>\n                                    :\n                                    <button\n                                        className='app-button'\n                                        type='submit'\n                                        disabled\n                                    >\n                                        Add New Driver\n                                    </button>\n                            }\n\n                        </div>\n                    </fieldset>\n                </form>\n            </section>\n        );\n    }\n}\n\nexport default AddDriverPage;","import React, { Component } from 'react';\nimport './AddEquipmentPage.css';\nimport {\n    handleGoBack,\n    routeUserTo,\n    renderDriverOptions,\n    objectIsEmpty,\n} from '../../HelperFunctions/HelperFunctions';\nimport AppContext from '../../Contexts/AppContext';\nimport config from '../../config';\nimport { emptySpaces } from '../../HelperFunctions/InputFieldValidations';\nimport EquipmentService from '../../Services/EquipmentsService';\nimport DriversService from '../../Services/DriversService';\n\nclass AddEquipmentPage extends Component {\n\n    static defaultProps = {\n        rprops: {},\n        drivers: [],\n    }\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            availableDrivers: [],\n            error: {\n                equipmentNumError: 'Equipment number is required',\n                equipmentNum: false,\n            },\n            unit_num: '',\n            driver_id: -1,\n        }\n    }\n\n    static contextType = AppContext\n\n    validateUnitNumField = (unit_num) => {\n        this.setState({\n            unit_num\n        })\n        if(emptySpaces(unit_num)){\n            this.setState({\n                hasError: true,\n                error: {\n                    equipmentNumError: 'Equipment number is required',\n                    equipmentNum: true,\n                }\n            })\n        }else{\n            this.setState({\n                hasError: false,\n                error: {\n                    equipmentNumError: '',\n                    equipmentNum: false,\n                }\n            })\n        }\n    }\n\n    updateIdleDriverQueue = (driver) => {\n        let { idleDrivers } = this.context;\n        idleDrivers = [\n            ...idleDrivers,\n            driver\n        ]\n        this.context.setIdleDrivers(idleDrivers)\n    }\n\n    handleAddEquipment = async (e) => {\n\n        e.preventDefault();\n\n        const unit_num = e.target['unit_num'].value;\n        const driver_id = parseInt(e.target['driver_id'].value,10);\n\n        // Add Equipment to the db\n        const dbEquipment = await EquipmentService.addNewEquipment(unit_num);        \n\n        let equipment = {\n            unit_num: dbEquipment.unit_num,\n            id: dbEquipment.id,\n            status: 'active'\n        }\n\n        let driver = {}\n        let {equipments, drivers, idleDrivers} = this.context\n\n        if(driver_id !== -1){\n\n            // update driver to reference equipment in the db\n            DriversService.updateEquipment(driver_id, equipment.id);\n\n            drivers = drivers.map((contextDriver) => {\n                if(contextDriver.id === driver_id){\n                    contextDriver.equipment = equipment\n                    driver = {\n                        id: contextDriver.id,\n                        full_name: contextDriver.full_name,\n                        pay_rate: contextDriver.pay_rate,\n                        status: 'active',\n                    }\n                }\n                return contextDriver;\n            })\n            \n            idleDrivers = idleDrivers.map((idleDriver) => {\n                if(idleDriver.id === driver_id){\n                    idleDriver.equipment = equipment\n                }\n                return idleDriver;\n            })\n        } else {\n            driver = {\n                full_name: '',\n                pay_rate: ''\n            }\n        }\n\n        // adding driver to the equipment \n        equipment = {\n            ...equipment,\n            driver,\n        }\n\n        // adding new equipment to all equipments array\n        equipments = [\n            ...equipments,\n            equipment\n        ]\n        \n        this.context.setDrivers(drivers);\n        this.context.setIdleDrivers(idleDrivers);\n        this.context.setEquipments(equipments);\n        routeUserTo(this.props.rprops.history, `${config.BASEPATH}/equipments`)\n    }\n\n    render() {\n\n        const { error } = this.state\n        const availableDrivers = this.props.drivers.filter((driver) => objectIsEmpty(driver.equipment) && driver.status === 'active')\n\n        return (\n            <section className='AddEquipmentPage width-wrapper'>\n                <form className='add-load-form' onSubmit={(e) => { this.handleAddEquipment(e) }}>\n                    <fieldset>\n                        <legend className='blue-back white-text'>\n                            <button type='button' className='app-button go-back' onClick={(e) => { handleGoBack(this.props.rprops.history) }}>\n                                Go Back\n                            </button>\n                            <span>Add Equipment</span>\n                        </legend>\n                        <div className='flex'>\n                            <label htmlFor='unit_num'>\n                                <span className='input-title'>* Equipment Number</span>\n                                <input\n                                    type='text'\n                                    id='unit_num'\n                                    name='unit_num'\n                                    placeholder='Eg. A 101'\n                                    value={this.state.unit_num}\n                                    onChange={(e) => { this.validateUnitNumField(e.target.value) }}\n                                    required\n                                />\n                                {\n                                    error.equipmentNum &&\n                                    <span className='error'>{error.equipmentNumError}</span>\n                                }\n                            </label>\n                            <label htmlFor='driver_id'>\n                                <span className='input-title'>Available Drivers</span>\n                                <select className='select-css' \n                                    name='driver_id' \n                                    id='driver_id'\n                                    value={this.state.driver_id}\n                                    onChange={(e) => {this.setState({driver_id: e.target.value})}}\n                                >\n                                    <option value='-1'>No Driver</option>\n                                    {renderDriverOptions(availableDrivers)}\n                                </select>\n                                \n                            </label>\n                            {\n                                !error.equipmentNum\n                                    ?\n                                    <button\n                                        className='app-button'\n                                        type='submit'\n                                    >\n                                        Add New Equipment\n                                    </button>\n                                    :\n                                    <button\n                                        className='app-button'\n                                        type='submit'\n                                        disabled\n                                    >\n                                        Add New Equipment\n                                    </button>\n                            }\n\n                        </div>\n                    </fieldset>\n                </form>\n            </section>\n        );\n    }\n}\n\nexport default AddEquipmentPage;","import React, { Component } from 'react';\nimport './DriverEditPage.css';\nimport AppContext from '../../Contexts/AppContext';\nimport {\n    handleGoBack,\n    objectIsEmpty,\n    renderEquipmentOptions,\n    routeUserTo,\n} from '../../HelperFunctions/HelperFunctions';\nimport { isNotValidDriverName, isNotValidPay } from '../../HelperFunctions/InputFieldValidations';\nimport config from '../../config';\nimport DriversSerivce from '../../Services/DriversService';\n\nclass DriverEditPage extends Component {\n\n    static defaultProps = {\n        equipments: {},\n        idleDrivers: {},\n        rprops: {},\n    }\n\n    constructor(props) {\n        super(props);\n\n        // setting state so that edit equipment page\n        // already has values in it for the selected equipment to edit\n        // if not done this way , then another Get request had to be made for\n        // getting equipment by id \n        let full_name = '';\n        let pay_rate= '';\n        let equipment_id = -1;\n        const driver_id = parseInt(this.props.rprops.match.params.id, 10)\n        let driver = this.props.drivers.filter((driver) => driver.id === driver_id)[0] || {};\n        \n        if(!objectIsEmpty(driver)){\n            full_name = driver.full_name;\n            pay_rate = driver.pay_rate;\n            equipment_id = !objectIsEmpty(driver.equipment) ? driver.equipment.id : -1;\n        }\n\n        let availableEquipments = [];\n        availableEquipments = this.props.equipments.filter((equipment) => !equipment.driver.hasOwnProperty('id') && equipment.status === 'active')\n        if(equipment_id !== -1){\n            const currentEquipment = this.props.equipments.filter((propsEquipment) => propsEquipment.id === equipment_id)[0]\n            availableEquipments = [\n                currentEquipment,\n                ...availableEquipments\n            ]\n            // console.log(currentEquipment);\n        }\n\n        this.state = {\n            error: {\n                driverNameError: '',\n                driverName: false,\n                driverPayError: '',\n                driverPay: false,\n            },\n            availableEquipments,\n            driver,\n            full_name,\n            pay_rate,\n            equipment_id,\n        }\n    }\n\n    static contextType = AppContext\n\n    validateDriverName = (full_name) => {\n        const isNotValid = isNotValidDriverName(full_name)\n        this.setState({\n            full_name\n        })\n        if(isNotValid){\n            this.setState({\n                error: {\n                    ...this.state.error,\n                    driverName: true,\n                    driverNameError: isNotValid\n                }\n            })\n        }else{\n            this.setState({\n                error: {\n                    ...this.state.error,\n                    driverName: false,\n                    driverNameError: ''\n                }\n            })\n        }\n    }\n\n    validatePayRate = (pay_rate) => {\n        const isNotValid = isNotValidPay(pay_rate)\n        this.setState({\n            pay_rate\n        })\n        if(isNotValid){\n            this.setState({\n                error: {\n                    ...this.state.error,\n                    driverPay: true,\n                    driverPayError: isNotValid\n                }\n            })\n        }else{\n            this.setState({\n                error: {\n                    ...this.state.error,\n                    driverPay: false,\n                    driverPayError: ''\n                }\n            })\n        }\n    }\n\n    changeEquipment = (drivers, driverToChange, equipment) => {\n        const driversArray = drivers.map((driver) => {\n            if(driver.id === driverToChange.id){\n                driver.equipment = equipment\n            }\n            return driver\n        }) \n        return driversArray;\n    }\n\n    makeDriverChanges = (drivers, driverToChange, changes) => {\n        const driversArray = drivers.map((driver) => {\n            if(driver.id === driverToChange.id){\n                driver = {\n                    ...driver,\n                    full_name: changes.full_name,\n                    pay_rate: changes.pay_rate\n                }\n            }\n            return driver;\n        })\n        return driversArray;\n    }\n\n    handleEditDriver = (e, changeDriver) => {\n\n        e.preventDefault();\n\n        const full_name = e.target['full_name'].value\n        const pay_rate = e.target['pay_rate'].value\n        const newEquipmentId = parseInt(e.target['equipment_id'].value)\n        const oldEquipmentId = !objectIsEmpty(changeDriver.equipment) ? changeDriver.equipment.id : -1;\n\n        let {drivers, idleDrivers, equipments} = this.context\n        let newEquipment= {};\n\n        if(newEquipmentId !== oldEquipmentId){\n\n            newEquipment = newEquipmentId !== -1 ? equipments.filter((equipment) => equipment.id === newEquipmentId)[0] : {};\n            newEquipment = !objectIsEmpty(newEquipment) \n                ?\n                {\n                    id: newEquipment.id,\n                    unit_num: newEquipment.unit_num,\n                    status: 'active'\n                } \n                : {}\n\n            drivers = this.changeEquipment(drivers, changeDriver, newEquipment)\n            idleDrivers = this.changeEquipment(idleDrivers, changeDriver, newEquipment)\n\n            // remove driver from old equipment if id not -1\n            if(oldEquipmentId !== -1){\n                equipments = equipments.map((equipment) => {\n                    if(equipment.id === oldEquipmentId){\n                        equipment.driver = {}\n                    }\n                    return equipment\n                })\n            }\n\n            equipments = equipments.map((equipment) => {\n                if(equipment.id === newEquipmentId){\n                    equipment.driver = {\n                        id: changeDriver.id,\n                        full_name,\n                        pay_rate,\n                        status: 'active'\n                    }\n                }\n                return equipment\n            })\n\n        }\n        \n        const changes = {\n            full_name,\n            pay_rate\n        }\n        // make changes to the changed driver in all drivers array\n        drivers = this.makeDriverChanges(drivers, changeDriver, changes)\n        idleDrivers = this.makeDriverChanges(idleDrivers, changeDriver, changes)\n\n        const updateDriverInDB = {\n            id: changeDriver.id,\n            full_name,\n            pay_rate,\n            equipment_id: newEquipmentId === -1 ? null : newEquipmentId\n        }\n\n        DriversSerivce.updateDriver(updateDriverInDB);\n\n        this.context.setDrivers(drivers);\n        this.context.setEquipments(equipments);\n        this.context.setIdleDrivers(idleDrivers);\n\n        routeUserTo(this.props.rprops.history, `${config.BASEPATH}/drivers`);\n    }\n\n    render() {\n\n        \n        const {full_name, pay_rate, equipment_id, driver, availableEquipments, error} = this.state;\n        \n\n        return (\n            <section className='DriverEditPage width-wrapper'>\n\n                <form className='edit-equip' onSubmit={(e) => { this.handleEditDriver(e, driver) }}>\n                    <fieldset>\n                        <legend className='blue-back white-text'>\n                            <button type='button' className='app-button go-back' onClick={(e) => { handleGoBack(this.props.rprops.history) }}>\n                                Go Back\n                            </button>\n                            <span>Edit Driver</span>\n                        </legend>\n                        <div className='flex'>\n                            <label htmlFor='full_name'>\n                                <span className='input-title'>Name</span>\n                                <input\n                                    type='text'\n                                    id='full_name'\n                                    name='full_name'\n                                    required\n                                    value={full_name}\n                                    onChange={(e) => { this.validateDriverName(e.target.value)}}\n                                />\n                                {\n                                    error.driverName &&\n                                    <span className='error'>{error.driverNameError}</span>\n                                }\n                            </label>\n                            <label htmlFor='pay_rate'>\n                                <span className='input-title'>Pay Rate</span>\n                                <input\n                                    type='text'\n                                    id='pay_rate'\n                                    name='pay_rate'\n                                    required\n                                    value={pay_rate}\n                                    onChange={(e) => { this.validatePayRate(e.target.value) }}\n                                    onBlur={(e) => {\n                                        if(e.target.value.trim() === ''){\n                                            this.setState({\n                                                pay_rate: 0.0,\n                                                error: {\n                                                    ...this.state.error,\n                                                    driverPay: false,\n                                                    driverPayError: ''\n                                                }\n                                            })\n                                        }\n                                    }}\n                                />\n                                {\n                                    error.driverPay &&\n                                    <span className='error'>{error.driverPayError}</span>\n                                }\n                            </label>\n                            <label htmlFor='driver'>\n                                <span className='input-title'>Available Equipment</span>\n                                <select \n                                    className='select-css' \n                                    value={equipment_id}\n                                    name='equipmen_id'\n                                    id='equipment_id'\n                                    onChange={(e) => {this.setState({equipment_id: e.target.value})}}>\n                                        <option value='-1'>No Equipment</option>\n                                        {renderEquipmentOptions(availableEquipments)}\n                                </select>\n                            </label>\n                            {\n                                error.driverPay ||\n                                error.driverName\n                                    ?\n                                    <button\n                                        className='app-button'\n                                        type='submit'\n                                        disabled\n                                    >\n                                        Save Changes\n                                    </button>\n                                    :\n                                    <button\n                                        className='app-button'\n                                        type='submit'\n                                    >\n                                        Save Changes\n                                    </button>\n                            }\n                        </div>\n                    </fieldset>\n                </form>\n            </section>\n        );\n    }\n}\n\nexport default DriverEditPage;","import React, { Component } from 'react';\nimport './EditLoadPage.css';\nimport {\n    handleGoBack,\n    routeUserTo,\n    formatDate,\n    arrayIsEmpty,\n} from '../../HelperFunctions/HelperFunctions';\nimport {\n    notValidDate,\n    emptySpaces,\n} from '../../HelperFunctions/InputFieldValidations';\nimport AppContext from '../../Contexts/AppContext';\nimport config from '../../config';\nimport ShipmentsSerivce from '../../Services/ShipmentsService';\n\nclass EditLoadPage extends Component {\n\n    constructor(props) {\n        super(props);\n\n        const id = parseInt(props.rprops.match.params.id, 10);\n        const {shipments} = this.props;\n        let shipment = {};\n        let pickup_warehouse = {};\n        let delivery_warehouse = {};\n        let driver = {};\n        if(!arrayIsEmpty(shipments)){\n            shipment = props.shipments.filter((shipment) => shipment.id === id)[0];\n            pickup_warehouse = shipment.pickup_warehouse;\n            delivery_warehouse = shipment.delivery_warehouse;\n            driver = shipment.driver\n        }\n\n\n\n        this.state = {\n            shipmentId: id,\n            availableDrivers: [],\n            error: {\n                dateError: 'Enter Date in correct format \"MM/DD/YYYY\"',\n                pickupDate: false,\n                deliveryDate: false,\n                cityError: 'City is required',\n                pickupCity: false,\n                deliveryCity: false,\n                stateError: 'State is required and must be two characters, Eg. New York will be NY',\n                pickupState: false,\n                deliveryState: false,\n                zipcodeError: 'Zipcode is required',\n                pickupZipcode: false,\n                deliveryZipcode: false,\n            },\n            pickupDate: formatDate(shipment.pickup_date),\n            deliveryDate: formatDate(shipment.delivery_date),\n            pickupCity: pickup_warehouse.city,\n            deliveryCity: delivery_warehouse.city,\n            pickupState: pickup_warehouse.state,\n            deliveryState: delivery_warehouse.state,\n            pickupZipcode: pickup_warehouse.zipcode,\n            deliveryZipcode: delivery_warehouse.zipcode,\n            miles: shipment.miles,\n            rate: shipment.rate,\n            broker: shipment.broker || '',\n            driverId: driver.id\n        }\n    }\n\n    static contextType = AppContext\n\n    // validation of date, Validates both pickup date and delivery date\n    // *** THIS FUNCTION IS DEPENDENT ON THE NAME PROPERTY OF THE INPUT BOXES ***\n    validateInputDate = (e) => {\n        const date = e.target.value;\n        const { name } = e.target;\n\n        name === 'pickup-date'\n            ? this.setState({ pickupDate: date })\n            : this.setState({ deliveryDate: date });\n\n        if (notValidDate(date)) {\n            name === 'pickup-date'\n                ? this.setState({\n                    error: {\n                        ...this.state.error,\n                        pickupDate: true,\n                    }\n                })\n                : this.setState({\n                    error: {\n                        ...this.state.error,\n                        deliveryDate: true,\n                    }\n                });\n        } else {\n            \n            name === 'pickup-date'\n                ? this.setState({\n                    error: {\n                        ...this.state.error,\n                        pickupDate: false,\n                    }\n                })\n                : this.setState({\n                    error: {\n                        ...this.state.error,\n                        deliveryDate: false,\n                    }\n                });\n        }\n    }\n\n    validateCityInput = (e) => {\n        const city = e.target.value;\n        const { name } = e.target;\n\n        name === 'pickup-city'\n            ? this.setState({ pickupCity: city })\n            : this.setState({ deliveryCity: city });\n\n\n        if (emptySpaces(city)) {\n            name === 'pickup-city'\n                ? this.setState({\n                    error: {\n                        ...this.state.error,\n                        pickupCity: true,\n                    }\n                })\n                : this.setState({\n                    error: {\n                        ...this.state.error,\n                        deliveryCity: true,\n                    }\n                });\n        } else {\n            name === 'pickup-city'\n                ? this.setState({\n                    error: {\n                        ...this.state.error,\n                        pickupCity: false,\n                    }\n                })\n                : this.setState({\n                    error: {\n                        ...this.state.error,\n                        deliveryCity: false,\n                    }\n                });\n        }\n    }\n\n    validateStateInput = (e) => {\n        const stateCode = e.target.value;\n        const { name } = e.target;\n\n        name === 'pickup-state'\n            ? this.setState({ pickupState: stateCode })\n            : this.setState({ deliveryState: stateCode });\n\n\n        if (emptySpaces(stateCode) || stateCode.trim().length !== 2) {\n            name === 'pickup-state'\n                ? this.setState({\n                    error: {\n                        ...this.state.error,\n                        pickupState: true,\n                    }\n                })\n                : this.setState({\n                    error: {\n                        ...this.state.error,\n                        deliveryState: true,\n                    }\n                });\n        } else {\n            name === 'pickup-state'\n                ? this.setState({\n                    error: {\n                        ...this.state.error,\n                        pickupState: false,\n                    }\n                })\n                : this.setState({\n                    error: {\n                        ...this.state.error,\n                        deliveryState: false,\n                    }\n                });\n        }\n    }\n\n    validateZipcodeInput = (e) => {\n        const zipcode = e.target.value;\n        const { name } = e.target;\n\n        name === 'pickup-zipcode'\n            ? this.setState({ pickupZipcode: zipcode })\n            : this.setState({ deliveryZipcode: zipcode });\n\n\n        if (emptySpaces(zipcode)) {\n            name === 'pickup-zipcode'\n                ? this.setState({\n                    error: {\n                        ...this.state.error,\n                        pickupZipcode: true,\n                    }\n                })\n                : this.setState({\n                    error: {\n                        ...this.state.error,\n                        deliveryZipcode: true,\n                    }\n                });\n        } else {\n            name === 'pickup-zipcode'\n                ? this.setState({\n                    error: {\n                        ...this.state.error,\n                        pickupZipcode: false,\n                    }\n                })\n                : this.setState({\n                    error: {\n                        ...this.state.error,\n                        deliveryZipcode: false,\n                    }\n                });\n        }\n    }\n\n    handleEditLoad = (e) => {\n\n        e.preventDefault();\n\n        const { shipmentId } = this.state;\n        const broker = e.target['broker'].value.trim() || '';\n        const delivery_warehouse = {\n            city: e.target['delivery-city'].value.trim(),\n            state: e.target['delivery-state'].value,\n            zipcode: e.target['delivery-zipcode'].value.trim()\n        };\n        const pickup_warehouse = {\n            city: e.target['pickup-city'].value.trim(),\n            state: e.target['pickup-state'].value,\n            zipcode: e.target['pickup-zipcode'].value.trim()\n        };\n        const miles = e.target['miles'].value.trim() || '0';\n        const rate = e.target['rate'].value.trim() || '0'\n        const pickup_date = e.target['pickup-date'].value;\n        const delivery_date = e.target['delivery-date'].value;\n\n        const newShipmentFields = {\n            pickup_date,\n            pickup_warehouse,\n            delivery_date,\n            delivery_warehouse,\n            miles,\n            rate,\n            broker\n        }\n\n        const updateShipmentInDB = {\n            id: shipmentId,\n            pickup_date,\n            delivery_date,\n            rate,\n            miles,\n            broker,\n            pickup_city: pickup_warehouse.city,\n            pickup_state: pickup_warehouse.state,\n            pickup_zipcode: pickup_warehouse.zipcode,\n            delivery_city: delivery_warehouse.city,\n            delivery_state: delivery_warehouse.state,\n            delivery_zipcode: delivery_warehouse.zipcode\n        }\n\n        // update the fields in the database.\n        ShipmentsSerivce.updateShipment(updateShipmentInDB)\n\n        let {shipments} = this.context\n        shipments = shipments.map((shipment) => {\n            if(shipment.id === shipmentId){\n                shipment = {\n                    ...shipment,\n                    ...newShipmentFields,\n                }\n            }\n            return shipment;\n        })\n\n        this.context.setShipments(shipments);\n        routeUserTo(this.props.rprops.history, `${config.BASEPATH}/load/${shipmentId}`)\n\n    }\n\n    render() {        \n        const { error } = this.state\n\n        return (\n            <section className='EditLoadPage width-wrapper'>\n                <form className='add-load-form' onSubmit={(e) => { this.handleEditLoad(e) }}>\n                    <fieldset>\n                        <legend className='blue-back white-text'>\n                            <button type='button' className='app-button go-back' onClick={(e) => { handleGoBack(this.props.rprops.history) }}>\n                                Go Back\n                            </button>\n                            <span>Edit Equipment</span>\n                        </legend>\n                        <div className='flex'>\n                            <h4 className='fieldset-sub-title blue-text'>\n                                Pick Up Info\n                            </h4>\n                            <label htmlFor='pickup-date'>\n                                <span className='input-title'>* Date</span>\n                                <input\n                                    type='text'\n                                    id='pickup-date'\n                                    name='pickup-date'\n                                    maxLength='10'\n                                    value={this.state.pickupDate}\n                                    onChange={(e) => { this.validateInputDate(e) }}\n                                    onBlur={(e) => {\n                                        if (e.target.value === '') {\n                                            this.setState({\n                                                pickupDate: formatDate(new Date()),\n                                                error: {\n                                                    ...this.state.error,\n                                                    pickupDate: false\n                                                }\n                                            })\n                                        }\n                                    }}\n                                />\n                                {\n                                    error.pickupDate &&\n                                    <span className='error'>{error.dateError}</span>\n                                }\n                            </label>\n                            <label htmlFor='pickup-city'>\n                                <span className='input-title'>* City</span>\n                                <input\n                                    type='text'\n                                    id='pickup-city'\n                                    name='pickup-city'\n                                    placeholder='Eg. Dallas'\n                                    required\n                                    value={this.state.pickupCity}\n                                    onChange={(e) => { this.validateCityInput(e) }}\n                                />\n                                {\n                                    error.pickupCity &&\n                                    <span className='error'>{error.cityError}</span>\n                                }\n                            </label>\n                            <label htmlFor='pickup-state'>\n                                <span className='input-title'>* State</span>\n                                <input\n                                    type='text'\n                                    placeholder='Eg. TX'\n                                    maxLength='2'\n                                    id='pickup-state'\n                                    name='pickup-state'\n                                    required\n                                    value={this.state.pickupState}\n                                    onChange={(e) => { this.validateStateInput(e) }}\n                                />\n                                {\n                                    this.state.error.pickupState &&\n                                    <span className='error'>{this.state.error.stateError}</span>\n                                }\n                            </label>\n                            <label htmlFor='pickup-zipcode'>\n                                <span className='input-title'>* Zipcode</span>\n                                <input\n                                    type='text'\n                                    id='pickup-zipcode'\n                                    maxLength='10'\n                                    name='pickup-zipcode'\n                                    placeholder='Eg. 75001'\n                                    required\n                                    value={this.state.pickupZipcode}\n                                    onChange={(e) => { this.validateZipcodeInput(e) }}\n                                />\n                                {\n                                    this.state.error.pickupZipcode &&\n                                    <span className='error'>{this.state.error.zipcodeError}</span>\n                                }\n                            </label>\n                            <h4 className='fieldset-sub-title blue-text'>\n                                Delivery Info\n                            </h4>\n                            <label htmlFor='delivery-date'>\n                                <span className='input-title'>* Date</span>\n                                <input\n                                    type='text'\n                                    id='delivery-date'\n                                    name='delivery-date'\n                                    maxLength='10'\n                                    value={this.state.deliveryDate}\n                                    onChange={(e) => { this.validateInputDate(e) }}\n                                    onBlur={(e) => {\n                                        if (e.target.value === '') {\n                                            this.setState({\n                                                deliveryDate: formatDate(new Date()),\n                                                error: {\n                                                    ...this.state.error,\n                                                    deliveryDate: false\n                                                }\n                                            })\n                                        }\n                                    }}\n                                />\n                                {\n                                    this.state.error.deliveryDate &&\n                                    <span className='error'>{this.state.error.dateError}</span>\n                                }\n                            </label>\n                            <label htmlFor='delivery-city'>\n                                <span className='input-title'>* City</span>\n                                <input\n                                    type='text'\n                                    id='delivery-city'\n                                    name='delivery-city'\n                                    placeholder='Eg. Indianapolis'\n                                    required\n                                    value={this.state.deliveryCity}\n                                    onChange={(e) => { this.validateCityInput(e) }}\n                                />\n                                {\n                                    this.state.error.deliveryCity &&\n                                    <span className='error'>{this.state.error.cityError}</span>\n                                }\n                            </label>\n                            <label htmlFor='delivery-state'>\n                                <span className='input-title'>* State</span>\n                                <input\n                                    type='text'\n                                    placeholder='Eg. IN'\n                                    maxLength='2'\n                                    id='delivery-state'\n                                    name='delivery-state'\n                                    required\n                                    value={this.state.deliveryState}\n                                    onChange={(e) => { this.validateStateInput(e) }}\n                                />\n                                {\n                                    this.state.error.deliveryState &&\n                                    <span className='error'>{this.state.error.stateError}</span>\n                                }\n                            </label>\n                            <label htmlFor='delivery-zipcode'>\n                                <span className='input-title'>* Zipcode</span>\n                                <input\n                                    type='text'\n                                    id='delivery-zipcode'\n                                    name='delivery-zipcode'\n                                    maxLength='10'\n                                    placeholder='Eg. 46225'\n                                    required\n                                    value={this.state.deliveryZipcode}\n                                    onChange={(e) => { this.validateZipcodeInput(e) }}\n                                />\n                                {\n                                    this.state.error.deliveryZipcode &&\n                                    <span className='error'>{this.state.error.zipcodeError}</span>\n                                }\n                            </label>\n                            <h4 className='fieldset-sub-title blue-text'>\n                                Additional Info\n                            </h4>\n                            <label htmlFor='miles'>\n                                <span className='input-title'>Miles</span>\n                                <input\n                                    type='number'\n                                    min='0'\n                                    id='miles'\n                                    name='miles'\n                                    value={this.state.miles}\n                                    onChange={(e) => {this.setState({miles: e.target.value})}}\n                                />\n                                {\n                                    // this.state.unitNumError &&\n                                    // <span className='error'>{this.state.error}</span>\n                                }\n                            </label>\n                            <label htmlFor='rate'>\n                                <span className='input-title'>Rate</span>\n                                <input\n                                    type='number'\n                                    min='0'\n                                    id='rate'\n                                    name='rate'\n                                    value={this.state.rate}\n                                    onChange={(e) => {this.setState({rate: e.target.value})}}\n                                />\n                                {\n                                    // this.state.unitNumError &&\n                                    // <span className='error'>{this.state.error}</span>\n                                }\n                            </label>\n                            <label htmlFor='broker'>\n                                <span className='input-title'>Broker</span>\n                                <input\n                                    type='text'\n                                    id='broker'\n                                    name='broker'\n                                    value={this.state.broker}\n                                    onChange={(e) => {this.setState({broker: e.target.value})}}\n                                />\n                            </label>\n                            {\n                                !(\n                                    error.pickupCity ||\n                                    error.deliveryCity ||\n                                    error.pickupDate ||\n                                    error.deliveryDate ||\n                                    error.pickupState ||\n                                    error.deliveryState ||\n                                    error.pickupZipcode ||\n                                    error.deliveryZipcode\n                                )\n                                    ?\n                                    <button\n                                        className='app-button'\n                                        type='submit'\n                                    >\n                                        Edit Load\n                                    </button>\n                                    :\n                                    <button\n                                        className='app-button'\n                                        type='submit'\n                                        disabled\n                                    >\n                                        Edit Load\n                                    </button>\n                            }\n\n                        </div>\n                    </fieldset>\n                </form>\n            </section>\n        );\n    }\n}\n\nexport default EditLoadPage;","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { Switch, Route, Redirect } from \"react-router-dom\";\nimport Header from \"../Header/Header\";\nimport HomePage from \"../../Routes/HomePage/HomePage\";\nimport AppContext from \"../../Contexts/AppContext\";\nimport CreateAccountPage from \"../../Routes/CreateAccountPage/CreateAccountPage\";\nimport LoginPage from \"../../Routes/LoginPage/LoginPage\";\nimport TokenService from \"../../Services/TokenService\";\nimport DashboardPage from \"../../Routes/DashboardPage/DashboardPage\";\nimport Logout from \"../Logout/Logout\";\nimport CarrierService from \"../../Services/CarrierServices\";\nimport DriversService from \"../../Services/DriversService\";\nimport EquipmentService from \"../../Services/EquipmentsService\";\nimport LoadsPage from \"../../Routes/LoadsPage/LoadsPage\";\nimport EquipmentsPage from \"../../Routes/EquipmentsPage/EquipmentsPage\";\nimport DriversPage from \"../../Routes/DriversPage/DriversPage\";\nimport EquipmentEditPage from \"../../Routes/EquipmentEditPaage/EquipmentEditPage\";\nimport AddLoadPage from \"../../Routes/AddLoadPage/AddLoadPage\";\nimport { objectIsEmpty } from '../../HelperFunctions/HelperFunctions';\nimport LoadByIdPage from \"../../Routes/LoadByIdPage/LoadByIdPage\";\nimport AddDriverPage from \"../../Routes/AddDriverPage/AddDriverPage\";\nimport AddEquipmentPage from \"../../Routes/AddEquipmentPage/AddEquipmentPage\";\nimport DriverEditPage from \"../../Routes/DriverEditPage/DriverEditPage\";\nimport EditLoadPage from \"../../Routes/EditLoadPage/EditLoadPage\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      basePath: \"/dispatch-office-client\",\n      loggedIn: false,\n      newUser: false,\n      shipments: [],\n      drivers: [],\n      idleDrivers: [],\n      idleEquipments: [],\n      equipments: [],\n      loggedInCarrier: {\n        full_name: \"\",\n        company_name: \"\",\n        mc_num: \"\"\n      }\n    };\n  }\n\n  // gets all the shipments\n  getShipments = async () => {\n    return CarrierService.getCarrierData()\n      .then(data => data)\n      .catch(err => console.log(err));\n  };\n\n  getDrivers = async () => {\n    return DriversService.getDriversData()\n      .then(data => data)\n      .catch(err => console.log(err))\n  }\n\n  // gets all idleDrivers for dashboard\n  getIdleDrivers = async () => {\n    return DriversService.getIdleDrivers()\n      .then(data => {\n        data.map((driver) => {\n          if (!objectIsEmpty(driver.equipment)) {\n            this.setState({\n              idleEquipments: [\n                ...this.state.idleEquipments,\n                driver.equipment\n              ]\n            })\n          }\n          return driver\n        })\n        return data\n      })\n      .catch(err => console.log(err));\n  };\n\n  getEquipments = async () => {\n    return EquipmentService.getEquipments()\n      .then(data => data)\n      .catch(err => console.log(err));\n  }\n\n  // only one function used in context now to be used in login page\n  getAllData = async () => {\n    if (TokenService.hasAuthToken()) {\n      await Promise.all([\n        this.getShipments(),\n        this.getDrivers(),\n        this.getEquipments(),\n        this.getIdleDrivers()\n      ])\n        .then(([\n          shipments,\n          drivers,\n          equipments,\n          idleDrivers\n        ]) => {\n          this.setState({\n            shipments,\n            drivers,\n            equipments,\n            idleDrivers\n          })\n        })\n        .catch((err) => console.log(err));\n    }\n  }\n\n  componentDidMount = () => {\n    this.setState({\n      loggedIn: TokenService.hasAuthToken()\n    });\n    this.getAllData();\n  };\n\n  setLoggedIn = loggedIn => {\n    this.setState({\n      loggedIn\n    });\n  };\n\n  setLoggedInCarrier = loggedInCarrier => {\n    this.setState({\n      loggedInCarrier\n    });\n  };\n\n  setShipments = shipments => {\n    this.setState({\n      shipments\n    });\n  };\n\n  setEquipments = equipments => {\n    this.setState({\n      equipments\n    })\n  }\n\n  setDrivers = drivers => {\n    this.setState({\n      drivers\n    })\n  }\n\n  setIdleDrivers = idleDrivers => {\n    const idleEquipments = [];\n    this.setState({\n      idleEquipments\n    })\n    idleDrivers.map(driver => {\n      if (!objectIsEmpty(driver.equipment)) {\n        idleEquipments.push(driver.equipment)\n        this.setState({\n          idleEquipments\n        })\n      }\n      return driver\n    })\n    this.setState({\n      idleDrivers\n    })\n  }\n\n  setNewUser = newUser => {\n    this.setState({\n      newUser\n    });\n  };\n\n  render() {\n    const value = {\n      basePath: this.state.basePath,\n      loggedIn: this.state.loggedIn,\n      newUser: this.state.newUser,\n      setLoggedIn: this.setLoggedIn,\n      setNewUser: this.setNewUser,\n      setShipments: this.setShipments,\n      setEquipments: this.setEquipments,\n      setIdleDrivers: this.setIdleDrivers,\n      setDrivers: this.setDrivers,\n      setLoggedInCarrier: this.setLoggedInCarrier,\n      loggedInCarrier: this.state.loggedInCarrier,\n      shipments: this.state.shipments,\n      idleDrivers: this.state.idleDrivers,\n      equipments: this.state.equipments,\n      drivers: this.state.drivers,\n      idleEquipments: this.state.idleEquipments,\n      getAllData: this.getAllData,\n      loadStatus: [\n        'un-assigned',\n        'dispatched',\n        'loading',\n        'in transit',\n        'unloading',\n        'completed'\n      ]\n    };\n\n    return (\n      <AppContext.Provider value={value}>\n        <div className=\"App\">\n          <Header />\n          {this.state.loggedIn && <Route path=\"/\" component={Logout} />}\n          <Switch>\n            {/* Begin the app with the /app endpoint */}\n\n            <Route exact path=\"/\">\n              <Redirect to={value.basePath} />\n            </Route>\n\n            <Route exact path={value.basePath} component={HomePage} />\n\n            <Route\n              exact\n              path={`${value.basePath}/create-account`}\n              component={CreateAccountPage}\n            />\n\n            <Route\n              exact\n              path={`${value.basePath}/login`}\n              component={LoginPage}\n            />\n\n            <Route\n              exact\n              path={`${value.basePath}/dashboard`}\n              component={DashboardPage}\n            />\n\n            <Route\n              exact\n              path={`${value.basePath}/loads`}\n              component={(rprops) => {\n                return <LoadsPage \n                  rprops={rprops}\n                  shipments={this.state.shipments}\n                  boxHeader={`All Loads`}\n                />\n              }}\n            />\n\n            <Route\n              exact\n              path={`${value.basePath}/equipments`}\n              component={EquipmentsPage}\n            />\n\n            <Route\n              exact\n              path={`${value.basePath}/drivers`}\n              component={DriversPage}\n            />\n\n            <Route\n              exact\n              path={`${value.basePath}/equipment/edit/:id`}\n              component={(rprops) => {\n                return <EquipmentEditPage\n                  rprops={rprops}\n                  equipments={this.state.equipments}\n                  idleDrivers={this.state.idleDrivers}\n                  drivers={this.state.drivers} />\n              }}\n            />\n\n            <Route\n              exact\n              path={`${value.basePath}/load/new`}\n              component={AddLoadPage}\n            />\n\n            <Route\n              exact\n              path={`${value.basePath}/driver/new`}\n              component={(rprops) => {\n                return <AddDriverPage\n                  rprops={rprops}\n                  equipments={this.state.equipments} />\n              }}\n            />\n\n            <Route\n              exact\n              path={`${value.basePath}/equipment/new`}\n              component={(rprops) => {\n                return <AddEquipmentPage\n                  rprops={rprops}\n                  drivers={this.state.drivers} />\n              }}\n            />\n\n            <Route\n              exact\n              path={`${value.basePath}/driver/edit/:id`}\n              component={(rprops) => {\n                return <DriverEditPage\n                  rprops={rprops}\n                  equipments={this.state.equipments}\n                  idleDrivers={this.state.idleDrivers}\n                  drivers={this.state.drivers} />\n              }}\n            />\n\n            <Route\n              exact\n              path={`${value.basePath}/load/:id`}\n              component={(rprops) => {\n                return <LoadByIdPage\n                  rprops={rprops}\n                  shipments={this.state.shipments}\n                  idleDrivers={this.state.idleDrivers}\n                />\n              }}\n            />\n\n            <Route\n              exact\n              path={`${value.basePath}/load/edit/:id`}\n              component={(rprops) => {\n                return <EditLoadPage \n                  rprops={rprops}\n                  shipments={this.state.shipments}\n                  drivers={this.state.drivers}\n                  idleDrivers={this.state.idleDrivers}\n                />\n              }}\n            />\n\n          </Switch>\n        </div>\n      </AppContext.Provider>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>\n    , \n    document.getElementById('root'));\n"],"sourceRoot":""}