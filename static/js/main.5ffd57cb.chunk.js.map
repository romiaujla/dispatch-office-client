{"version":3,"sources":["Contexts/AppContext.js","config.js","Components/DesktopMenu/DesktopMenu.js","Components/Backdrop/Backdrop.js","Components/MobileMenu/MobileMenu.js","Components/Header/Header.js","Components/HomePageSection/HomePageSection.js","Routes/HomePage/HomePage.js","HelperFunctions/InputFieldValidations.js","Components/CreateAccount/CreateAccount.js","Routes/CreateAccountPage/CreateAccountPage.js","Services/TokenService.js","Services/AuthApiService.js","Components/LoginForm/LoginForm.js","Routes/LoginPage/LoginPage.js","HelperFunctions/HelperFunctions.js","Components/Utils/Utils.js","Components/LoadListBox/LoadListBox.js","Services/DriversService.js","Components/DriverCard/DriverCard.js","Components/IdleDriversBox/IdleDriversBox.js","Routes/DashboardPage/DashboardPage.js","Services/CarrierServices.js","Components/Logout/Logout.js","Services/EquipmentsService.js","HelperFunctions/LoadsPageHelperFunctions.js","Routes/LoadsPage/LoadsPage.js","Components/EquipmentCard/EquipmentCard.js","Routes/EquipmentsPage/EquipmentsPage.js","Routes/DriversPage/DriversPage.js","Components/DriversDropDown/DriversDropDown.js","Routes/EquipmentEditPaage/EquipmentEditPage.js","Services/ShipmentsService.js","Routes/AddLoadPage/AddLoadPage.js","Routes/LoadByIdPage/LoadByIdPage.js","Routes/AddDriverPage/AddDriverPage.js","Routes/AddEquipmentPage/AddEquipmentPage.js","Routes/DriverEditPage/DriverEditPage.js","Routes/EditLoadPage/EditLoadPage.js","Components/App/App.js","index.js"],"names":["React","createContext","basePath","loggedIn","newUser","setLoggedIn","setNewUser","setShipments","setEquipments","setIdleDrivers","setDrivers","getAllData","loggedInCarrier","shipments","setLoggedInCarrier","idleDrivers","idleEquipments","equipments","drivers","loadStatus","API_ENDPOINT","process","TOKEN_KEY","BASEPATH","DesktopMenu","config","aria-label","className","to","tabIndex","Component","Backdrop","MobileMenu","props","changeMenuOpenState","setState","menuOpen","state","closeMenuIfOpen","e","console","log","closeMenuWhenLargerScreen","window","innerWidth","componentDidMount","addEventListener","componentWillUnMount","removeEventListener","this","context","onClick","icon","faBars","faTimes","contextType","AppContext","Header","HomePageSection","HomePage","emptySpaces","word","trim","notValidDate","date","length","test","isNotValidDriverName","name","isNotValidPay","pay","isNaN","CreateAccount","validateUserName","username","usernameError","validatePassword","password","passwordError","validateFullName","full_name","fullNameError","handleFormSubmit","checkErrors","preventDefault","target","company_name","mc_num","value","companyNameError","mcNumError","onSubmit","htmlFor","type","id","required","onChange","CreateAccountPage","TokenService","saveAuthToken","token","localStorage","setItem","getAuthToken","getItem","clearAuthToken","removeItem","hasAuthToken","AuthApiService","postLogin","credentials","fetch","method","headers","body","JSON","stringify","then","res","ok","json","Error","error","message","catch","postCarrier","carrier","err","LoginForm","incorrectUsername","incorrectPassword","handleSubmitLoginForm","focus","authToken","loggedInUser","onLoginSuccess","defaultProps","LoginPage","a","history","push","handleGoBack","goBack","routeUserTo","route","objectIsEmpty","obj","Object","entries","constructor","arrayIsEmpty","arr","formatCurrency","amount","parseFloat","toFixed","toString","replace","formatDate","dbDate","Date","day","getDate","month","getMonth","year","getFullYear","renderEquipmentOptions","map","equipment","key","unit_num","getAvailableDrivers","filter","driver","removeEquipmentDriver","pay_rate","GoBackButton","join","faArrowLeft","EditButton","faEdit","DeleteButton","faTrashAlt","ViewLoadButton","faArrowRight","FilterButton","faFilter","UpdateViewButton","status","faBoxes","LoadListBox","renderShipments","shipment","pickup_warehouse","city","pickup_date","faTruck","delivery_warehouse","delivery_date","boxHeader","DriversService","getDriversData","response","driversData","getIdleDrivers","updateEquipment","equipment_id","Authorization","updateDriver","addDriver","DriverCard","handleDeleteDriver","driverToRemove","driverId","updateDriverInDB","shipmentId","idleDriver","IdleDriversBox","renderIdleDriversList","iDriver","DashboardPage","unAssignedShipments","includes","getShipmentWithStatus","shipmentsInProgress","getAllShipmentsInProgress","oldLoadStatus","CarrierService","getCarrierData","carrierData","getCarrierInfo","carrierInfo","Logout","getCarrierInfoInComponent","CarrierServices","handleLogout","EquipmentService","getEquipments","addNewEquipment","getShipmentsWithDriverId","parseInt","LoadsPage","handleOpeningFilterMenu","filterMenu","selectedDriver","i","selectedOption","Array","from","getElementsByTagName","getAttribute","data-id","data-name","renderAllDriverOptions","EquipmentCard","handleDeleteEquipment","EquipmentsService","editingMode","idleEquipment","hasOwnProperty","EquipmentsPage","handleAddEquipment","renderEquipmentList","equip","DriversPage","renderDrivers","DriversDropDown","handleChange","optionsValue","renderDriverOptions","defaultValue","EquipmentEditPage","giveEquipment","takeAwayEquipment","setDriverForEquipment","removeDriverFromEquipment","changeEquipmentForDriver","newDriverId","oldDriverId","oldDriver","handleEquipmentEdit","equipmentArray","undefined","inIdleQueue","removeExecuted","changeEquipemnt","changeEquipment","rprops","validateUnitNum","unitNum","unitNumError","match","params","availableDrivers","currentDriver","unshift","idleDr","ShipmentsSerivce","insertShipment","rate","miles","driver_id","broker","pickup_city","pickup_state","pickup_zipcode","delivery_city","delivery_state","delivery_zipcode","updateShipment","deleteShipment","AddLoadPage","validateInputDate","pickupDate","deliveryDate","validateCityInput","pickupCity","deliveryCity","validateStateInput","pickupState","deliveryState","validateZipcodeInput","zipcode","pickupZipcode","deliveryZipcode","updateIdleDriverQueue","handleAddLoad","toUpperCase","contextDriver","shipmentInDB","newShipment","hasError","dateError","cityError","stateError","zipcodeError","maxLength","onBlur","placeholder","min","disabled","LoadByIdPage","removeDriverAndEquipmentFromShipment","sendDriverToIdleDrivers","handleChangeLoadStatus","ShipmentsService","propShipment","completedShipment","handleAssignDriver","driverAssigned","avaialableDrivers","onDriverDropDownChange","handleShipmentDelete","shipmentToDelete","renderUpdateLoadStatusBox","driverPayout","AddDriverPage","validateDriverName","isNotValid","driverName","driverNameError","validatePayRate","driverPay","driverPayError","handleAddDriver","dbDriver","contextEquipment","availableEquipments","AddEquipmentPage","validateUnitNumField","equipmentNumError","equipmentNum","dbEquipment","DriverEditPage","driverToChange","makeDriverChanges","changes","handleEditDriver","changeDriver","newEquipmentId","oldEquipmentId","newEquipment","DriversSerivce","propsEquipment","EditLoadPage","stateCode","handleEditLoad","newShipmentFields","updateShipmentInDB","App","getShipments","data","getDrivers","Promise","all","Provider","path","component","exact","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5ffd57cb.chunk.js","sourcesContent":["import React from 'react';\n\nexport default React.createContext({\n    basePath: '',\n    loggedIn: () => {},\n    newUser: () => {},\n    setLoggedIn: () => {},\n    setNewUser: () => {},\n    setShipments: () => {},\n    setEquipments: () => {},\n    setIdleDrivers: () => {},\n    setDrivers: () => {},\n    getAllData: () => {},\n    loggedInCarrier: {},\n    shipments: [],\n    setLoggedInCarrier: () => {},\n    idleDrivers: [],\n    idleEquipments: [],\n    equipments: [],\n    drivers: [],\n    loadStatus: []\n});","// const path = 'http://localhost:8000/api';\nconst path = 'https://rocky-waters-07125.herokuapp.com/api';\n\nexport default {\n    API_ENDPOINT: process.env.API_ENDPOINT || path,\n    TOKEN_KEY: process.env.TOKEN_KEY || '9e7d73be-f7f1-11e9-8f0b-362b9e155667',\n    BASEPATH: '/dispatch-office-client',\n}","import React, { Component } from 'react';\nimport './DesktopMenu.css';\nimport { Link } from 'react-router-dom';\nimport config from '../../config';\n\nclass DesktopMenu extends Component {\n\n    render() {\n\n        const basePath = config.BASEPATH;\n\n        return (\n            <nav\n                aria-label=\"Main Navigation\"\n                className='DesktopMenu'>\n                <ul>\n                    <li>\n                        <Link to={basePath}>\n                            Dashboard\n                        </Link>\n                    </li>\n                    <li className=\"has-submenu\" tabIndex=\"0\">\n                        <span>\n                            Loads\n                        </span>\n                        <ul>\n                            <li>\n                                <Link to={`${basePath}/load/new`}>Add Load</Link>\n                            </li>\n                            <li tabIndex=\"0\">\n                                <Link to={`${basePath}/loads`}>View Loads</Link>\n                            </li>\n                        </ul>\n                    </li>\n                    <li className=\"has-submenu\" tabIndex=\"0\">\n                        <span>\n                            Equipments\n                        </span>\n                        <ul>\n                            <li tabIndex=\"0\">\n                                <Link to={`${basePath}/equipment/new`}>Add Equipment</Link>\n                            </li>\n                            <li tabIndex=\"0\">\n                                <Link to={`${basePath}/equipments`}>View Equipments</Link>\n                            </li>\n                        </ul>\n                    </li>\n                    <li className=\"has-submenu\" tabIndex=\"0\">\n                        <span>\n                            Drivers\n                        </span>\n                        <ul>\n                            <li tabIndex=\"0\">\n                                <Link to={`${basePath}/driver/new`}>Add Driver</Link>\n                            </li>\n                            <li tabIndex=\"0\">\n                                <Link to={`${basePath}/drivers`}>View Drivers</Link>\n                            </li>\n                        </ul>\n                    </li>\n                </ul>\n            </nav>\n        );\n    }\n}\n\n\nexport default DesktopMenu","import React, { Component } from 'react';\nimport './Backdrop.css';\n\nclass Backdrop extends Component {\n    \n    render() { \n        return (\n            <div className='Backdrop'>\n            </div>\n        );\n    }\n}\n \nexport default Backdrop;","import React, { Component } from 'react';\nimport './MobileMenu.css';\nimport AppContext from '../../Contexts/AppContext';\nimport { Link } from 'react-router-dom';\nimport Backdrop from '../Backdrop/Backdrop';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTimes, faBars } from '@fortawesome/free-solid-svg-icons';\n\nclass MobileMenu extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            menuOpen: false\n        }\n    }\n\n    static contextType = AppContext;\n\n    changeMenuOpenState = () => {\n        this.setState({\n            menuOpen: !this.state.menuOpen\n        })\n    }\n\n    closeMenuIfOpen = (e) => {\n        console.log(`backdrop clicked`);\n        if (this.state.menuOpen) {\n            this.setState({\n                menuOpen: false\n            })\n        }\n    }\n\n    // closes menu \n    // When it is open on mobile and resized to larger screen\n    // and the menu for larger screen pops up and this closes\n    closeMenuWhenLargerScreen = (e) => {\n        if (window.innerWidth > 1050) {\n            this.setState({\n                menuOpen: false\n            })\n        }\n    }\n\n    componentDidMount = () => {\n        window.addEventListener('resize', this.closeMenuWhenLargerScreen);\n    }\n\n    componentWillUnMount = () => {\n        window.removeEventListener('resize', this.closeMenuWhenLargerScreen);\n    }\n\n\n    render() {\n\n        const { basePath } = this.context;\n\n        return (\n            <nav className='MobileMenu'>\n                <button className='menu-button' onClick={this.changeMenuOpenState}>\n                    <FontAwesomeIcon icon={faBars} />\n                </button>\n                {\n                    this.state.menuOpen &&\n                    <>\n                        <Backdrop />\n                        <ul className='menu-list'>\n                            <button\n                                className='close-button'\n                                onClick={this.changeMenuOpenState}>\n                                <FontAwesomeIcon icon={faTimes} />\n                            </button>\n                            <li className='menu-item'>\n                                <Link\n                                    to={`${basePath}/dashboard`}\n                                    onClick={this.changeMenuOpenState}>\n                                    Dashboard\n                                </Link>\n                            </li>\n                            <li className='menu-item'>\n                                <hr />\n                                <Link \n                                    to={`${basePath}/load/new`}\n                                    onClick={this.changeMenuOpenState}>\n                                    Add Load\n                                </Link>\n                            </li>\n                            <li className='menu-item'>\n                                <Link \n                                    to={`${basePath}/loads`}\n                                    onClick={this.changeMenuOpenState}>\n                                    View Loads\n                                </Link>\n                            </li>\n\n                            <li className='menu-item'>\n                                <hr />\n                                <Link \n                                    to={`${basePath}/equipment/new`}\n                                    onClick={this.changeMenuOpenState}>\n                                    Add Equipments\n                                </Link>\n                            </li>\n                            <li className='menu-item'>\n                                <Link\n                                    to={`${basePath}/equipments`}\n                                    onClick={this.changeMenuOpenState}>\n                                    View Equipments\n                                </Link>\n                            </li>\n                            <li className='menu-item'>\n                                <hr />\n                                <Link \n                                    to={`${basePath}/driver/new`}\n                                    onClick={this.changeMenuOpenState}>\n                                    Add Driver\n                                </Link>\n                            </li>\n                            <li className='menu-item'>\n                                <Link \n                                    to={`${basePath}/drivers`}\n                                    onClick={this.changeMenuOpenState}>\n                                    View Drivers\n                                </Link>\n                            </li>\n                        </ul>\n                    </>\n                }\n            </nav>\n        );\n    }\n}\n\nexport default MobileMenu;","import React, { Component } from 'react';\nimport './Header.css';\nimport { Link } from 'react-router-dom';\nimport AppContext from '../../Contexts/AppContext';\nimport DesktopMenu from '../DesktopMenu/DesktopMenu';\nimport MobileMenu from '../MobileMenu/MobileMenu';\n\nclass Header extends Component {\n\n    static contextType = AppContext;\n\n    render() {\n\n        const {loggedIn} = this.context;\n\n        return (\n            <header className='Header blue-back white-text'>\n                <div className='width-wrapper'>\n                    <Link to='/'>\n                        <div className='logo'>\n                            <span>Dispatch</span>\n                            <span>Office</span>\n                        </div>\n                    </Link>\n                    {\n                        loggedIn &&\n                        <>\n                            <DesktopMenu />\n                            <MobileMenu />\n                        </>\n                    }\n                </div>\n            </header>\n        );\n    }\n}\n\nexport default Header;","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport AppContext from '../../Contexts/AppContext';\nimport './HomePageSection.css';\n\nclass HomePageSection extends Component {\n\n    static contextType = AppContext;\n\n    render() {\n\n        const { basePath } = this.context;\n\n        return (\n            <div className='HomePageSection width-wrapper'>\n                {/* Make descrtiption so that audience gets involved */}\n                <p>\n                    Welcome to <span className='span-title red-text'>Dispatch Office</span>. \n                    This transportation management system will have everything right \n                    at your fingertips. The one stop app that \n                    assists in driver assignment, while also keeping track \n                    of all shipments and equipment. \n                </p>\n                <p className='user-info'>\n                    Dummy User Info <br />\n                    Username: <span>dundermifflin</span>\n                </p>\n                <p className='user-info'>\n                    Password: <span>password</span>\n                </p>\n                <Link to={`${basePath}/login`} className='app-link'>\n                    Login\n                </Link>\n            </div>\n        );\n    }\n}\n\nexport default HomePageSection;","import React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport './HomePage.css';\nimport AppContext from '../../Contexts/AppContext';\nimport HomePageSection from '../../Components/HomePageSection/HomePageSection';\n\nclass HomePage extends Component {\n\n    static contextType = AppContext;\n\n    render() {\n        const { basePath, loggedIn, newUser } = this.context;\n        return (\n            !loggedIn\n                ?   <section className='HomePage blue-text'>\n                        <HomePageSection />\n                    </section>\n                :   !newUser\n                    ? <Redirect to={`${basePath}/dashboard`} />\n                    : <Redirect to={`${basePath}/newuser`} />\n        );\n    }\n}\n\nexport default HomePage;","export function emptySpaces(word){\n    if(word.trim() === '')\n        return true;\n\n    return false;\n}\n\nexport function notValidState(state){\n    if(state.trim().length < 2)\n        return `Invalid state code, Eg. TX`\n}\n\nexport function notValidDate(date){\n    const date_regex = /^(0?[1-9]|1[0-2])\\/(0?[1-9]|1\\d|2\\d|3[01])\\/(15|18|17|16|19|20|21|23|24|25)\\d{2}$/ ;\n    return date.length < 8 || !date_regex.test(date);\n}\n\nexport function isNotValidDriverName(name){\n    if(name.trim() === ''){\n        return `Driver is required and cannot be just empty spaces`\n    }\n\n    return false;\n}\n\nexport function isNotValidPay(pay){\n    if(pay.trim() === ''){\n        return `Pay cannot be empty spaces`\n    }\n\n    if(isNaN(pay)){\n        return `Pay can only be numeric, cannot contain characters other than 0-9 and only one '.'`;\n    }\n\n    if(pay < 0){\n        return `Pay cannot be negative`;\n    }\n\n    return false;\n}","import React, { Component } from 'react';\nimport './CreateAccount.css';\nimport { emptySpaces } from '../../HelperFunctions/InputFieldValidations';\n\n\nclass CreateAccount extends Component {\n\n    constructor(props){\n        super(props);\n        this.state = {\n            usernameError: '',\n            passwordError: '',\n            companyNameError: '',\n            mcNumError: '',\n            fullNameError: '',            \n        }\n    }\n\n    validateUserName = (username) => {\n        if(emptySpaces(username)){\n            this.setState({usernameError: `Username is required`})\n        } else if(username.trim().length < 6 || username.trim().length > 20){\n            this.setState({usernameError: `Username must be between 6 to 20 characters`})\n        } else {\n            this.setState({usernameError: ``})\n        }\n    }\n\n    validatePassword = (password) => {\n        if(emptySpaces(password)){\n            this.setState({passwordError: `Username is required`})\n        } else if(password.trim().length < 6 || password.trim().length > 72){\n            this.setState({passwordError: `Password must be between 6 to 72 characters`})\n        } else {\n            this.setState({passwordError: ``})\n        }\n    }\n\n    validateFullName = (full_name) => {\n        if(emptySpaces(full_name)){\n            this.setState({fullNameError: `Full Name is required`})\n        } else if(full_name.trim().length < 6 || full_name.trim().length > 40){\n            this.setState({fullNameError: `Full Name must be between 6 to 40 characters`})\n        } else {\n            this.setState({fullNameError: ``})\n        }\n    }\n\n    handleFormSubmit = (e) => {\n        this.checkErrors(this.state);\n        e.preventDefault();\n        const { username, password, full_name, company_name, mc_num } = e.target\n        const user = {\n            username: username.value,\n            password: password.value,\n            company_name: company_name.value,\n            mc_num: mc_num.value,\n            full_name: full_name.value\n        }\n    }\n\n    render() {\n        return (\n            <form className='CreateAccount width-wrapper' onSubmit={(e) => { this.handleFormSubmit(e) }}>\n                <fieldset>\n                    <legend className='blue-back white-text'>\n                        Create Account\n                    </legend>\n                    <div className='flex'>\n                        <label htmlFor='username'>\n                            <span className='input-title'>* Username:</span>\n                            <input\n                                type='text'\n                                id='username'\n                                name='username'\n                                required\n                                onChange={(e) => {this.validateUserName(e.target.value)}}\n                            />\n                            {\n                                this.state.usernameError &&\n                                <span className='error'>{this.state.usernameError}</span>\n                            }\n                        </label>\n                        <label htmlFor='password'>\n                            <span className='input-title'>* Password:</span>\n                            <input\n                                type='password'\n                                id='password'\n                                name='password'\n                                required\n                                onChange={(e) => {this.validatePassword(e.target.value)}}\n                            />\n                            {\n                                this.state.passwordError &&\n                                <span className='error'>{this.state.passwordError}</span>\n                            }\n                        </label>\n                        <label htmlFor='full_name'>\n                            <span className='input-title'>* Full Name:</span>\n                            <input type='text' id='full_name' name='full_name' required />\n                            {\n                                this.state.fullNameError &&\n                                <span className='error'>{this.state.fullNameError}</span>\n                            }\n                        </label>\n                        <label htmlFor='company_name'>\n                            <span className='input-title'>Company Name:</span>\n                            <input type='text' id='company_name' name='company_name' />\n                            {\n                                this.state.companyNameError &&\n                                <span className='error'>{this.state.companyNameError}</span>\n                            }\n                        </label>\n                        <label htmlFor='mc_num'>\n                            <span className='input-title'>MC Number:</span>\n                            <input type='text' id='mc_num' name='mc_num' />\n                            {\n                                this.state.mcNumError &&\n                                <span className='error'>{this.state.mcNumError}</span>\n                            }\n                        </label>\n                        <button\n                            className='app-button'\n                            type='submit'\n                        >\n                            Create Account\n                        </button>\n                    </div>\n                </fieldset>\n            </form>\n        );\n    }\n}\n\nexport default CreateAccount;","import React, { Component } from 'react';\nimport './CreateAccountPage.css';\nimport AppContext from '../../Contexts/AppContext';\nimport { Redirect } from 'react-router-dom';\nimport CreateAccount from '../../Components/CreateAccount/CreateAccount';\n\nclass CreateAccountPage extends Component {\n\n    static contextType = AppContext;\n\n    render() {\n\n        const { basePath, loggedIn, newUser } = this.context;\n\n        return (\n            !loggedIn\n                ? <div className='CreateAccountPage'>\n                    <CreateAccount />\n                </div>\n                : !newUser\n                    ? <Redirect to={`${basePath}/dashboard`} />\n                    : <Redirect to={`${basePath}/newuser`} />\n        );\n    }\n}\n\nexport default CreateAccountPage;","import config from '../config';\n\nconst TokenService = {\n  saveAuthToken(token) {\n    window.localStorage.setItem(config.TOKEN_KEY, token)\n  },\n  getAuthToken() {\n    return window.localStorage.getItem(config.TOKEN_KEY)\n  },\n  clearAuthToken() {\n    window.localStorage.removeItem(config.TOKEN_KEY)\n  },\n  hasAuthToken() {\n    return !!TokenService.getAuthToken()\n  },\n}\n\nexport default TokenService","import config from '../config';\n\nconst AuthApiService = {\n    // login authorization\n    postLogin(credentials){\n        return fetch(`${config.API_ENDPOINT}/auth/login`, {\n            method: \"POST\",\n            headers: {\n                \"content-type\": \"application/json\"\n            },\n            body: JSON.stringify(credentials)\n        })\n        .then(res => {\n            if(!res.ok) {\n                return res.json().then(e => {\n                    throw new Error(e.error.message)\n                })\n            }\n            \n            return res.json();\n        })\n        .then(res => res)\n        .catch(error => error)\n    },\n\n    // creating a user\n    postCarrier(carrier){\n        return fetch(`${config.API_ENDPOINT}/user`, {\n            method: \"POST\",\n            headers: {\n                \"content-type\": \"application/json\"\n            },\n            body: JSON.stringify(carrier)\n        })\n        .then(res => {\n            if(!res.ok){\n                return res.json().then(e => {\n                    throw new Error(e.error.message)\n                })\n            }\n\n            return res.json();\n        })\n        .then(res => res)\n        .catch(err => err);\n    }\n}\n\nexport default AuthApiService;","import React, { Component } from 'react';\nimport './LoginForm.css';\nimport TokenService from '../../Services/TokenService';\nimport AuthApiService from '../../Services/AuthApiService';\nimport AppContext from '../../Contexts/AppContext';\n\nclass LoginForm extends Component {\n\n    state = {\n        error: null,\n        incorrectUsername: false,\n        incorrectPassword: false,\n    }\n\n    static contextType = AppContext;\n\n    static defaultProps = {\n        onLoginSuccess: () => {},\n    }\n\n    handleSubmitLoginForm = (e) => {\n        e.preventDefault();\n\n        this.setState({\n            error: null,\n            incorrectUsername: false,\n            incorrectPassword: false,\n        })\n\n        const { username, password } = e.target;\n\n        AuthApiService.postLogin({\n            username: username.value,\n            password: password.value\n        })\n            .then((res) => {\n                if(res.message === 'Incorrect Username'){\n                    this.setState({\n                        incorrectUsername: true,\n                        error: res.message\n                    })\n                    username.value = '';\n                    password.value = '';\n                    username.focus();\n                }\n                if(res.message === 'Incorrect Password'){\n                    this.setState({\n                        incorrectPassword: true,\n                        error: res.message\n                    })\n                    password.value = '';\n                }\n                \n                if(!this.state.incorrectPassword && !this.state.incorrectUsername){\n                    TokenService.saveAuthToken(res.authToken);\n                    this.context.setLoggedInCarrier(res.loggedInUser);\n                    this.props.onLoginSuccess();\n                    username.value = '';\n                    password.value = '';\n                }\n            })\n            .catch((res) => {\n                this.setState({\n                    error: res.error\n                })\n            })\n    }\n\n    render() {\n\n\n        const { incorrectPassword, incorrectUsername, error } = this.state;\n\n\n        return (\n\n            <form className='LoginForm width-wrapper' onSubmit={(e) => { this.handleSubmitLoginForm(e) }}>\n                <fieldset>\n                    <legend className='blue-back white-text'>\n                        Login\n                        </legend>\n                    <div className='flex'>\n                        <label htmlFor='username'>\n                            <span className='input-title'>* Username:</span>\n                            <input\n                                type='text'\n                                id='username'\n                                name='username'\n                                required\n                            />\n                            {\n                                incorrectUsername &&\n                                <span className='error'>{error}</span>\n                            }\n                        </label>\n                        \n                        <label htmlFor='password'>\n                            <span className='input-title'>* Password:</span>\n                            <input\n                                type='password'\n                                id='password'\n                                name='password'\n                                required\n                            />\n                            {\n                                incorrectPassword &&\n                                <span className='error'>{error}</span>\n                            }\n                        </label>\n                        <button\n                            className='app-button'\n                            type='submit'\n                        >\n                            Login\n                        </button>\n                    </div>\n                </fieldset>\n            </form>\n        );\n    }\n}\n\nexport default LoginForm;","import React, { Component } from \"react\";\nimport \"./LoginPage.css\";\nimport AppContext from \"../../Contexts/AppContext\";\nimport LoginForm from \"../../Components/LoginForm/LoginForm\";\nimport { Redirect } from \"react-router-dom\";\n\nclass LoginPage extends Component {\n  static contextType = AppContext;\n\n  // using async await so app proceeds only once complete data for carrier is received\n  onLoginSuccess = async () => {\n    this.props.history.push(\"/\");\n    this.context.setLoggedIn(true);\n    this.context.getAllData();\n  };\n\n  render() {\n    const { basePath, loggedIn, newUser } = this.context;\n\n    return !loggedIn ? (\n      <section className=\"LoginPage\">\n        <LoginForm\n          onLoginSuccess={() => {\n            this.onLoginSuccess();\n          }}\n        />\n      </section>\n    ) : !newUser ? (\n      <Redirect to={`${basePath}/dashboard`} />\n    ) : (\n      <Redirect to={`${basePath}/newuser`} />\n    );\n  }\n}\n\nexport default LoginPage;\n","import React from 'react';\n\n// takes user back to the previous page in history\nexport function handleGoBack(history) {\n    return history.goBack();\n}\n\nexport function routeUserTo(history, route) {\n    return history.push(route);\n}\n\n// Returns true if the object is empty\nexport function objectIsEmpty(obj) {\n    return (Object.entries(obj).length === 0 && obj.constructor === Object);\n}\n\n// Return true is value passed in not undefined\nexport function isNotUndefined(value){\n    return value !== undefined;\n}\n\n// Returns true if array is empty\nexport function arrayIsEmpty(arr) {\n    return (arr.length === 0);\n}\n\nexport function formatCurrency(amount) {\n    amount = parseFloat(amount).toFixed(2);\n    return `$${amount.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}`;\n}\n\n// Returns date in a formatted manner\nexport function formatDate(dbDate) {\n    const date = new Date(dbDate);\n    const day = date.getDate();\n    const month = date.getMonth();\n    const year = date.getFullYear();\n    return `${month + 1}/${day}/${year}`;\n};\n\nexport function sortShipments(shipments, property) {\n    return shipments.sort((a, b) => (a[property] < b[property] ? 1 : -1));\n};\n\nexport function renderLoadStatusOptions(statusArray) {\n    return statusArray.map((status, i) => {\n        return (\n            <option\n                key={i}\n                value={status}\n            >\n                {status}\n            </option>\n        )\n    })\n}\n\nexport function renderEquipmentOptions(equipments) {\n    return equipments.map((equipment) => {\n        return (\n            <option\n                key={equipment.id}\n                value={equipment.id}\n            >\n                {equipment.unit_num}\n            </option>\n        )\n    })\n}\n\nexport function renderDriverOptions(drivers) {\n    return drivers.map((driver) => {\n        return (\n            <option\n                key={driver.id}\n                value={driver.id}\n            >\n                {driver.full_name}\n            </option>\n        )\n    })\n}\n\n// to populate the drivers drop down list\n// with only those drivers that are idle and \n// have an equipment avialable to be assigned\nexport function getAvailableDrivers(idleDrivers) {\n    const availableDrivers = idleDrivers.filter((driver) => !(Object.entries(driver.equipment).length === 0 && driver.equipment.constructor === Object));\n    return availableDrivers;\n}\n\nexport function removeEquipmentDriver(equipment){\n    equipment.driver = {\n        full_name: '',\n        pay_rate: '',\n    }\n    return equipment;\n}\n\nexport function pickupAfterDelivery(pickup, delivery){\n    const pickupYear = new Date(pickup).getFullYear();\n\n    console.log(pickupYear);\n    \n    return false;\n}\n\nexport function getUnAssignedShipments(shipments){\n    if(!arrayIsEmpty(shipments)){\n        return shipments.filter(shipment => shipment.status === 'un-assigned')\n    }\n    return [];\n}\n\n// This function can take in either one string \n// which will be either one status or take in an\n// array of status and return shipments that have that status\nexport function getShipmentWithStatus(shipments, status){\n    if(typeof status === 'string'){\n        status = [status];\n    }\n    if(!arrayIsEmpty(shipments)){\n        return shipments.filter(shipment => status.includes(shipment.status));\n    }\n}\n\n// return all shipments except un-assigned or completed\n// because those are the only two shipments that are not in progress\n// as un-assigned has no driver and completed is already over\nexport function getAllShipmentsInProgress(shipments){\n    if(!arrayIsEmpty(shipments)){\n        return shipments.filter(shipment => !['un-assigned', 'completed'].includes(shipment.status))\n    }\n    return shipments;\n}","import React from 'react';\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\nimport {\n    faEdit,\n    faTrashAlt,\n    faArrowLeft,\n    faFilter,\n    faArrowRight,\n    faBoxes,\n} from '@fortawesome/free-solid-svg-icons'\nimport './Utils.css';\nimport {Link} from 'react-router-dom';\n\n\nexport function GoBackButton({ className, ...props }) {\n    return (\n        <button type='button' className={['GoBack icon-button', className].join(' ')} {...props}>\n            <FontAwesomeIcon icon={faArrowLeft} className='back-icon' />\n            <span>Back</span>\n        </button>\n    )\n}\n\nexport function EditButton({className, to, ...props}){\n    return (\n        <Link type='button' className={['EditButton icon-button', className].join(' ')} {...props} to={to}>\n            <FontAwesomeIcon icon={faEdit} className='edit-icon' />\n            <span>Edit</span>\n        </Link>\n    )\n}\n\nexport function DeleteButton({className, to, ...props}){\n    return (\n        <button className={['DeleteButton icon-button', className].join(' ')} {...props} to={to}>\n            <FontAwesomeIcon icon={faTrashAlt} className='delete-icon' />\n            <span>Delete</span>\n        </button>\n    )\n}\n\nexport function ViewLoadButton({className, to , ...props}){\n    return (\n        <Link type='button' className={['ViewLoadButton icon-button', className].join(' ')} {...props} to={to}>\n            <span>View Load</span>\n            <FontAwesomeIcon icon={faArrowRight} className='delete-icon' />\n        </Link>\n    )\n}\n\nexport function FilterButton({className, ...props}){\n    return (\n        <button className={['FilterButton ', className].join(' ')} {...props}>\n            <FontAwesomeIcon icon={faFilter} className='filter-icon' />\n            <span>Filter</span>\n        </button>\n    )\n}\n\nexport function UpdateViewButton({className, status, ...props}){\n    return (\n        <Link className={['UpdateViewButton ', className].join(' ')} {...props}>\n            <FontAwesomeIcon icon={faBoxes} className='boxes-icon' />\n            <span>{status}</span>\n        </Link>\n    )\n}","import React, { Component } from \"react\";\nimport \"./LoadListBox.css\";\nimport AppContext from \"../../Contexts/AppContext\";\nimport {\n  formatDate,\n  arrayIsEmpty\n} from '../../HelperFunctions/HelperFunctions'\nimport config from \"../../config\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faTruck } from '@fortawesome/free-solid-svg-icons'\nimport { UpdateViewButton, EditButton } from \"../Utils/Utils\";\n\nclass LoadListBox extends Component {\n\n  static contextType = AppContext;\n\n  static defaultProps = {\n    loadStatus: [],\n    boxHeader: 'Loads',\n    shipments: [],\n  };\n\n  // return the list of shipments\n  renderShipments = (shipments) => {\n\n    if (arrayIsEmpty(shipments)) {\n      return (\n        <li className='no-shipments'>\n          <div>\n            No Shipments Found\n          </div>\n        </li>\n      )\n    }\n\n    return shipments.map(shipment => {\n      return (\n        <li className=\"load\" key={shipment.id}>\n          <div className=\"pick-up\">\n            <h6>Pick-up</h6>\n            <br />\n            <span className=\"red-bold\">\n              {shipment.pickup_warehouse.city},{\" \"}\n              {shipment.pickup_warehouse.state}\n              <br />\n              Date: {formatDate(shipment.pickup_date)}\n            </span>\n          </div>\n          <div className=\"status-line-wrapper\">\n            <div className=\"rate-broker\">\n              <div className=\"driver\">\n                <h6>Driver</h6>\n                <br />\n                {shipment.driver.full_name ? shipment.driver.full_name : 'No Driver Assigned'}\n              </div>\n            </div>\n            <div className=\"status-line\">\n              <FontAwesomeIcon icon={faTruck} className={`truck ${shipment.status}`}/>\n              <div className={`circle green ${shipment.status}`}></div>\n              <div className={`line increase green ${shipment.status}`}></div>\n              <div className=\"line red\"></div>\n              <div className=\"circle red\"></div>\n            </div>\n            <div className=\"rate-broker\">\n              <div className=\"status\">\n                <h6>Equipment #</h6>\n                <br />\n                <span className=\"\">{shipment.equipment.unit_num ? shipment.equipment.unit_num : `No Equipment Assigned`}</span>\n              </div>\n            </div>\n          </div>\n          <div className=\"delivery\">\n            <h6>Delivery</h6>\n            <br />\n            <span className=\"red-bold\">\n              {shipment.delivery_warehouse.city},{\" \"}\n              {shipment.delivery_warehouse.state} <br />\n              Date: {formatDate(shipment.delivery_date)}\n            </span>\n          </div>\n          <div className=\"load-buttons\">\n            <UpdateViewButton to={`${config.BASEPATH}/load/${shipment.id}`}\n              className='responsive' \n              status={shipment.status === 'completed' ? 'View Load' : 'Update Load'}\n            />\n            <EditButton to={`${config.BASEPATH}/load/edit/${shipment.id}`}  className='responsive' />\n          </div>\n        </li>\n      );\n    });\n  }\n\n  render() {\n\n    const { shipments } = this.props;\n\n    return (\n      <div className=\"LoadListBox blue-text\">\n        <h3 className=\"blue-back white-text\">{this.props.boxHeader}</h3>\n        <ul className=\"un-assigned-loads\">\n          {this.renderShipments(shipments)}\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default LoadListBox;\n","import TokenService from './TokenService';\nimport config from '../config';\n\nconst DriversService = {\n    getDriversData() {\n        return fetch(`${config.API_ENDPOINT}/drivers`, {\n            method: 'GET',\n            headers: {\n                \"content-type\": \"application/json\",\n                \"Authorization\": `bearer ${TokenService.getAuthToken()}`\n            }\n        })\n            .then(response => response.json())\n            .then(driversData => driversData)\n            .catch((error) => {\n                console.log(error);\n            })\n    },\n\n    getIdleDrivers() {\n        return fetch(`${config.API_ENDPOINT}/drivers/idle`, {\n            method: 'GET',\n            headers: {\n                \"content-type\": \"application/json\",\n                \"Authorization\": `bearer ${TokenService.getAuthToken()}`\n            }\n        })\n            .then(response => response.json())\n            .then(idleDrivers => idleDrivers)\n            .catch((error) => {\n                console.log(error);\n            })\n    },\n\n    updateEquipment(id, equipment_id) {\n        return fetch(`${config.API_ENDPOINT}/drivers/${id}`, {\n            method: \"PATCH\",\n            headers: {\n                \"content-type\": \"application/json\",\n                Authorization: `bearer ${TokenService.getAuthToken()}`\n            },\n            body: JSON.stringify({\n                equipment_id\n            })\n        })\n            .then(response => response.json())\n            .then(driver => driver)\n            .catch((error) => {\n                console.log(error);\n            })\n    },\n\n    updateDriver(driver){\n        return fetch(`${config.API_ENDPOINT}/drivers/${driver.id}`, {\n            method: \"PATCH\",\n            headers: {\n                \"content-type\": \"application/json\",\n                Authorization: `bearer ${TokenService.getAuthToken()}`\n            },\n            body: JSON.stringify({\n                full_name: driver.full_name,\n                pay_rate: driver.pay_rate,\n                equipment_id: driver.equipment_id,\n                status: driver.status\n            })\n        })\n            .then(response => response.json())\n            .then(driver => driver)\n            .catch((error) => {\n                console.log(error);\n            })\n    },\n\n    addDriver(driver){\n        return fetch(`${config.API_ENDPOINT}/drivers`, {\n            method: \"POST\",\n            headers: {\n                \"content-type\": \"application/json\",\n                Authorization: `bearer ${TokenService.getAuthToken()}`\n            },\n            body: JSON.stringify({\n                full_name: driver.full_name,\n                pay_rate: driver.pay_rate,\n                equipment_id: driver.equipment_id,\n            })\n        })\n            .then(response => response.json())\n            .then(driver => driver)\n            .catch((error) => {\n                console.log(error);\n            })\n    }\n}\n\nexport default DriversService;","import React, {Component} from 'react';\nimport './DriverCard.css';\nimport config from '../../config';\nimport AppContext from '../../Contexts/AppContext';\nimport { arrayIsEmpty, objectIsEmpty, removeEquipmentDriver } from '../../HelperFunctions/HelperFunctions';\nimport DriversService from '../../Services/DriversService';\nimport { DeleteButton, EditButton, ViewLoadButton } from '../Utils/Utils';\n\n\nclass DriverCard extends Component{\n    \n    static defaultProps = {\n        driver: {}\n    }\n\n    static contextType = AppContext\n\n    handleDeleteDriver = (driverToRemove) => {\n\n        let {drivers, idleDrivers, equipments} = this.context\n        const driverId = driverToRemove.id\n\n        // if driver had equipment remove driver from equipment\n        if(!objectIsEmpty(driverToRemove.equipment)){\n            equipments = equipments.map((equipment) => {\n                if(equipment.driver.id === driverId){\n                    removeEquipmentDriver(equipment)\n                }\n                return equipment;\n            })\n        }\n\n        // change driver status to inactive in all drivers array\n        drivers = drivers.map((driver)=>{\n\n            if(driver.id === driverId){\n                driver.status = 'inactive'\n            }\n            return driver\n        })\n\n        const updateDriverInDB = {\n            id: driverToRemove.id,\n            full_name: driverToRemove.full_name,\n            pay_rate: driverToRemove.pay_rate,\n            equipment_id: null,\n            status: 'inactive'\n        }\n        DriversService.updateDriver(updateDriverInDB);\n\n        // remove driver for idle driver array\n        idleDrivers = idleDrivers.filter((driver) => driver.id !== driverId)\n\n        this.context.setDrivers(drivers);\n        this.context.setIdleDrivers(idleDrivers);\n        this.context.setEquipments(equipments);\n    }\n\n    render(){\n\n        const {driver} = this.props;\n        const {idleDrivers, shipments} = this.context;\n        let shipmentId = -1;\n        const busyDriver = arrayIsEmpty(idleDrivers.filter(idleDriver => idleDriver.id === driver.id));\n        if(busyDriver){\n            shipmentId = shipments.filter((shipment) => (shipment.driver.id === driver.id && shipment.status !== 'completed'))[0].id;\n        }\n\n        return(\n            <div className='DriverCard grey-back blue-text'>\n                <div className='flex-row'>\n                    <div className='card-div'>\n                        <h6>Driver</h6>\n                        <p>{driver.full_name}</p>\n                    </div>\n                    <div className='card-div'>\n                        <h6>Pay Rate</h6>\n                        <p>${driver.pay_rate}</p>\n                    </div>\n                    <div className='card-div'>\n                        <h6 className='small-header'>Equipment #</h6>\n                        <p>{driver.equipment.unit_num ? driver.equipment.unit_num : 'No Equipment'}</p>\n                    </div>\n                </div>\n                {\n                    shipmentId === -1 \n                    ?\n                    <div className='driver-buttons flex-row'>\n                        <EditButton to={`${config.BASEPATH}/driver/edit/${driver.id}`} className='responsive'/>\n                        <DeleteButton onClick={() => {this.handleDeleteDriver(driver)}} className='responsive'/>\n                    </div>\n                    :\n                    <div className='driver-buttons flex-row'>\n                        <span>\n                            Driver Busy\n                        </span>\n                        <ViewLoadButton to={`${config.BASEPATH}/load/${shipmentId}`} \n                            className='responsive'\n                        />\n                    </div>\n                }\n                \n            </div>\n        )\n    }\n}\n\nexport default DriverCard;","import React, { Component } from 'react';\nimport './IdleDriversBox.css';\nimport AppContext from '../../Contexts/AppContext';\nimport DriverCard from '../DriverCard/DriverCard';\nimport { arrayIsEmpty } from '../../HelperFunctions/HelperFunctions';\n\nclass IdleDriversBox extends Component {\n    \n    static contextType = AppContext;\n\n    renderIdleDriversList = () => {\n        let {idleDrivers} = this.context\n        idleDrivers = idleDrivers.filter(idleDriver => idleDriver.status === 'active');\n        if(!arrayIsEmpty(idleDrivers)){\n            return idleDrivers.map((iDriver) => {\n                return <li key={iDriver.id}><DriverCard driver={iDriver} /></li>\n            })\n        }else{\n            return (\n                <li className='no-idle-drivers'>\n                    No drivers idle at this time\n                </li>\n            )\n        }\n\n    }\n\n    render() { \n        return (\n            <div className='IdleDriversBox'>\n                <h3 className='blue-back white-text'>Idle Drivers</h3>\n                <ul>\n                    {this.renderIdleDriversList()}\n                </ul>\n            </div>\n        );\n    }\n}\n \nexport default IdleDriversBox;","import React, { Component } from 'react';\nimport './DashboardPage.css';\nimport LoadListBox from '../../Components/LoadListBox/LoadListBox';\nimport IdleDriversBox from '../../Components/IdleDriversBox/IdleDriversBox';\nimport AppContext from '../../Contexts/AppContext';\nimport { getShipmentWithStatus, getAllShipmentsInProgress } from '../../HelperFunctions/HelperFunctions';\n\nclass DashboardPage extends Component {\n\n    static contextType = AppContext\n\n    render() { \n\n        const {shipments} = this.context;\n        const unAssignedShipments = getShipmentWithStatus(shipments, 'un-assigned');\n        const shipmentsInProgress = getAllShipmentsInProgress(shipments);\n\n        return (  \n            <section className='DashboardPage width-wrapper'>\n                <LoadListBox \n                    oldLoadStatus='un-assigned' \n                    shipments={unAssignedShipments}\n                    boxHeader='Un Assigned Loads'\n                />\n                <LoadListBox \n                    oldLoadStatus='dispatched' \n                    shipments={shipmentsInProgress}\n                    boxHeader='Loads in progress'\n                />\n                <IdleDriversBox />\n\n            </section>\n        );\n    }\n}\n \nexport default DashboardPage;","import TokenService from './TokenService';\nimport config from '../config';\n\nconst CarrierService = {\n    getCarrierData(){\n        return fetch(`${config.API_ENDPOINT}/carrier`, {\n            method: 'GET',\n            headers: {\n                \"content-type\": \"application/json\",\n                \"Authorization\": `bearer ${TokenService.getAuthToken()}`\n            }\n        })\n        .then(res => res.json())\n        .then(carrierData => {\n            return carrierData;\n        })\n        .catch(err => {\n            console.log(err);\n        })\n    },\n    getCarrierInfo(){\n        return fetch(`${config.API_ENDPOINT}/carrier-info`, {\n            method: 'GET',\n            headers: {\n                \"content-type\": \"application/json\",\n                \"Authorization\" : `bearer ${TokenService.getAuthToken()}`\n            }\n        })\n        .then(res => res.json())\n        .then(carrierInfo =>  {\n            return carrierInfo;\n        })\n        .catch(err => {\n            console.log(err);\n        })\n    }\n}\n\nexport default CarrierService;","import React, {Component} from 'react';\nimport AppContext from '../../Contexts/AppContext';\nimport './Logout.css';\nimport TokenService from '../../Services/TokenService';\nimport CarrierServices from '../../Services/CarrierServices';\n\nclass Logout extends Component {\n\n    static contextType = AppContext;\n\n    getCarrierInfoInComponent = async () => {\n        const carrier = await CarrierServices.getCarrierInfo()\n            .then(res => {\n                this.context.setLoggedInCarrier(res);\n                return res;\n            })\n            .catch(error => error);\n        this.setState({\n            carrier: carrier[0]\n        })\n    }\n\n    constructor(props){\n        super(props);\n        this.state = {\n            carrier: {}\n        }\n        this.getCarrierInfoInComponent()\n    }\n\n    state = {\n        carrier: {}\n    }\n\n    handleLogout = () => {\n        this.context.setLoggedIn(false);\n        TokenService.clearAuthToken();\n        this.props.history.push('/');\n    }\n\n    \n\n    render(){\n        return (\n            <div className='Logout width-wrapper'>\n                Welcome, <span className='carrier-name red-text'>\n                    {this.state.carrier.full_name}\n                </span>, <button className='app-link' onClick={() => {this.handleLogout()}}>Logout</button>\n            </div>\n        )\n    }\n}\n\nexport default Logout;","import TokenService from \"./TokenService\";\nimport config from \"../config\";\n\nconst EquipmentService = {\n  getEquipments() {\n    return fetch(`${config.API_ENDPOINT}/equips`, {\n      method: \"GET\",\n      headers: {\n        \"content-type\": \"application/json\",\n        Authorization: `bearer ${TokenService.getAuthToken()}`\n      }\n    })\n      .then(response => response.json())\n      .then(equipments => equipments)\n      .catch(error => {\n        console.log(error);\n      });\n  },\n\n  addNewEquipment(unit_num){\n    return fetch(`${config.API_ENDPOINT}/equips`, {\n      method: \"POST\",\n      headers: {\n        \"content-type\": \"application/json\",\n        Authorization: `bearer ${TokenService.getAuthToken()}`\n      },\n      body: JSON.stringify({\n        unit_num,\n      })\n    })\n      .then(response => response.json())\n      .then(equipments => equipments)\n      .catch(error => {\n        console.log(error);\n      });\n  },\n\n  updateEquipment(unit_num, status, id){\n    return fetch(`${config.API_ENDPOINT}/equips/${id}`, {\n      method: \"PATCH\",\n      headers: {\n        \"content-type\": \"application/json\",\n        Authorization: `bearer ${TokenService.getAuthToken()}`\n      },\n      body: JSON.stringify({\n        unit_num,\n        status,\n      })\n    })\n      .then(response => response.json())\n      .then(equipments => equipments)\n      .catch(error => {\n        console.log(error);\n      });\n  }\n};\n\nexport default EquipmentService;\n","import React from 'react';\nimport { arrayIsEmpty } from './HelperFunctions';\n\nexport function renderAllDriverOptions(drivers){\n    if(!arrayIsEmpty(drivers)){\n        return drivers.map((driver, i) => (\n            <option\n                key={driver.id}\n                value={i}\n                data-id={driver.id}\n                data-name={driver.full_name}\n            >\n                {driver.full_name}\n                {\n                    driver.status === 'inactive' && ` (Inactive Driver)`\n                }\n            </option>\n        ))\n    }\n    return drivers;\n}\n\nexport function getShipmentsWithDriverId(shipments, driverId){\n    // making sure we are mathcing an integer\n    driverId = parseInt(driverId, 10);\n    if(!arrayIsEmpty(shipments) && driverId !== -1){\n        return shipments.filter((shipment) => shipment.driver.id === driverId)\n    }\n    return shipments\n}","import React, {Component} from 'react';\nimport './LoadsPage.css';\nimport LoadListBox from '../../Components/LoadListBox/LoadListBox';\nimport AppContext from '../../Contexts/AppContext';\nimport {\n    renderAllDriverOptions, getShipmentsWithDriverId,\n} from '../../HelperFunctions/LoadsPageHelperFunctions';\nimport Backdrop from '../../Components/Backdrop/Backdrop';\nimport { FilterButton } from '../../Components/Utils/Utils';\n\nclass LoadsPage extends Component {\n\n    static defaultProps = {\n        shipments: [],\n        boxHeader: 'Loads'\n    }\n\n    constructor(props){\n        super(props);\n\n        this.state = {\n            shipments: props.shipments,\n            boxHeader: props.boxHeader,\n            filterMenu: false,\n            selectedDriver: -1\n        }\n    }\n\n    static contextType = AppContext\n\n    handleOpeningFilterMenu = () => {\n        this.setState({\n            filterMenu: !this.state.filterMenu\n        })\n    }\n\n    render(){\n\n        const {shipments} = this.props;\n        const {drivers} = this.context;\n        \n        return (\n            <section className='LoadsPage width-wrapper'>\n                <div className='filters-div'>\n                    <FilterButton onClick={() => {this.handleOpeningFilterMenu()}} />\n                    {\n                        this.state.filterMenu &&\n                        <>\n                            <Backdrop />\n                            <div className='filter-menu'>\n                                <div className='filter'>\n                                    <span className='field-label'>Driver</span>\n                                    <select \n                                        className='select-css'\n                                        value={this.state.selectedDriver}\n                                        onChange={(e) => {\n                                            const i = parseInt(e.target.value, 10)+1;\n                                            const selectedOption = Array.from(e.target.getElementsByTagName('option'))[i];\n                                            const driverId = parseInt(selectedOption.getAttribute('data-id'),10);\n                                            this.setState({\n                                                shipments: getShipmentsWithDriverId(shipments, driverId),\n                                                filterMenu: false,\n                                                boxHeader: `${selectedOption.getAttribute('data-name')} Loads`,\n                                                selectedDriver: e.target.value\n                                            })\n                                        }}\n                                    >\n                                        <option value='-1' data-id='-1' data-name='All'>All Drivers</option>\n                                        {renderAllDriverOptions(drivers)}\n                                    </select>\n                                </div>\n                            </div>\n                        </>\n                    }\n                </div>\n                <LoadListBox \n                    shipments={this.state.shipments} \n                    boxHeader={this.state.boxHeader}\n                />\n            </section>\n        )\n    }\n}\n\nexport default LoadsPage;","import React, { Component } from 'react';\nimport './EquipmentCard.css';\nimport config from '../../config';\nimport AppContext from '../../Contexts/AppContext';\nimport {\n    arrayIsEmpty, objectIsEmpty\n} from '../../HelperFunctions/HelperFunctions';\nimport DriversService from '../../Services/DriversService';\nimport EquipmentsService from '../../Services/EquipmentsService';\nimport {\n    EditButton, DeleteButton, ViewLoadButton\n} from '../../Components/Utils/Utils';\n \nclass EquipmentCard extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            editingMode: false\n        }\n    }\n\n    static contextType = AppContext\n\n    handleDeleteEquipment = (id) => {\n\n        let { equipments } = this.context\n        const { drivers, idleDrivers } = this.context\n        equipments = equipments.map((equipment) => {\n            if(equipment.id === id){\n                EquipmentsService.updateEquipment(equipment.unit_num, 'inactive', equipment.id)\n                equipment.status = 'inactive'\n            }\n            return equipment\n        })\n\n        drivers.map(driver => {\n            if (driver.equipment.id === id) {\n                DriversService.updateEquipment(driver.id, null)\n                driver.equipment = {}\n            }\n            return driver\n        })\n        idleDrivers.map(driver => {\n            if (driver.equipment.id === id) {\n                driver.equipment = {}\n            }\n            return driver\n        })\n\n        this.context.setEquipments(equipments);\n        this.context.setDrivers(drivers);\n        this.context.setIdleDrivers(idleDrivers);\n\n    }\n\n    render() {\n\n        const { equipment } = this.props;\n        const { idleEquipments, shipments } = this.context;\n        const busyEquipment = arrayIsEmpty(idleEquipments.filter((idleEquipment) => idleEquipment.id === equipment.id))\n        let shipmentId = -1;\n        if(busyEquipment && equipment.driver.hasOwnProperty('id')){\n            shipmentId = shipments.filter((shipment) => shipment.equipment.id === equipment.id)[0].id;\n        }\n        \n        return (\n            <div className='EquipmentCard grey-back blue-text'>\n\n                <div className='flex-row'>\n                    <div className='equip-num'>\n                        <h6>Unit Num</h6>\n                        <p>{equipment.unit_num}</p>\n                    </div>\n                    {\n                        !objectIsEmpty(equipment.driver) &&\n                        <div className='equip-driver'>\n                            <h6>Driver</h6>\n                            <p className={equipment.driver.full_name ? '' : 'no-driver'}\n                            >{equipment.driver.full_name ? equipment.driver.full_name : 'No Driver Assigned'}</p>\n                        </div>\n                    }\n                </div>\n                {\n                    shipmentId === -1 \n                    ?\n                    <div className='equipment-buttons flex-row'>\n                        <EditButton to={`${config.BASEPATH}/equipment/edit/${equipment.id}`} className='responsive'/>\n                        <DeleteButton onClick={() => { this.handleDeleteEquipment(equipment.id) }} className='responsive'/>\n                    </div>\n                    :\n                    <div className='equipment-buttons flex-row'>\n                        <span>\n                            Equipment Busy\n                        </span>\n                        <ViewLoadButton to={`${config.BASEPATH}/load/${shipmentId}`} className='responsive'/>\n                    </div>\n                }\n\n\n\n            </div>\n        )\n    }\n}\n\nexport default EquipmentCard;","import React, { Component } from 'react';\nimport './EquipmentsPage.css';\nimport AppContext from '../../Contexts/AppContext';\nimport EquipmentCard from '../../Components/EquipmentCard/EquipmentCard';\n\nclass EquipmentsPage extends Component {\n\n    static contextType = AppContext;\n\n    handleAddEquipment = (e) => {\n        e.preventDefault();\n        console.log(`Equipment Add Submitted`);\n    }\n\n    renderEquipmentList = () => {\n\n        let { equipments } = this.context;\n        equipments = equipments.filter((equipment) => equipment.status === 'active')\n\n        return equipments.map(equip => {\n            return (\n                <li key={equip.id}>\n                    <EquipmentCard equipment={equip} />\n                </li>\n            )\n        })\n    }\n\n    render() {\n        return (\n            <section className='EquipmentPage width-wrapper'>\n                <div className='box'>\n                    <h3 className='box-header blue-back white-text'>Equipment List</h3>\n                    <ul className='equipment-list'>\n                        {this.renderEquipmentList()}\n                    </ul>\n                </div>\n            </section>\n        )\n    }\n}\n\n\nexport default EquipmentsPage;","import React, { Component } from 'react';\nimport './DriversPage.css';\nimport AppContext from '../../Contexts/AppContext';\nimport DriverCard from '../../Components/DriverCard/DriverCard';\n\nclass DriversPage extends Component {\n\n    static contextType = AppContext\n\n\n    renderDrivers = (drivers) => {\n        \n        return drivers.map((driver) => {\n            if(driver.status === 'active'){\n                return (\n                    <li key={driver.id}>\n                        <DriverCard driver={driver} />\n                    </li>\n                )\n            }\n            else{\n                return ''\n            }\n        })\n    }\n\n    render() {\n\n        const { drivers } = this.context\n        \n        // to change background color if viewing specific driver\n        // const { id } = !objectIsEmpty(this.props.match.params) ? this.props.match.params : -1\n\n        return (\n            <section className='DriversPage width-wrapper'>\n                <h4 className='blue-back white-text'>\n                    Drivers List\n                </h4>\n                <ul className='drivers-list'>\n                    {this.renderDrivers(drivers)}\n                </ul>\n            </section>\n        )\n    }\n}\n\n\nexport default DriversPage;","import React, { Component } from 'react';\nimport './DriversDropDown.css'\n\nclass DriversDropDown extends Component {\n    \n    constructor(props){\n        super(props)\n        this.state = {\n            optionsValue: props.defaultValue\n        }\n    }\n    \n    static defaultProps = {\n        drivers: [],\n        defaultValue: 0,\n        className: 'select-css',\n        name: 'driver',\n        id: 'driver'\n    }\n\n    handleChange = (e) => {\n        this.setState({\n            optionsValue: e.target.value\n        }, () => {\n            if(this.props.hasOwnProperty('handleChange')){\n                this.props.handleChange(this.state.optionsValue)\n            }\n        })\n    }\n\n    renderDriverOptions = (drivers) => {\n        if(drivers !== []){\n            return drivers.map((driver, i) => {\n                return (\n                    <option \n                        value={driver.id}\n                        key={i}\n                        defaultValue={true}\n                    >\n                        {driver.full_name}\n                    </option>\n                )\n            })\n        }   \n    }\n\n    render() {\n\n        const { \n            className = 'select-css', \n            drivers = [], \n            name='driver', \n            id='driver'\n        } = this.props;\n\n\n        return (\n            <div className='DriversDropDown'>\n                <select className={className}\n                    name={name}\n                    id={id} \n                    value={this.state.optionsValue} \n                    onChange={(e) => {this.handleChange(e)}}>\n                    <option value='-1'>No Driver</option>\n                    {this.renderDriverOptions(drivers)}    \n                </select>\n            </div>\n        );\n    }\n}\n\nexport default DriversDropDown;","import React, { Component } from 'react';\nimport './EquipmentEditPage.css';\nimport DriversDropDown from '../../Components/DriversDropDown/DriversDropDown';\nimport AppContext from '../../Contexts/AppContext';\nimport {\n    handleGoBack,\n    objectIsEmpty,\n    arrayIsEmpty,\n    removeEquipmentDriver,\n} from '../../HelperFunctions/HelperFunctions';\nimport EquipmentService from '../../Services/EquipmentsService';\nimport DriversService from '../../Services/DriversService';\nimport { GoBackButton } from '../../Components/Utils/Utils';\n\nclass EquipmentEditPage extends Component {\n\n    static defaultProps = {\n        equipments: {},\n        idleDrivers: {},\n        rprops: {},\n    }\n\n    constructor(props) {\n        super(props);\n\n        // setting state so that edit equipment page\n        // already has values in it for the selected equipment to edit\n        // if not done this way , then another Get request had to be made for\n        // getting equipment by id \n        const { equipments, idleDrivers } = props;\n        const { id } = this.props.rprops.match.params;\n        const equipment = equipments.filter(equipment => equipment.id === parseInt(id, 10));\n        let driver = {};\n        let availableDrivers = idleDrivers.filter(driver => objectIsEmpty(driver.equipment))\n        let unitNum = '';\n        let currentDriver = -1;\n        let inIdleQueue = true;\n        if (equipment[0] !== undefined) {\n            driver = equipment[0].driver;\n            unitNum = equipment[0].unit_num;\n\n            // The server after adding serialization is sending in full_name and driver\n            // properties with empty strings so to solve and empty driver populating\n            // in the select statement the below line is as is, if there is a driver.id then\n            // set one else leave it to current driver which is -1\n            currentDriver = driver.id ? driver.id : currentDriver;\n            if (currentDriver !== -1) {\n                availableDrivers.unshift(driver);\n                inIdleQueue = !arrayIsEmpty(idleDrivers.filter((idleDr) => driver.id === idleDr.id));\n            }\n        }\n\n        this.state = {\n            error: '',\n            unitNumError: false,\n            unitNum,\n            equipment,\n            availableDrivers,\n            currentDriver,\n            inIdleQueue,\n        }\n    }\n\n    static contextType = AppContext\n\n    giveEquipment = (driver, equipment) => {\n        DriversService.updateEquipment(driver.id, equipment.id);\n        driver.equipment = {\n            id: equipment.id,\n            unit_num: equipment.unit_num,\n            status: 'active'\n        }\n        return driver;\n    }\n\n    takeAwayEquipment = (driver) => {\n        DriversService.updateEquipment(driver.id, null)\n        driver.equipment = {}\n        return driver;        \n    }\n\n    setDriverForEquipment = (equipment, driver) => {\n        equipment.driver = driver\n        return equipment;\n    }\n\n    removeDriverFromEquipment = (equipment) => {\n        equipment.driver = {}\n        return equipment;\n    }\n\n    changeEquipmentForDriver = (idleDrivers, driver, newDriverId, oldDriverId, equipment) => {\n        if(driver.id === newDriverId && newDriverId !== -1){\n            driver = this.giveEquipment(driver, equipment);\n            idleDrivers.map((oldDriver) => {\n                if(oldDriverId === oldDriver.id){\n                    oldDriver = this.takeAwayEquipment(oldDriver)\n                }\n                return oldDriver;\n            })\n        } else if (driver.id === oldDriverId){ \n            driver = this.takeAwayEquipment(driver)\n        }\n        return driver;\n    }\n\n    // Updates the changes in state and in the database\n    handleEquipmentEdit = (e, equipmentArray) => {\n\n        e.preventDefault();\n        const equipment = equipmentArray[0];\n        const oldDriverId = equipment.driver.id === undefined ? -1 : equipment.driver.id;\n        const newDriverId = this.state.inIdleQueue ? parseInt(e.target['driver'].value, 10) : oldDriverId;\n        const unit_num = e.target['unit-num'].value;\n        const { equipments, idleDrivers, drivers } = this.props\n\n        // Enter changing driver only when they change driver selection\n        if(newDriverId !== oldDriverId){\n            \n            idleDrivers.map((driver) => {\n                driver = this.changeEquipmentForDriver(idleDrivers, driver, newDriverId, oldDriverId, equipment);\n                return driver;\n            })\n\n            drivers.map((driver) => {\n                driver = this.changeEquipmentForDriver(drivers, driver, newDriverId, oldDriverId, equipment);\n                return driver;\n            })\n\n            let removeExecuted = false;\n            equipments.map((changeEquipemnt) => {\n                if(oldDriverId === -1){\n                    changeEquipemnt = this.setDriverForEquipment(equipment, idleDrivers.filter(driver => driver.id === newDriverId)[0])\n                }else {\n\n                    if((newDriverId === changeEquipemnt.driver.id || newDriverId === -1) && !removeExecuted) {\n                        if(changeEquipemnt.id === equipment.id){\n                            changeEquipemnt = removeEquipmentDriver(changeEquipemnt)\n                            removeExecuted = true;\n                        }\n                    }\n                    if(changeEquipemnt.id === equipment.id && newDriverId !== -1){\n                        changeEquipemnt = this.setDriverForEquipment(equipment, idleDrivers.filter(driver => driver.id === newDriverId)[0]);\n                    } \n                }\n                return changeEquipemnt\n            })\n        }\n\n        if (unit_num !== equipment.unit_num) {\n            equipments.map((changeEquipment) => {\n                if (changeEquipment.id === equipment.id) {\n                    changeEquipment.unit_num = unit_num\n                }\n                return changeEquipment\n            });\n\n            idleDrivers.map((driver) => {\n                if(driver.equipment.id === equipment.id){\n                    driver.equipment.unit_num = unit_num\n                }\n                return driver;\n            });\n\n            drivers.map((driver) => {\n                if(driver.equipment.id === equipment.id){\n                    driver.equipment.unit_num = unit_num\n                }\n                return driver;\n            });\n            \n            // call service to update the database\n            EquipmentService.updateEquipment(unit_num, 'active', equipment.id);\n        }\n\n        \n        this.context.setIdleDrivers(idleDrivers);\n        this.context.setEquipments(equipments);\n        this.context.setDrivers(drivers);\n\n        handleGoBack(this.props.rprops.history);\n\n    }\n\n    validateUnitNum = (e) => {\n        const unitNum = e.target.value;\n        this.setState({\n            unitNum\n        })\n        if (unitNum.trim() === '') {\n            this.setState({\n                error: 'Invalid Unit Num',\n                unitNumError: true\n            })\n        } else {\n            this.setState({\n                error: '',\n                unitNumError: false\n            })\n        }\n    }\n\n    render() {\n\n        const { unitNum, equipment, availableDrivers, currentDriver } = this.state\n\n        return (\n            <section className='EquipmentEditPage width-wrapper'>\n\n                <form className='edit-equip' onSubmit={(e) => { this.handleEquipmentEdit(e, equipment) }}>\n                    <fieldset>\n                        <legend className='blue-back white-text'>\n                            <GoBackButton onClick={(e) => { handleGoBack(this.props.rprops.history) }} />\n                            <span>Edit Equipment</span>\n                        </legend>\n                        <div className='flex'>\n                            <label htmlFor='unit-num'>\n                                <span className='input-title'>Unit Num:</span>\n                                <input\n                                    type='text'\n                                    id='unit-num'\n                                    name='unit-num'\n                                    required\n                                    value={unitNum}\n                                    onChange={(e) => { this.validateUnitNum(e) }}\n                                />\n                                {\n                                    this.state.unitNumError &&\n                                    <span className='error'>{this.state.error}</span>\n                                }\n                            </label>\n                            {\n                               this.state.inIdleQueue && \n                               <label htmlFor='driver'>\n                                    <span className='input-title'>Available Drivers</span>\n                                    {\n                                        equipment[0] !== undefined &&\n                                        <DriversDropDown\n                                            name={'driver'}\n                                            id={'driver'}\n                                            drivers={availableDrivers}\n                                            className={'select-css'}\n                                            defaultValue={currentDriver} />\n                                    }\n\n                                </label>\n                            }\n                            <button\n                                className='app-button'\n                                type='submit'\n                            >\n                                Save Changes\n                                </button>\n                        </div>\n                    </fieldset>\n                </form>\n            </section>\n        );\n    }\n}\n\nexport default EquipmentEditPage;","import TokenService from \"./TokenService\";\nimport config from \"../config\";\n\nconst ShipmentsSerivce = {\n    insertShipment(shipment){\n        return fetch(`${config.API_ENDPOINT}/shipments`, {\n            method: \"POST\",\n            headers: {\n              \"content-type\": \"application/json\",\n              Authorization: `bearer ${TokenService.getAuthToken()}`\n            },\n            body: JSON.stringify({\n                rate: shipment.rate || 0.0, \n                status: shipment.status, \n                miles: shipment.miles || 0, \n                driver_id: shipment.driver_id || null, \n                broker: shipment.broker || null,\n                pickup_date: shipment.pickup_date,\n                delivery_date: shipment.delivery_date,\n                pickup_city: shipment.pickup_city,\n                pickup_state: shipment.pickup_state,\n                pickup_zipcode: shipment.pickup_zipcode,\n                delivery_city: shipment.delivery_city,\n                delivery_state: shipment.delivery_state,\n                delivery_zipcode: shipment.delivery_zipcode\n            })\n          })\n            .then(response => response.json())\n            .then(shipment => shipment)\n            .catch(error => {\n              console.log(error);\n            });\n    },\n\n    updateShipment(shipment){\n      return fetch(`${config.API_ENDPOINT}/shipments/${shipment.id}`, {\n        method: \"PATCH\",\n        headers: {\n          \"content-type\": \"application/json\",\n          Authorization: `bearer ${TokenService.getAuthToken()}`\n        },\n        body: JSON.stringify({\n            rate: shipment.rate, \n            status: shipment.status, \n            miles: shipment.miles, \n            driver_id: shipment.driver_id, \n            broker: shipment.broker,\n            pickup_date: shipment.pickup_date,\n            delivery_date: shipment.delivery_date,\n            pickup_city: shipment.pickup_city,\n            pickup_state: shipment.pickup_state,\n            pickup_zipcode: shipment.pickup_zipcode,\n            delivery_city: shipment.delivery_city,\n            delivery_state: shipment.delivery_state,\n            delivery_zipcode: shipment.delivery_zipcode\n        })\n      })\n        .then(response => response.json())\n        .then(shipment => shipment)\n        .catch(error => {\n          console.log(error);\n        });\n    },\n\n    deleteShipment(id){\n      return fetch(`${config.API_ENDPOINT}/shipments/${id}`, {\n        method: \"DELETE\",\n        headers: {\n          \"content-type\": \"application/json\",\n          Authorization: `bearer ${TokenService.getAuthToken()}`\n        }\n      })\n        .then(response => response.json())\n        .then(shipment => shipment)\n        .catch(error => {\n          console.log(error);\n        });\n    }\n}\n\nexport default ShipmentsSerivce;","import React, { Component } from 'react';\nimport './AddLoadPage.css';\nimport {\n    handleGoBack,\n    routeUserTo,\n    formatDate,\n    getAvailableDrivers,\n} from '../../HelperFunctions/HelperFunctions';\nimport {\n    notValidDate,\n    emptySpaces,\n} from '../../HelperFunctions/InputFieldValidations';\nimport DriversDropDown from '../../Components/DriversDropDown/DriversDropDown';\nimport AppContext from '../../Contexts/AppContext';\nimport config from '../../config';\nimport ShipmentsSerivce from '../../Services/ShipmentsService';\nimport {GoBackButton} from '../../Components/Utils/Utils'\n\nclass AddLoadPage extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            hasError: false,\n            availableDrivers: [],\n            error: {\n                dateError: 'Enter Date in correct format \"MM/DD/YYYY\"',\n                pickupDate: false,\n                deliveryDate: false,\n                cityError: 'City is required',\n                pickupCity: false,\n                deliveryCity: false,\n                stateError: 'State is required and must be two characters, Eg. for New York - NY',\n                pickupState: false,\n                deliveryState: false,\n                zipcodeError: 'Zipcode is required',\n                pickupZipcode: false,\n                deliveryZipcode: false,\n            },\n            pickupDate: formatDate(new Date()),\n            deliveryDate: formatDate(new Date()),\n            pickupCity: '',\n            deliveryCity: '',\n            pickupState: '',\n            deliveryState: '',\n            pickupZipcode: '',\n            deliveryZipcode: '',\n            miles: '',\n            rate: '',\n            broker: '',\n        }\n    }\n\n    static contextType = AppContext\n\n    // validation of date, Validates both pickup date and delivery date\n    // *** THIS FUNCTION IS DEPENDENT ON THE NAME PROPERTY OF THE INPUT BOXES ***\n    validateInputDate = (e) => {\n        const date = e.target.value;\n        const { name } = e.target;\n\n        name === 'pickup-date'\n            ? this.setState({ pickupDate: date })\n            : this.setState({ deliveryDate: date });\n\n        if (notValidDate(date)) {\n            name === 'pickup-date'\n                ? this.setState({\n                    error: {\n                        ...this.state.error,\n                        pickupDate: true,\n                    }\n                })\n                : this.setState({\n                    error: {\n                        ...this.state.error,\n                        deliveryDate: true,\n                    }\n                });\n        } else {\n            name === 'pickup-date'\n                ? this.setState({\n                    error: {\n                        ...this.state.error,\n                        pickupDate: false,\n                    }\n                })\n                : this.setState({\n                    error: {\n                        ...this.state.error,\n                        deliveryDate: false,\n                    }\n                });\n        }\n    }\n\n    validateCityInput = (e) => {\n        const city = e.target.value;\n        const { name } = e.target;\n\n        name === 'pickup-city'\n            ? this.setState({ pickupCity: city })\n            : this.setState({ deliveryCity: city });\n\n\n        if (emptySpaces(city)) {\n            name === 'pickup-city'\n                ? this.setState({\n                    error: {\n                        ...this.state.error,\n                        pickupCity: true,\n                    }\n                })\n                : this.setState({\n                    error: {\n                        ...this.state.error,\n                        deliveryCity: true,\n                    }\n                });\n        } else {\n            name === 'pickup-city'\n                ? this.setState({\n                    error: {\n                        ...this.state.error,\n                        pickupCity: false,\n                    }\n                })\n                : this.setState({\n                    error: {\n                        ...this.state.error,\n                        deliveryCity: false,\n                    }\n                });\n        }\n    }\n\n    validateStateInput = (e) => {\n        const state = e.target.value;\n        const { name } = e.target;\n\n        name === 'pickup-state'\n            ? this.setState({ pickupState: state })\n            : this.setState({ deliveryState: state });\n\n\n        if (emptySpaces(state) || state.trim().length !== 2) {\n            name === 'pickup-state'\n                ? this.setState({\n                    error: {\n                        ...this.state.error,\n                        pickupState: true,\n                    }\n                })\n                : this.setState({\n                    error: {\n                        ...this.state.error,\n                        deliveryState: true,\n                    }\n                });\n        } else {\n            name === 'pickup-state'\n                ? this.setState({\n                    error: {\n                        ...this.state.error,\n                        pickupState: false,\n                    }\n                })\n                : this.setState({\n                    error: {\n                        ...this.state.error,\n                        deliveryState: false,\n                    }\n                });\n        }\n    }\n\n    validateZipcodeInput = (e) => {\n        const zipcode = e.target.value;\n        const { name } = e.target;\n\n        name === 'pickup-zipcode'\n            ? this.setState({ pickupZipcode: zipcode })\n            : this.setState({ deliveryZipcode: zipcode });\n\n\n        if (emptySpaces(zipcode)) {\n            name === 'pickup-zipcode'\n                ? this.setState({\n                    error: {\n                        ...this.state.error,\n                        pickupZipcode: true,\n                    }\n                })\n                : this.setState({\n                    error: {\n                        ...this.state.error,\n                        deliveryZipcode: true,\n                    }\n                });\n        } else {\n            name === 'pickup-zipcode'\n                ? this.setState({\n                    error: {\n                        ...this.state.error,\n                        pickupZipcode: false,\n                    }\n                })\n                : this.setState({\n                    error: {\n                        ...this.state.error,\n                        deliveryZipcode: false,\n                    }\n                });\n        }\n    }\n\n    updateIdleDriverQueue = (driverId) => {\n        let { idleDrivers } = this.context;\n        idleDrivers = idleDrivers.filter(driver => driver.id !== driverId);\n        this.context.setIdleDrivers(idleDrivers)\n    }\n\n    handleAddLoad = async (e) => {\n\n        e.preventDefault();\n\n        const broker = e.target['broker'].value.trim() || '';\n        const delivery_warehouse = {\n            city: e.target['delivery-city'].value.trim(),\n            state: e.target['delivery-state'].value.toUpperCase(),\n            zipcode: e.target['delivery-zipcode'].value.trim()\n        };\n        const pickup_warehouse = {\n            city: e.target['pickup-city'].value.trim(),\n            state: e.target['pickup-state'].value.toUpperCase(),\n            zipcode: e.target['pickup-zipcode'].value.trim()\n        };\n        const miles = e.target['miles'].value.trim() || 0;\n        const rate = e.target['rate'].value.trim() || 0;\n        const driverId = parseInt(e.target['driver'].value, 10);\n\n        // getting driver and equipment from drivers array in context\n        let driver = {}\n        let equipment = {}\n        let status = 'un-assigned';\n        if (driverId !== -1) {\n            this.context.drivers.map(contextDriver => {\n                if (contextDriver.id === driverId) {\n                    driver = {\n                        id: driverId,\n                        full_name: contextDriver.full_name,\n                        pay_rate: contextDriver.pay_rate,\n                        status: contextDriver.status\n                    }\n                    equipment = {\n                        id: contextDriver.equipment.id,\n                        status: contextDriver.equipment.status,\n                        unit_num: contextDriver.equipment.unit_num\n                    }\n                }\n                return contextDriver\n            });\n            this.updateIdleDriverQueue(driverId);\n            status = 'dispatched'\n        }\n\n        const pickup_date = e.target['pickup-date'].value;\n        const delivery_date = e.target['delivery-date'].value;\n\n        // the shipment to store in the database\n        let shipmentInDB = {\n            rate,\n            status,\n            miles,\n            driver_id: driverId !== -1 ? driverId : null,\n            broker,\n            pickup_date,\n            delivery_date,\n            pickup_city: pickup_warehouse.city,\n            pickup_state: pickup_warehouse.state,\n            pickup_zipcode: pickup_warehouse.zipcode,\n            delivery_city: delivery_warehouse.city,\n            delivery_state: delivery_warehouse.state,\n            delivery_zipcode: delivery_warehouse.zipcode\n        }\n        // add and get the new shipment with the id\n        shipmentInDB = await ShipmentsSerivce.insertShipment(shipmentInDB)\n\n        // shipment in the format for the front end to display it correctly\n        // and keep all arrays in order.\n        const newShipment = {\n            id: shipmentInDB.id,\n            pickup_date,\n            delivery_date,\n            broker,\n            delivery_warehouse,\n            pickup_warehouse,\n            miles,\n            driver,\n            equipment,\n            rate,\n            status,\n        }\n\n        this.context.setShipments([\n            ...this.context.shipments,\n            newShipment\n        ])\n\n        // handleGoBack(this.props.history);\n        routeUserTo(this.props.history, `${config.BASEPATH}/load/${newShipment.id}`)\n\n    }\n\n    render() {\n        const availableDrivers = getAvailableDrivers(this.context.idleDrivers)\n        const { error } = this.state\n\n        return (\n            <section className='AddLoadPage width-wrapper'>\n                <form className='add-load-form' onSubmit={(e) => { this.handleAddLoad(e) }}>\n                    <fieldset>\n                        <legend className='blue-back white-text'>\n                            <GoBackButton onClick={(e) => { handleGoBack(this.props.history) }} />\n                            <span>Add Load</span>\n                        </legend>\n                        <div className='flex'>\n                            <h4 className='fieldset-sub-title blue-text'>\n                                Pick Up Info\n                            </h4>\n                            <label htmlFor='pickup-date'>\n                                <span className='input-title'>* Date</span>\n                                <input\n                                    type='text'\n                                    id='pickup-date'\n                                    name='pickup-date'\n                                    maxLength='10'\n                                    value={this.state.pickupDate}\n                                    onChange={(e) => { this.validateInputDate(e) }}\n                                    onBlur={(e) => {\n                                        if (e.target.value === '') {\n                                            this.setState({\n                                                pickupDate: formatDate(new Date()),\n                                                error: {\n                                                    ...this.state.error,\n                                                    pickupDate: false\n                                                }\n                                            })\n                                        }\n                                    }}\n                                />\n                                {\n                                    error.pickupDate &&\n                                    <span className='error'>{error.dateError}</span>\n                                }\n                            </label>\n                            <label htmlFor='pickup-city'>\n                                <span className='input-title'>* City</span>\n                                <input\n                                    type='text'\n                                    id='pickup-city'\n                                    name='pickup-city'\n                                    placeholder='Eg. Dallas'\n                                    required\n                                    value={this.state.pickupCity}\n                                    onChange={(e) => { this.validateCityInput(e) }}\n                                />\n                                {\n                                    error.pickupCity &&\n                                    <span className='error'>{error.cityError}</span>\n                                }\n                            </label>\n                            <label htmlFor='pickup-state'>\n                                <span className='input-title'>* State</span>\n                                <input\n                                    type='text'\n                                    placeholder='Eg. TX'\n                                    maxLength='2'\n                                    id='pickup-state'\n                                    name='pickup-state'\n                                    required\n                                    value={this.state.pickupState}\n                                    onChange={(e) => { this.validateStateInput(e) }}\n                                />\n                                {\n                                    this.state.error.pickupState &&\n                                    <span className='error'>{this.state.error.stateError}</span>\n                                }\n                            </label>\n                            <label htmlFor='pickup-zipcode'>\n                                <span className='input-title'>* Zipcode</span>\n                                <input\n                                    type='text'\n                                    id='pickup-zipcode'\n                                    maxLength='10'\n                                    name='pickup-zipcode'\n                                    placeholder='Eg. 75001'\n                                    required\n                                    value={this.state.pickupZipcode}\n                                    onChange={(e) => { this.validateZipcodeInput(e) }}\n                                />\n                                {\n                                    this.state.error.pickupZipcode &&\n                                    <span className='error'>{this.state.error.zipcodeError}</span>\n                                }\n                            </label>\n                            <h4 className='fieldset-sub-title blue-text'>\n                                Delivery Info\n                            </h4>\n                            <label htmlFor='delivery-date'>\n                                <span className='input-title'>* Date</span>\n                                <input\n                                    type='text'\n                                    id='delivery-date'\n                                    name='delivery-date'\n                                    maxLength='10'\n                                    value={this.state.deliveryDate}\n                                    onChange={(e) => { this.validateInputDate(e) }}\n                                    onBlur={(e) => {\n                                        if (e.target.value === '') {\n                                            this.setState({\n                                                deliveryDate: formatDate(new Date()),\n                                                error: {\n                                                    ...this.state.error,\n                                                    deliveryDate: false\n                                                }\n                                            })\n                                        }\n                                    }}\n                                />\n                                {\n                                    this.state.error.deliveryDate &&\n                                    <span className='error'>{this.state.error.dateError}</span>\n                                }\n                            </label>\n                            <label htmlFor='delivery-city'>\n                                <span className='input-title'>* City</span>\n                                <input\n                                    type='text'\n                                    id='delivery-city'\n                                    name='delivery-city'\n                                    placeholder='Eg. Indianapolis'\n                                    required\n                                    value={this.state.deliveryCity}\n                                    onChange={(e) => { this.validateCityInput(e) }}\n                                />\n                                {\n                                    this.state.error.deliveryCity &&\n                                    <span className='error'>{this.state.error.cityError}</span>\n                                }\n                            </label>\n                            <label htmlFor='delivery-state'>\n                                <span className='input-title'>* State</span>\n                                <input\n                                    type='text'\n                                    placeholder='Eg. IN'\n                                    maxLength='2'\n                                    id='delivery-state'\n                                    name='delivery-state'\n                                    required\n                                    value={this.state.deliveryState}\n                                    onChange={(e) => { this.validateStateInput(e) }}\n                                />\n                                {\n                                    this.state.error.deliveryState &&\n                                    <span className='error'>{this.state.error.stateError}</span>\n                                }\n                            </label>\n                            <label htmlFor='delivery-zipcode'>\n                                <span className='input-title'>* Zipcode</span>\n                                <input\n                                    type='text'\n                                    id='delivery-zipcode'\n                                    name='delivery-zipcode'\n                                    maxLength='10'\n                                    placeholder='Eg. 46225'\n                                    required\n                                    value={this.state.deliveryZipcode}\n                                    onChange={(e) => { this.validateZipcodeInput(e) }}\n                                />\n                                {\n                                    this.state.error.deliveryZipcode &&\n                                    <span className='error'>{this.state.error.zipcodeError}</span>\n                                }\n                            </label>\n                            <h4 className='fieldset-sub-title blue-text'>\n                                Additional Info\n                            </h4>\n                            <label htmlFor='miles'>\n                                <span className='input-title'>Miles</span>\n                                <input\n                                    type='number'\n                                    min='0'\n                                    id='miles'\n                                    name='miles'\n                                />\n                                {\n                                    // this.state.unitNumError &&\n                                    // <span className='error'>{this.state.error}</span>\n                                }\n                            </label>\n                            <label htmlFor='rate'>\n                                <span className='input-title'>Rate</span>\n                                <input\n                                    type='number'\n                                    min='0'\n                                    id='rate'\n                                    name='rate'\n                                />\n                                {\n                                    // this.state.unitNumError &&\n                                    // <span className='error'>{this.state.error}</span>\n                                }\n                            </label>\n                            <label htmlFor='broker'>\n                                <span className='input-title'>Broker</span>\n                                <input\n                                    type='text'\n                                    id='broker'\n                                    name='broker'\n                                />\n                            </label>\n                            <label htmlFor='driver'>\n                                <span className='input-title'>Assign Driver</span>\n                                <DriversDropDown name='driver' id='driver' drivers={availableDrivers} className='select-css' />\n                                {\n                                    // incorrectPassword &&\n                                    // <span className='error'>{error}</span>\n                                }\n                            </label>\n                            {\n                                !(\n                                    error.pickupCity ||\n                                    error.deliveryCity ||\n                                    error.pickupDate ||\n                                    error.deliveryDate ||\n                                    error.pickupState ||\n                                    error.deliveryState ||\n                                    error.pickupZipcode ||\n                                    error.deliveryZipcode\n                                )\n                                    ?\n                                    <button\n                                        className='app-button'\n                                        type='submit'\n                                    >\n                                        Add New Load\n                                    </button>\n                                    :\n                                    <button\n                                        className='app-button'\n                                        type='submit'\n                                        disabled\n                                    >\n                                        Add New Load\n                                    </button>\n                            }\n\n                        </div>\n                    </fieldset>\n                </form>\n            </section>\n        );\n    }\n}\n\nexport default AddLoadPage;","import React, { Component } from 'react';\nimport './LoadByIdPage.css';\nimport AppContext from '../../Contexts/AppContext';\nimport {\n    arrayIsEmpty,\n    objectIsEmpty,\n    renderLoadStatusOptions,\n    formatCurrency,\n    getAvailableDrivers,\n    isNotUndefined,\n    routeUserTo,\n    handleGoBack\n} from '../../HelperFunctions/HelperFunctions';\nimport DriversDropDown from '../../Components/DriversDropDown/DriversDropDown';\nimport config from '../../config';\nimport ShipmentsService from '../../Services/ShipmentsService';\nimport { GoBackButton, EditButton, DeleteButton } from '../../Components/Utils/Utils';\n\nclass LoadByIdPage extends Component {\n\n    static defaultProps = {\n        rprops: {},\n        shipments: [],\n        idleDrivers: []\n    }\n\n    static contextType = AppContext\n\n    constructor(props) {\n        super(props);\n\n        const id = parseInt(props.rprops.match.params.id, 10)\n        const { shipments } = props;\n        let shipment = {};\n        let status = '';\n        let avaialableDrivers = [];\n        let driverAssigned = -1;\n        if (!arrayIsEmpty(shipments)) {\n            shipment = shipments.filter(shipment => shipment.id === id)[0];\n            status = shipment.status\n            if (shipment.status === 'un-assigned') {\n                avaialableDrivers = getAvailableDrivers(props.idleDrivers)\n                driverAssigned = isNotUndefined(avaialableDrivers[0]) ? avaialableDrivers[0].id : -1\n            }\n        }\n        this.state = {\n            shipment,\n            status,\n            avaialableDrivers,\n            driverAssigned,\n            completedShipment: status === 'completed' ? true : false\n        }\n    }\n\n    // remove drivers when status is changed to un-assigned\n    removeDriverAndEquipmentFromShipment = (shipment) => {\n\n        this.sendDriverToIdleDrivers(shipment);\n\n        shipment.driver = {}\n        shipment.equipment = {}\n\n        return shipment;\n    }\n\n    sendDriverToIdleDrivers = (shipment) => {\n        const {idleDrivers} = this.context\n        const driver = {\n            ...shipment.driver,\n            pay_rate: shipment.driver.pay_rate.toString(), // converting to string to make sure all objects are of the same data type\n            equipment: shipment.equipment\n        }\n\n        this.context.setIdleDrivers([\n            ...idleDrivers,\n            driver\n        ])\n    }\n\n    handleChangeLoadStatus = (e) => {\n        e.preventDefault();\n\n        const { status } = this.state;\n        this.setState({\n            shipment: {\n                ...this.state.shipment,\n                status\n            }\n        }, () => {\n            const { shipment } = this.state;\n            let { shipments } = this.props;\n\n            ShipmentsService.updateShipment({id: shipment.id, status})\n            shipments = shipments.map((propShipment) => {\n                if (propShipment.id === shipment.id) {\n                    propShipment.status = status\n                    if (status === 'un-assigned') {\n                        propShipment = this.removeDriverAndEquipmentFromShipment(propShipment);\n                        // update shipment by setting driver_id to null and status to un-assigned\n                        ShipmentsService.updateShipment({id: shipment.id, driver_id: null})\n                    }\n                    if(status === 'completed'){\n                        this.setState({\n                            completedShipment: true\n                        })\n                        this.sendDriverToIdleDrivers(propShipment);\n                    }\n                }\n                return propShipment\n            })\n            this.context.setShipments(shipments);\n        })\n    }\n\n    handleAssignDriver = (e) => {\n        e.preventDefault();\n        let { shipment, driverAssigned } = this.state;\n        let { idleDrivers, shipments } = this.props;\n\n        let driver = {};\n        let equipment = {};\n\n        idleDrivers = idleDrivers.map((idleDriver) => {\n            if (idleDriver.id === driverAssigned) {\n                driver = {\n                    id: driverAssigned,\n                    full_name: idleDriver.full_name,\n                    pay_rate: idleDriver.pay_rate,\n                    status: idleDriver.status\n                }\n                equipment = {\n                    id: idleDriver.equipment.id,\n                    status: idleDriver.equipment.status,\n                    unit_num: idleDriver.equipment.unit_num\n                }\n            }\n            return idleDriver;\n        })\n        idleDrivers = idleDrivers.filter((idleDriver) => idleDriver.id !== driverAssigned);\n\n        shipments = shipments.map((propShipment) => {\n            if (propShipment.id === shipment.id) {\n                propShipment = {\n                    ...propShipment,\n                    driver,\n                    equipment,\n                    status: 'dispatched'\n                }\n            }\n            return propShipment\n        })\n\n        // update shipment in the database\n        ShipmentsService.updateShipment({id: shipment.id ,driver_id: driverAssigned, status: 'dispatched'})\n\n        this.setState({\n            shipment: {\n                ...this.state.shipment,\n                status: 'dispatched'\n            },\n            status: 'dispatched',\n            avaialableDrivers: idleDrivers,\n            driverAssigned: -1\n        })\n\n        this.context.setIdleDrivers(idleDrivers);\n        this.context.setShipments(shipments);\n\n    }\n\n    onDriverDropDownChange = (id) => {\n        this.setState({\n            driverAssigned: parseInt(id, 10)\n        })\n    }\n\n    handleShipmentDelete = (shipmentId) => {\n        \n        let {shipments, idleDrivers} = this.context\n\n        // if shipment has driver, send him to idle driver queue\n        const shipmentToDelete = shipments.filter((shipment) => shipment.id === shipmentId)[0];\n\n        let driver = {};\n        if(!objectIsEmpty(shipmentToDelete.driver)){\n            driver = {\n                ...shipmentToDelete.driver,\n                equipment: {\n                    ...shipmentToDelete.equipment,\n                }\n            }\n\n            idleDrivers = [\n                ...idleDrivers,\n                driver\n            ]            \n        }\n\n        shipments = shipments.filter((shipment) => shipment.id !== shipmentId);\n\n        // remove shipment from the database\n        ShipmentsService.deleteShipment(shipmentId);\n\n        this.context.setIdleDrivers(idleDrivers);\n        this.context.setShipments(shipments);\n        routeUserTo(this.props.rprops.history, '/');\n\n    }\n\n    // render the load status only when reuired and do it always\n    renderUpdateLoadStatusBox = (shipment) => {\n        return (\n            <form onSubmit={(e) => { this.handleChangeLoadStatus(e) }}>\n                <fieldset>\n                <legend><h6><label htmlFor='status'>Status</label></h6></legend>\n                {\n                    <select\n                        className='select-css'\n                        name='status'\n                        id='status'\n                        value={this.state.status}\n                        onChange={(e) => { this.setState({ status: e.target.value }) }}>\n                        {\n                            renderLoadStatusOptions(this.context.loadStatus)\n                        }\n                    </select>\n                }                \n                <button className='app-button' disabled={this.state.status === shipment.status}>\n                    Change Status\n                </button>\n            </fieldset>\n        </form>\n                \n        )\n    }\n\n    \n\n    render() {\n\n        const { shipment } = this.state\n        let driverPayout = 0;\n        if (!objectIsEmpty(shipment)) {\n            driverPayout = shipment.driver.pay_rate * shipment.miles;\n        }\n\n        return (\n            !objectIsEmpty(shipment) ?\n                <section className='LoadByIdPage width-wrapper'>\n                    <div className='load-header'>\n                        <GoBackButton onClick={() => {handleGoBack(this.props.rprops.history)}} className='GoBackButton responsive'>\n                            <span>Back</span>\n                        </GoBackButton>\n                        <span>Load # {shipment.id}</span>\n                        <div className='flex-row'>\n                            <EditButton to={`${config.BASEPATH}/load/edit/${shipment.id}`} className='small' />\n                            <DeleteButton onClick={() => {this.handleShipmentDelete(shipment.id)}} className='small' />\n                        </div>\n                    </div>\n                    <div className='flex-row'>\n                        <div className='pick-up-info box-style'>\n                            <h3>Pick Up Info</h3>\n                            <div className='pickup info-wrapper'>\n                                <div className='pickup info date'>\n                                    <h6>Date</h6>\n                                    <p>{shipment.pickup_date}</p>\n                                </div>\n                                <div className='pickup info city'>\n                                    <h6>City, ST</h6>\n                                    <p>{shipment.pickup_warehouse.city}, {shipment.pickup_warehouse.state}</p>\n                                </div>\n                                <div className='pickup info state'>\n                                    <h6>Zipcode</h6>\n                                    <p>{shipment.pickup_warehouse.zipcode}</p>\n                                </div>\n                            </div>\n                        </div>\n                        <div className='delivery-info box-style'>\n                            <h3>Delivery Info</h3>\n                            <div className='delivery info-wrapper'>\n                                <div className='delivery info'>\n                                    <h6>Delivery Date</h6>\n                                    <p>{shipment.delivery_date}</p>\n                                </div>\n                                <div className='delivery info city'>\n                                    <h6>City, ST</h6>\n                                    <p>{shipment.delivery_warehouse.city}, {shipment.delivery_warehouse.state}</p>\n                                </div>\n                                <div className='delivery info state'>\n                                    <h6>Zipcode</h6>\n                                    <p>{shipment.delivery_warehouse.zipcode}</p>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    <div className='additional-info box-style'>\n                        <h3>Additional Info</h3>\n                        <div className='flex-row'>\n                            <div className='additional-info info-wrapper'>\n                                <div className='additional-info info'>\n                                    <h6>Miles</h6>\n                                    <p>{shipment.miles}</p>\n                                </div>\n                                <div className='additional-info info city'>\n                                    <h6>Rate</h6>\n                                    <p className='red-text'>{formatCurrency(shipment.rate)}</p>\n                                </div>\n                                <div className='additional-info info state'>\n                                    <h6>Broker</h6>\n                                    <p>{shipment.broker}</p>\n                                </div>\n                            </div>\n                            <div className='additional-info change-status'>\n                                <div className='additional-info info'>\n                                    {\n                                        (shipment.status !== 'un-assigned' && !this.state.completedShipment)\n                                        &&\n                                        this.renderUpdateLoadStatusBox(shipment)\n                                    }\n                                    {\n                                        shipment.status === 'un-assigned' &&\n                                        <div className='shipment-status'>\n                                            <h6>Status</h6>\n                                            <span>No Driver Assigned</span>\n                                        </div>\n                                    }\n                                    {\n                                        this.state.completedShipment &&\n                                        <div className='shipment-status'>\n                                            <h6>Status</h6>\n                                            <span>Shipment Delivered</span>\n                                        </div>\n                                    }\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    {\n                        shipment.status !== 'un-assigned'\n                            ?\n                            <div className='driver-info box-style'>\n                                <h3>Driver Info</h3>\n                                <div className='flex-row'>\n\n                                    <div className='additional-info info-wrapper'>\n                                        <div className='additional-info info'>\n                                            <h6>Driver</h6>\n                                            <p>{shipment.driver.full_name}</p>\n                                        </div>\n                                        <div className='additional-info info city'>\n                                            <h6>Pay per Mile</h6>\n                                            <p>{formatCurrency(shipment.driver.pay_rate)}</p>\n                                        </div>\n                                        <div className='additional-info info'>\n                                            <h6>Equipment #</h6>\n                                            <p>{shipment.equipment.unit_num}</p>\n                                        </div>\n                                    </div>\n                                    <div className='additional-info info-wrapper'>\n                                        <div className='additional-info info state'>\n                                            <h6>Drvier Payout</h6>\n                                            <p className='red-text'>{formatCurrency(driverPayout)}</p>\n                                        </div>\n                                        <div className='additional-info info'>\n                                            <h6>Load Balance Amount <br />\n                                                ( rate - driver payout )\n                                            </h6>\n                                            <p className='green-text'>{formatCurrency(shipment.rate - driverPayout)}</p>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                            :\n                            <div className='driver-info box-style'>\n                                <h3>Assign Driver</h3>\n                                <div className='assign-driver'>\n                                    <form className='assign-driver-form' onSubmit={(e) => { this.handleAssignDriver(e) }}>\n                                        <fieldset>\n                                            <div className='assign-driver-fields blue-text'>\n                                                <h6>Available Drivers</h6>\n                                                <DriversDropDown\n                                                    drivers={this.state.avaialableDrivers}\n                                                    defaultValue={this.state.driverAssigned}\n                                                    handleChange={(id) => { this.onDriverDropDownChange(id) }}\n                                                />\n                                                {\n                                                    this.state.driverAssigned === -1\n                                                        ?\n                                                        <button className='app-button' type='submit' disabled>Assign</button>\n                                                        :\n                                                        <button className='app-button' type='submit'>Assign</button>\n                                                }\n\n                                            </div>\n                                        </fieldset>\n                                    </form>\n                                </div>\n                            </div>\n                    }\n                </section>\n                :\n                <></>\n        );\n    }\n}\n\nexport default LoadByIdPage;","import React, { Component } from 'react';\nimport './AddDriverPage.css';\nimport {\n    handleGoBack,\n    routeUserTo,\n    renderEquipmentOptions,\n} from '../../HelperFunctions/HelperFunctions';\nimport AppContext from '../../Contexts/AppContext';\nimport config from '../../config';\nimport { isNotValidDriverName, isNotValidPay } from '../../HelperFunctions/InputFieldValidations';\nimport DriversService from '../../Services/DriversService';\nimport {GoBackButton} from '../../Components/Utils/Utils';\n\nclass AddDriverPage extends Component {\n\n    static defaultProps = {\n        rprops: {},\n        equipments: [],\n    }\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            hasError: false,\n            availableEquipments: [],\n            error: {\n                driverNameError: 'Driver name is required',\n                driverName: false,\n                driverPayError: 'Driver pay cannot have characters in it',\n                driverPay: false,\n            },\n            full_name: '',\n            pay_rate: 0.0,\n            equipment_id: -1,\n        }\n    }\n\n    static contextType = AppContext\n\n    validateDriverName = (full_name) => {\n        const isNotValid = isNotValidDriverName(full_name)\n        this.setState({\n            full_name\n        })\n        if(isNotValid){\n            this.setState({\n                error: {\n                    ...this.state.error,\n                    driverName: true,\n                    driverNameError: isNotValid\n                }\n            })\n        }else{\n            this.setState({\n                error: {\n                    ...this.state.error,\n                    driverName: false,\n                    driverNameError: ''\n                }\n            })\n        }\n    }\n\n    validatePayRate = (pay_rate) => {\n        const isNotValid = isNotValidPay(pay_rate)\n        this.setState({\n            pay_rate\n        })\n        if(isNotValid){\n            this.setState({\n                error: {\n                    ...this.state.error,\n                    driverPay: true,\n                    driverPayError: isNotValid\n                }\n            })\n        }else{\n            this.setState({\n                error: {\n                    ...this.state.error,\n                    driverPay: false,\n                    driverPayError: ''\n                }\n            })\n        }\n    }\n\n    updateIdleDriverQueue = (driver) => {\n        let { idleDrivers } = this.context;\n        idleDrivers = [\n            ...idleDrivers,\n            driver\n        ]\n        this.context.setIdleDrivers(idleDrivers)\n    }\n\n    handleAddDriver = async (e) => {\n\n        e.preventDefault();\n        const full_name = e.target['full_name'].value;\n        const pay_rate = e.target['pay_rate'].value;\n        let equipment_id = parseInt(e.target['equipment_id'].value, 10);\n\n        let dbDriver = {\n            full_name,\n            pay_rate,\n            equipment_id: equipment_id !== -1 ? equipment_id : null\n        }\n\n        dbDriver = await DriversService.addDriver(dbDriver)\n\n        let {drivers, idleDrivers, equipments} = this.context\n\n        let driver = {\n            id: dbDriver.id,\n            full_name,\n            pay_rate,\n            status: 'active'\n        }\n        \n        let equipment = {}\n        if(equipment_id !== -1){\n\n            equipments = equipments.map((contextEquipment) => {\n                if(contextEquipment.id === equipment_id){\n                    contextEquipment.driver = driver\n                    equipment = {\n                        id: contextEquipment.id,\n                        unit_num: contextEquipment.unit_num,\n                        status: contextEquipment.status\n                    }\n                }\n                return contextEquipment\n            });\n        }\n\n        driver = {\n            ...driver,\n            equipment\n        }\n\n        // add new driver to all the drivers\n        drivers = [\n            ...drivers,\n            driver\n        ]\n\n        // adding new driver to the idle driver queue\n        idleDrivers = [\n            ...idleDrivers,\n            driver\n        ]\n\n        this.context.setDrivers(drivers);\n        this.context.setIdleDrivers(idleDrivers);\n        this.context.setEquipments(equipments);\n\n        routeUserTo(this.props.rprops.history, `${config.BASEPATH}/drivers`)\n    }\n\n    render() {\n\n        const { error } = this.state\n        const availableEquipments = this.props.equipments.filter((equipment) => !equipment.driver.hasOwnProperty('id') && equipment.status === 'active')\n\n        return (\n            <section className='AddDriverPage width-wrapper'>\n                <form className='add-load-form' onSubmit={(e) => { this.handleAddDriver(e) }}>\n                    <fieldset>\n                        <legend className='blue-back white-text'>\n                            <GoBackButton onClick={(e) => { handleGoBack(this.props.rprops.history) }} />\n                            <span>Add Driver</span>\n                        </legend>\n                        <div className='flex'>\n                            <label htmlFor='full_name'>\n                                <span className='input-title'>* driver name</span>\n                                <input\n                                    type='text'\n                                    id='full_name'\n                                    name='full_name'\n                                    placeholder='Eg. John Doe'\n                                    value={this.state.full_name}\n                                    onChange={(e) => { this.validateDriverName(e.target.value) }}\n                                    required\n                                />\n                                {\n                                    error.driverName &&\n                                    <span className='error'>{error.driverNameError}</span>\n                                }\n                            </label>\n                            <label htmlFor='pay_rate'>\n                                <span className='input-title'>salary Per mile</span>\n                                <input\n                                    type='text'\n                                    id='pay_rate'\n                                    name='pay_rate'\n                                    min='0'\n                                    placeholder='Eg. 0.43'\n                                    value={this.state.pay_rate}\n                                    onChange={(e) => { this.validatePayRate(e.target.value) }}\n                                    onBlur={(e) => {\n                                        if(e.target.value.trim() === ''){\n                                            this.setState({\n                                                pay_rate: 0.0,\n                                                error: {\n                                                    ...this.state.error,\n                                                    driverPay: false,\n                                                    driverPayError: ''\n                                                }\n                                            })\n                                        }\n                                    }}\n                                />\n                                {\n                                    error.driverPay &&\n                                    <span className='error'>{error.driverPayError}</span>\n                                }\n                            </label>\n                            <label htmlFor='delivery-zipcode'>\n                                <span className='input-title'>Available Equipments</span>\n                                <select className='select-css' \n                                    name='equipment_id' \n                                    id='equipment_id'\n                                    value={this.state.equipment_id}\n                                    onChange={(e) => {this.setState({equipment_id: e.target.value})}}\n                                >\n                                    <option value='-1'>No Equipment</option>\n                                    {renderEquipmentOptions(availableEquipments)}\n                                </select>\n                                {\n                                    this.state.error.deliveryZipcode &&\n                                    <span className='error'>{this.state.error.zipcodeError}</span>\n                                }\n                            </label>\n                            {\n                                !(\n                                    error.driverName ||\n                                    error.driverPay\n                                )\n                                    ?\n                                    <button\n                                        className='app-button'\n                                        type='submit'\n                                    >\n                                        Add New Driver\n                                    </button>\n                                    :\n                                    <button\n                                        className='app-button'\n                                        type='submit'\n                                        disabled\n                                    >\n                                        Add New Driver\n                                    </button>\n                            }\n\n                        </div>\n                    </fieldset>\n                </form>\n            </section>\n        );\n    }\n}\n\nexport default AddDriverPage;","import React, { Component } from 'react';\nimport './AddEquipmentPage.css';\nimport {\n    handleGoBack,\n    routeUserTo,\n    renderDriverOptions,\n    objectIsEmpty,\n} from '../../HelperFunctions/HelperFunctions';\nimport AppContext from '../../Contexts/AppContext';\nimport config from '../../config';\nimport { emptySpaces } from '../../HelperFunctions/InputFieldValidations';\nimport EquipmentService from '../../Services/EquipmentsService';\nimport DriversService from '../../Services/DriversService';\nimport { GoBackButton } from '../../Components/Utils/Utils';\n\nclass AddEquipmentPage extends Component {\n\n    static defaultProps = {\n        rprops: {},\n        drivers: [],\n    }\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            availableDrivers: [],\n            error: {\n                equipmentNumError: 'Equipment number is required',\n                equipmentNum: false,\n            },\n            unit_num: '',\n            driver_id: -1,\n        }\n    }\n\n    static contextType = AppContext\n\n    validateUnitNumField = (unit_num) => {\n        this.setState({\n            unit_num\n        })\n        if(emptySpaces(unit_num)){\n            this.setState({\n                hasError: true,\n                error: {\n                    equipmentNumError: 'Equipment number is required',\n                    equipmentNum: true,\n                }\n            })\n        }else{\n            this.setState({\n                hasError: false,\n                error: {\n                    equipmentNumError: '',\n                    equipmentNum: false,\n                }\n            })\n        }\n    }\n\n    updateIdleDriverQueue = (driver) => {\n        let { idleDrivers } = this.context;\n        idleDrivers = [\n            ...idleDrivers,\n            driver\n        ]\n        this.context.setIdleDrivers(idleDrivers)\n    }\n\n    handleAddEquipment = async (e) => {\n\n        e.preventDefault();\n\n        const unit_num = e.target['unit_num'].value;\n        const driver_id = parseInt(e.target['driver_id'].value,10);\n\n        // Add Equipment to the db\n        const dbEquipment = await EquipmentService.addNewEquipment(unit_num);        \n\n        let equipment = {\n            unit_num: dbEquipment.unit_num,\n            id: dbEquipment.id,\n            status: 'active'\n        }\n\n        let driver = {}\n        let {equipments, drivers, idleDrivers} = this.context\n\n        if(driver_id !== -1){\n\n            // update driver to reference equipment in the db\n            DriversService.updateEquipment(driver_id, equipment.id);\n\n            drivers = drivers.map((contextDriver) => {\n                if(contextDriver.id === driver_id){\n                    contextDriver.equipment = equipment\n                    driver = {\n                        id: contextDriver.id,\n                        full_name: contextDriver.full_name,\n                        pay_rate: contextDriver.pay_rate,\n                        status: 'active',\n                    }\n                }\n                return contextDriver;\n            })\n            \n            idleDrivers = idleDrivers.map((idleDriver) => {\n                if(idleDriver.id === driver_id){\n                    idleDriver.equipment = equipment\n                }\n                return idleDriver;\n            })\n        } else {\n            driver = {\n                full_name: '',\n                pay_rate: ''\n            }\n        }\n\n        // adding driver to the equipment \n        equipment = {\n            ...equipment,\n            driver,\n        }\n\n        // adding new equipment to all equipments array\n        equipments = [\n            ...equipments,\n            equipment\n        ]\n        \n        this.context.setDrivers(drivers);\n        this.context.setIdleDrivers(idleDrivers);\n        this.context.setEquipments(equipments);\n        routeUserTo(this.props.rprops.history, `${config.BASEPATH}/equipments`)\n    }\n\n    render() {\n\n        const { error } = this.state\n        const availableDrivers = this.props.drivers.filter((driver) => objectIsEmpty(driver.equipment) && driver.status === 'active')\n\n        return (\n            <section className='AddEquipmentPage width-wrapper'>\n                <form className='add-load-form' onSubmit={(e) => { this.handleAddEquipment(e) }}>\n                    <fieldset>\n                        <legend className='blue-back white-text'>\n                            <GoBackButton onClick={(e) => { handleGoBack(this.props.rprops.history) }} />\n                            <span>Add Equipment</span>\n                        </legend>\n                        <div className='flex'>\n                            <label htmlFor='unit_num'>\n                                <span className='input-title'>* Equipment Number</span>\n                                <input\n                                    type='text'\n                                    id='unit_num'\n                                    name='unit_num'\n                                    placeholder='Eg. A 101'\n                                    value={this.state.unit_num}\n                                    onChange={(e) => { this.validateUnitNumField(e.target.value) }}\n                                    required\n                                />\n                                {\n                                    error.equipmentNum &&\n                                    <span className='error'>{error.equipmentNumError}</span>\n                                }\n                            </label>\n                            <label htmlFor='driver_id'>\n                                <span className='input-title'>Available Drivers</span>\n                                <select className='select-css' \n                                    name='driver_id' \n                                    id='driver_id'\n                                    value={this.state.driver_id}\n                                    onChange={(e) => {this.setState({driver_id: e.target.value})}}\n                                >\n                                    <option value='-1'>No Driver</option>\n                                    {renderDriverOptions(availableDrivers)}\n                                </select>\n                                \n                            </label>\n                            {\n                                !error.equipmentNum\n                                    ?\n                                    <button\n                                        className='app-button'\n                                        type='submit'\n                                    >\n                                        Add New Equipment\n                                    </button>\n                                    :\n                                    <button\n                                        className='app-button'\n                                        type='submit'\n                                        disabled\n                                    >\n                                        Add New Equipment\n                                    </button>\n                            }\n\n                        </div>\n                    </fieldset>\n                </form>\n            </section>\n        );\n    }\n}\n\nexport default AddEquipmentPage;","import React, { Component } from 'react';\nimport './DriverEditPage.css';\nimport AppContext from '../../Contexts/AppContext';\nimport {\n    handleGoBack,\n    objectIsEmpty,\n    renderEquipmentOptions,\n    routeUserTo,\n} from '../../HelperFunctions/HelperFunctions';\nimport { isNotValidDriverName, isNotValidPay } from '../../HelperFunctions/InputFieldValidations';\nimport config from '../../config';\nimport DriversSerivce from '../../Services/DriversService';\nimport {GoBackButton} from '../../Components/Utils/Utils';\n\nclass DriverEditPage extends Component {\n\n    static defaultProps = {\n        equipments: {},\n        idleDrivers: {},\n        rprops: {},\n    }\n\n    constructor(props) {\n        super(props);\n\n        // setting state so that edit equipment page\n        // already has values in it for the selected equipment to edit\n        // if not done this way , then another Get request had to be made for\n        // getting equipment by id \n        let full_name = '';\n        let pay_rate= '';\n        let equipment_id = -1;\n        const driver_id = parseInt(this.props.rprops.match.params.id, 10)\n        let driver = this.props.drivers.filter((driver) => driver.id === driver_id)[0] || {};\n        \n        if(!objectIsEmpty(driver)){\n            full_name = driver.full_name;\n            pay_rate = driver.pay_rate;\n            equipment_id = !objectIsEmpty(driver.equipment) ? driver.equipment.id : -1;\n        }\n\n        let availableEquipments = [];\n        availableEquipments = this.props.equipments.filter((equipment) => !equipment.driver.hasOwnProperty('id') && equipment.status === 'active')\n        if(equipment_id !== -1){\n            const currentEquipment = this.props.equipments.filter((propsEquipment) => propsEquipment.id === equipment_id)[0]\n            availableEquipments = [\n                currentEquipment,\n                ...availableEquipments\n            ]\n            // console.log(currentEquipment);\n        }\n\n        this.state = {\n            error: {\n                driverNameError: '',\n                driverName: false,\n                driverPayError: '',\n                driverPay: false,\n            },\n            availableEquipments,\n            driver,\n            full_name,\n            pay_rate,\n            equipment_id,\n        }\n    }\n\n    static contextType = AppContext\n\n    validateDriverName = (full_name) => {\n        const isNotValid = isNotValidDriverName(full_name)\n        this.setState({\n            full_name\n        })\n        if(isNotValid){\n            this.setState({\n                error: {\n                    ...this.state.error,\n                    driverName: true,\n                    driverNameError: isNotValid\n                }\n            })\n        }else{\n            this.setState({\n                error: {\n                    ...this.state.error,\n                    driverName: false,\n                    driverNameError: ''\n                }\n            })\n        }\n    }\n\n    validatePayRate = (pay_rate) => {\n        const isNotValid = isNotValidPay(pay_rate)\n        this.setState({\n            pay_rate\n        })\n        if(isNotValid){\n            this.setState({\n                error: {\n                    ...this.state.error,\n                    driverPay: true,\n                    driverPayError: isNotValid\n                }\n            })\n        }else{\n            this.setState({\n                error: {\n                    ...this.state.error,\n                    driverPay: false,\n                    driverPayError: ''\n                }\n            })\n        }\n    }\n\n    changeEquipment = (drivers, driverToChange, equipment) => {\n        const driversArray = drivers.map((driver) => {\n            if(driver.id === driverToChange.id){\n                driver.equipment = equipment\n            }\n            return driver\n        }) \n        return driversArray;\n    }\n\n    makeDriverChanges = (drivers, driverToChange, changes) => {\n        const driversArray = drivers.map((driver) => {\n            if(driver.id === driverToChange.id){\n                driver = {\n                    ...driver,\n                    full_name: changes.full_name,\n                    pay_rate: changes.pay_rate\n                }\n            }\n            return driver;\n        })\n        return driversArray;\n    }\n\n    handleEditDriver = (e, changeDriver) => {\n\n        e.preventDefault();\n\n        const full_name = e.target['full_name'].value\n        const pay_rate = e.target['pay_rate'].value\n        const newEquipmentId = parseInt(e.target['equipment_id'].value)\n        const oldEquipmentId = !objectIsEmpty(changeDriver.equipment) ? changeDriver.equipment.id : -1;\n\n        let {drivers, idleDrivers, equipments} = this.context\n        let newEquipment= {};\n\n        if(newEquipmentId !== oldEquipmentId){\n\n            newEquipment = newEquipmentId !== -1 ? equipments.filter((equipment) => equipment.id === newEquipmentId)[0] : {};\n            newEquipment = !objectIsEmpty(newEquipment) \n                ?\n                {\n                    id: newEquipment.id,\n                    unit_num: newEquipment.unit_num,\n                    status: 'active'\n                } \n                : {}\n\n            drivers = this.changeEquipment(drivers, changeDriver, newEquipment)\n            idleDrivers = this.changeEquipment(idleDrivers, changeDriver, newEquipment)\n\n            // remove driver from old equipment if id not -1\n            if(oldEquipmentId !== -1){\n                equipments = equipments.map((equipment) => {\n                    if(equipment.id === oldEquipmentId){\n                        equipment.driver = {}\n                    }\n                    return equipment\n                })\n            }\n\n            equipments = equipments.map((equipment) => {\n                if(equipment.id === newEquipmentId){\n                    equipment.driver = {\n                        id: changeDriver.id,\n                        full_name,\n                        pay_rate,\n                        status: 'active'\n                    }\n                }\n                return equipment\n            })\n\n        }\n        \n        const changes = {\n            full_name,\n            pay_rate\n        }\n        // make changes to the changed driver in all drivers array\n        drivers = this.makeDriverChanges(drivers, changeDriver, changes)\n        idleDrivers = this.makeDriverChanges(idleDrivers, changeDriver, changes)\n\n        const updateDriverInDB = {\n            id: changeDriver.id,\n            full_name,\n            pay_rate,\n            equipment_id: newEquipmentId === -1 ? null : newEquipmentId\n        }\n\n        DriversSerivce.updateDriver(updateDriverInDB);\n\n        this.context.setDrivers(drivers);\n        this.context.setEquipments(equipments);\n        this.context.setIdleDrivers(idleDrivers);\n\n        routeUserTo(this.props.rprops.history, `${config.BASEPATH}/drivers`);\n    }\n\n    render() {\n\n        \n        const {full_name, pay_rate, equipment_id, driver, availableEquipments, error} = this.state;\n        \n\n        return (\n            <section className='DriverEditPage width-wrapper'>\n\n                <form className='edit-equip' onSubmit={(e) => { this.handleEditDriver(e, driver) }}>\n                    <fieldset>\n                        <legend className='blue-back white-text'>\n                            <GoBackButton onClick={(e) => { handleGoBack(this.props.rprops.history) }} />\n                            <span>Edit Driver</span>\n                        </legend>\n                        <div className='flex'>\n                            <label htmlFor='full_name'>\n                                <span className='input-title'>Name</span>\n                                <input\n                                    type='text'\n                                    id='full_name'\n                                    name='full_name'\n                                    required\n                                    value={full_name}\n                                    onChange={(e) => { this.validateDriverName(e.target.value)}}\n                                />\n                                {\n                                    error.driverName &&\n                                    <span className='error'>{error.driverNameError}</span>\n                                }\n                            </label>\n                            <label htmlFor='pay_rate'>\n                                <span className='input-title'>Pay Rate</span>\n                                <input\n                                    type='text'\n                                    id='pay_rate'\n                                    name='pay_rate'\n                                    required\n                                    value={pay_rate}\n                                    onChange={(e) => { this.validatePayRate(e.target.value) }}\n                                    onBlur={(e) => {\n                                        if(e.target.value.trim() === ''){\n                                            this.setState({\n                                                pay_rate: 0.0,\n                                                error: {\n                                                    ...this.state.error,\n                                                    driverPay: false,\n                                                    driverPayError: ''\n                                                }\n                                            })\n                                        }\n                                    }}\n                                />\n                                {\n                                    error.driverPay &&\n                                    <span className='error'>{error.driverPayError}</span>\n                                }\n                            </label>\n                            <label htmlFor='driver'>\n                                <span className='input-title'>Available Equipment</span>\n                                <select \n                                    className='select-css' \n                                    value={equipment_id}\n                                    name='equipmen_id'\n                                    id='equipment_id'\n                                    onChange={(e) => {this.setState({equipment_id: e.target.value})}}>\n                                        <option value='-1'>No Equipment</option>\n                                        {renderEquipmentOptions(availableEquipments)}\n                                </select>\n                            </label>\n                            <button\n                                className='app-button'\n                                type='submit'\n                                disabled={error.driverPay || error.driverName}\n                            >\n                                Save\n                            </button>\n                        </div>\n                    </fieldset>\n                </form>\n            </section>\n        );\n    }\n}\n\nexport default DriverEditPage;","import React, { Component } from 'react';\nimport './EditLoadPage.css';\nimport {\n    handleGoBack,\n    routeUserTo,\n    formatDate,\n    arrayIsEmpty,\n} from '../../HelperFunctions/HelperFunctions';\nimport {\n    notValidDate,\n    emptySpaces,\n} from '../../HelperFunctions/InputFieldValidations';\nimport AppContext from '../../Contexts/AppContext';\nimport config from '../../config';\nimport ShipmentsSerivce from '../../Services/ShipmentsService';\nimport { GoBackButton } from '../../Components/Utils/Utils'\n\nclass EditLoadPage extends Component {\n\n    constructor(props) {\n        super(props);\n\n        const id = parseInt(props.rprops.match.params.id, 10);\n        const {shipments} = this.props;\n        let shipment = {};\n        let pickup_warehouse = {};\n        let delivery_warehouse = {};\n        let driver = {};\n        if(!arrayIsEmpty(shipments)){\n            shipment = props.shipments.filter((shipment) => shipment.id === id)[0];\n            pickup_warehouse = shipment.pickup_warehouse;\n            delivery_warehouse = shipment.delivery_warehouse;\n            driver = shipment.driver\n        }\n\n\n\n        this.state = {\n            shipmentId: id,\n            availableDrivers: [],\n            error: {\n                dateError: 'Enter Date in correct format \"MM/DD/YYYY\"',\n                pickupDate: false,\n                deliveryDate: false,\n                cityError: 'City is required',\n                pickupCity: false,\n                deliveryCity: false,\n                stateError: 'State is required and must be two characters, Eg. New York will be NY',\n                pickupState: false,\n                deliveryState: false,\n                zipcodeError: 'Zipcode is required',\n                pickupZipcode: false,\n                deliveryZipcode: false,\n            },\n            pickupDate: formatDate(shipment.pickup_date),\n            deliveryDate: formatDate(shipment.delivery_date),\n            pickupCity: pickup_warehouse.city,\n            deliveryCity: delivery_warehouse.city,\n            pickupState: pickup_warehouse.state,\n            deliveryState: delivery_warehouse.state,\n            pickupZipcode: pickup_warehouse.zipcode,\n            deliveryZipcode: delivery_warehouse.zipcode,\n            miles: shipment.miles,\n            rate: shipment.rate,\n            broker: shipment.broker || '',\n            driverId: driver.id\n        }\n    }\n\n    static contextType = AppContext\n\n    // validation of date, Validates both pickup date and delivery date\n    // *** THIS FUNCTION IS DEPENDENT ON THE NAME PROPERTY OF THE INPUT BOXES ***\n    validateInputDate = (e) => {\n        const date = e.target.value;\n        const { name } = e.target;\n\n        name === 'pickup-date'\n            ? this.setState({ pickupDate: date })\n            : this.setState({ deliveryDate: date });\n\n        if (notValidDate(date)) {\n            name === 'pickup-date'\n                ? this.setState({\n                    error: {\n                        ...this.state.error,\n                        pickupDate: true,\n                    }\n                })\n                : this.setState({\n                    error: {\n                        ...this.state.error,\n                        deliveryDate: true,\n                    }\n                });\n        } else {\n            \n            name === 'pickup-date'\n                ? this.setState({\n                    error: {\n                        ...this.state.error,\n                        pickupDate: false,\n                    }\n                })\n                : this.setState({\n                    error: {\n                        ...this.state.error,\n                        deliveryDate: false,\n                    }\n                });\n        }\n    }\n\n    validateCityInput = (e) => {\n        const city = e.target.value;\n        const { name } = e.target;\n\n        name === 'pickup-city'\n            ? this.setState({ pickupCity: city })\n            : this.setState({ deliveryCity: city });\n\n\n        if (emptySpaces(city)) {\n            name === 'pickup-city'\n                ? this.setState({\n                    error: {\n                        ...this.state.error,\n                        pickupCity: true,\n                    }\n                })\n                : this.setState({\n                    error: {\n                        ...this.state.error,\n                        deliveryCity: true,\n                    }\n                });\n        } else {\n            name === 'pickup-city'\n                ? this.setState({\n                    error: {\n                        ...this.state.error,\n                        pickupCity: false,\n                    }\n                })\n                : this.setState({\n                    error: {\n                        ...this.state.error,\n                        deliveryCity: false,\n                    }\n                });\n        }\n    }\n\n    validateStateInput = (e) => {\n        const stateCode = e.target.value;\n        const { name } = e.target;\n\n        name === 'pickup-state'\n            ? this.setState({ pickupState: stateCode })\n            : this.setState({ deliveryState: stateCode });\n\n\n        if (emptySpaces(stateCode) || stateCode.trim().length !== 2) {\n            name === 'pickup-state'\n                ? this.setState({\n                    error: {\n                        ...this.state.error,\n                        pickupState: true,\n                    }\n                })\n                : this.setState({\n                    error: {\n                        ...this.state.error,\n                        deliveryState: true,\n                    }\n                });\n        } else {\n            name === 'pickup-state'\n                ? this.setState({\n                    error: {\n                        ...this.state.error,\n                        pickupState: false,\n                    }\n                })\n                : this.setState({\n                    error: {\n                        ...this.state.error,\n                        deliveryState: false,\n                    }\n                });\n        }\n    }\n\n    validateZipcodeInput = (e) => {\n        const zipcode = e.target.value;\n        const { name } = e.target;\n\n        name === 'pickup-zipcode'\n            ? this.setState({ pickupZipcode: zipcode })\n            : this.setState({ deliveryZipcode: zipcode });\n\n\n        if (emptySpaces(zipcode)) {\n            name === 'pickup-zipcode'\n                ? this.setState({\n                    error: {\n                        ...this.state.error,\n                        pickupZipcode: true,\n                    }\n                })\n                : this.setState({\n                    error: {\n                        ...this.state.error,\n                        deliveryZipcode: true,\n                    }\n                });\n        } else {\n            name === 'pickup-zipcode'\n                ? this.setState({\n                    error: {\n                        ...this.state.error,\n                        pickupZipcode: false,\n                    }\n                })\n                : this.setState({\n                    error: {\n                        ...this.state.error,\n                        deliveryZipcode: false,\n                    }\n                });\n        }\n    }\n\n    handleEditLoad = (e) => {\n\n        e.preventDefault();\n\n        const { shipmentId } = this.state;\n        const broker = e.target['broker'].value.trim() || '';\n        const delivery_warehouse = {\n            city: e.target['delivery-city'].value.trim(),\n            state: e.target['delivery-state'].value,\n            zipcode: e.target['delivery-zipcode'].value.trim()\n        };\n        const pickup_warehouse = {\n            city: e.target['pickup-city'].value.trim(),\n            state: e.target['pickup-state'].value,\n            zipcode: e.target['pickup-zipcode'].value.trim()\n        };\n        const miles = e.target['miles'].value.trim() || '0';\n        const rate = e.target['rate'].value.trim() || '0'\n        const pickup_date = e.target['pickup-date'].value;\n        const delivery_date = e.target['delivery-date'].value;\n\n        const newShipmentFields = {\n            pickup_date,\n            pickup_warehouse,\n            delivery_date,\n            delivery_warehouse,\n            miles,\n            rate,\n            broker\n        }\n\n        const updateShipmentInDB = {\n            id: shipmentId,\n            pickup_date,\n            delivery_date,\n            rate,\n            miles,\n            broker,\n            pickup_city: pickup_warehouse.city,\n            pickup_state: pickup_warehouse.state,\n            pickup_zipcode: pickup_warehouse.zipcode,\n            delivery_city: delivery_warehouse.city,\n            delivery_state: delivery_warehouse.state,\n            delivery_zipcode: delivery_warehouse.zipcode\n        }\n\n        // update the fields in the database.\n        ShipmentsSerivce.updateShipment(updateShipmentInDB)\n\n        let {shipments} = this.context\n        shipments = shipments.map((shipment) => {\n            if(shipment.id === shipmentId){\n                shipment = {\n                    ...shipment,\n                    ...newShipmentFields,\n                }\n            }\n            return shipment;\n        })\n\n        this.context.setShipments(shipments);\n        routeUserTo(this.props.rprops.history, `${config.BASEPATH}/load/${shipmentId}`)\n\n    }\n\n    render() {        \n        const { error } = this.state\n\n        return (\n            <section className='EditLoadPage width-wrapper'>\n                <form className='add-load-form' onSubmit={(e) => { this.handleEditLoad(e) }}>\n                    <fieldset>\n                        <legend className='blue-back white-text'>\n                            <GoBackButton onClick={(e) => { handleGoBack(this.props.rprops.history) }} />\n                            <span>Edit Equipment</span>\n                        </legend>\n                        <div className='flex'>\n                            <h4 className='fieldset-sub-title blue-text'>\n                                Pick Up Info\n                            </h4>\n                            <label htmlFor='pickup-date'>\n                                <span className='input-title'>* Date</span>\n                                <input\n                                    type='text'\n                                    id='pickup-date'\n                                    name='pickup-date'\n                                    maxLength='10'\n                                    value={this.state.pickupDate}\n                                    onChange={(e) => { this.validateInputDate(e) }}\n                                    onBlur={(e) => {\n                                        if (e.target.value === '') {\n                                            this.setState({\n                                                pickupDate: formatDate(new Date()),\n                                                error: {\n                                                    ...this.state.error,\n                                                    pickupDate: false\n                                                }\n                                            })\n                                        }\n                                    }}\n                                />\n                                {\n                                    error.pickupDate &&\n                                    <span className='error'>{error.dateError}</span>\n                                }\n                            </label>\n                            <label htmlFor='pickup-city'>\n                                <span className='input-title'>* City</span>\n                                <input\n                                    type='text'\n                                    id='pickup-city'\n                                    name='pickup-city'\n                                    placeholder='Eg. Dallas'\n                                    required\n                                    value={this.state.pickupCity}\n                                    onChange={(e) => { this.validateCityInput(e) }}\n                                />\n                                {\n                                    error.pickupCity &&\n                                    <span className='error'>{error.cityError}</span>\n                                }\n                            </label>\n                            <label htmlFor='pickup-state'>\n                                <span className='input-title'>* State</span>\n                                <input\n                                    type='text'\n                                    placeholder='Eg. TX'\n                                    maxLength='2'\n                                    id='pickup-state'\n                                    name='pickup-state'\n                                    required\n                                    value={this.state.pickupState}\n                                    onChange={(e) => { this.validateStateInput(e) }}\n                                />\n                                {\n                                    this.state.error.pickupState &&\n                                    <span className='error'>{this.state.error.stateError}</span>\n                                }\n                            </label>\n                            <label htmlFor='pickup-zipcode'>\n                                <span className='input-title'>* Zipcode</span>\n                                <input\n                                    type='text'\n                                    id='pickup-zipcode'\n                                    maxLength='10'\n                                    name='pickup-zipcode'\n                                    placeholder='Eg. 75001'\n                                    required\n                                    value={this.state.pickupZipcode}\n                                    onChange={(e) => { this.validateZipcodeInput(e) }}\n                                />\n                                {\n                                    this.state.error.pickupZipcode &&\n                                    <span className='error'>{this.state.error.zipcodeError}</span>\n                                }\n                            </label>\n                            <h4 className='fieldset-sub-title blue-text'>\n                                Delivery Info\n                            </h4>\n                            <label htmlFor='delivery-date'>\n                                <span className='input-title'>* Date</span>\n                                <input\n                                    type='text'\n                                    id='delivery-date'\n                                    name='delivery-date'\n                                    maxLength='10'\n                                    value={this.state.deliveryDate}\n                                    onChange={(e) => { this.validateInputDate(e) }}\n                                    onBlur={(e) => {\n                                        if (e.target.value === '') {\n                                            this.setState({\n                                                deliveryDate: formatDate(new Date()),\n                                                error: {\n                                                    ...this.state.error,\n                                                    deliveryDate: false\n                                                }\n                                            })\n                                        }\n                                    }}\n                                />\n                                {\n                                    this.state.error.deliveryDate &&\n                                    <span className='error'>{this.state.error.dateError}</span>\n                                }\n                            </label>\n                            <label htmlFor='delivery-city'>\n                                <span className='input-title'>* City</span>\n                                <input\n                                    type='text'\n                                    id='delivery-city'\n                                    name='delivery-city'\n                                    placeholder='Eg. Indianapolis'\n                                    required\n                                    value={this.state.deliveryCity}\n                                    onChange={(e) => { this.validateCityInput(e) }}\n                                />\n                                {\n                                    this.state.error.deliveryCity &&\n                                    <span className='error'>{this.state.error.cityError}</span>\n                                }\n                            </label>\n                            <label htmlFor='delivery-state'>\n                                <span className='input-title'>* State</span>\n                                <input\n                                    type='text'\n                                    placeholder='Eg. IN'\n                                    maxLength='2'\n                                    id='delivery-state'\n                                    name='delivery-state'\n                                    required\n                                    value={this.state.deliveryState}\n                                    onChange={(e) => { this.validateStateInput(e) }}\n                                />\n                                {\n                                    this.state.error.deliveryState &&\n                                    <span className='error'>{this.state.error.stateError}</span>\n                                }\n                            </label>\n                            <label htmlFor='delivery-zipcode'>\n                                <span className='input-title'>* Zipcode</span>\n                                <input\n                                    type='text'\n                                    id='delivery-zipcode'\n                                    name='delivery-zipcode'\n                                    maxLength='10'\n                                    placeholder='Eg. 46225'\n                                    required\n                                    value={this.state.deliveryZipcode}\n                                    onChange={(e) => { this.validateZipcodeInput(e) }}\n                                />\n                                {\n                                    this.state.error.deliveryZipcode &&\n                                    <span className='error'>{this.state.error.zipcodeError}</span>\n                                }\n                            </label>\n                            <h4 className='fieldset-sub-title blue-text'>\n                                Additional Info\n                            </h4>\n                            <label htmlFor='miles'>\n                                <span className='input-title'>Miles</span>\n                                <input\n                                    type='number'\n                                    min='0'\n                                    id='miles'\n                                    name='miles'\n                                    value={this.state.miles}\n                                    onChange={(e) => {this.setState({miles: e.target.value})}}\n                                />\n                                {\n                                    // this.state.unitNumError &&\n                                    // <span className='error'>{this.state.error}</span>\n                                }\n                            </label>\n                            <label htmlFor='rate'>\n                                <span className='input-title'>Rate</span>\n                                <input\n                                    type='number'\n                                    min='0'\n                                    id='rate'\n                                    name='rate'\n                                    value={this.state.rate}\n                                    onChange={(e) => {this.setState({rate: e.target.value})}}\n                                />\n                                {\n                                    // this.state.unitNumError &&\n                                    // <span className='error'>{this.state.error}</span>\n                                }\n                            </label>\n                            <label htmlFor='broker'>\n                                <span className='input-title'>Broker</span>\n                                <input\n                                    type='text'\n                                    id='broker'\n                                    name='broker'\n                                    value={this.state.broker}\n                                    onChange={(e) => {this.setState({broker: e.target.value})}}\n                                />\n                            </label>\n                            {\n                                !(\n                                    error.pickupCity ||\n                                    error.deliveryCity ||\n                                    error.pickupDate ||\n                                    error.deliveryDate ||\n                                    error.pickupState ||\n                                    error.deliveryState ||\n                                    error.pickupZipcode ||\n                                    error.deliveryZipcode\n                                )\n                                    ?\n                                    <button\n                                        className='app-button'\n                                        type='submit'\n                                    >\n                                        Edit Load\n                                    </button>\n                                    :\n                                    <button\n                                        className='app-button'\n                                        type='submit'\n                                        disabled\n                                    >\n                                        Edit Load\n                                    </button>\n                            }\n\n                        </div>\n                    </fieldset>\n                </form>\n            </section>\n        );\n    }\n}\n\nexport default EditLoadPage;","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { Switch, Route, Redirect } from \"react-router-dom\";\nimport Header from \"../Header/Header\";\nimport HomePage from \"../../Routes/HomePage/HomePage\";\nimport AppContext from \"../../Contexts/AppContext\";\nimport CreateAccountPage from \"../../Routes/CreateAccountPage/CreateAccountPage\";\nimport LoginPage from \"../../Routes/LoginPage/LoginPage\";\nimport TokenService from \"../../Services/TokenService\";\nimport DashboardPage from \"../../Routes/DashboardPage/DashboardPage\";\nimport Logout from \"../Logout/Logout\";\nimport CarrierService from \"../../Services/CarrierServices\";\nimport DriversService from \"../../Services/DriversService\";\nimport EquipmentService from \"../../Services/EquipmentsService\";\nimport LoadsPage from \"../../Routes/LoadsPage/LoadsPage\";\nimport EquipmentsPage from \"../../Routes/EquipmentsPage/EquipmentsPage\";\nimport DriversPage from \"../../Routes/DriversPage/DriversPage\";\nimport EquipmentEditPage from \"../../Routes/EquipmentEditPaage/EquipmentEditPage\";\nimport AddLoadPage from \"../../Routes/AddLoadPage/AddLoadPage\";\nimport { objectIsEmpty } from '../../HelperFunctions/HelperFunctions';\nimport LoadByIdPage from \"../../Routes/LoadByIdPage/LoadByIdPage\";\nimport AddDriverPage from \"../../Routes/AddDriverPage/AddDriverPage\";\nimport AddEquipmentPage from \"../../Routes/AddEquipmentPage/AddEquipmentPage\";\nimport DriverEditPage from \"../../Routes/DriverEditPage/DriverEditPage\";\nimport EditLoadPage from \"../../Routes/EditLoadPage/EditLoadPage\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      basePath: \"/dispatch-office-client\",\n      loggedIn: false,\n      newUser: false,\n      shipments: [],\n      drivers: [],\n      idleDrivers: [],\n      idleEquipments: [],\n      equipments: [],\n      loggedInCarrier: {\n        full_name: \"\",\n        company_name: \"\",\n        mc_num: \"\"\n      }\n    };\n  }\n\n  // gets all the shipments\n  getShipments = async () => {\n    return CarrierService.getCarrierData()\n      .then(data => data)\n      .catch(err => console.log(err));\n  };\n\n  getDrivers = async () => {\n    return DriversService.getDriversData()\n      .then(data => data)\n      .catch(err => console.log(err))\n  }\n\n  // gets all idleDrivers for dashboard\n  getIdleDrivers = async () => {\n    return DriversService.getIdleDrivers()\n      .then(data => {\n        data.map((driver) => {\n          if (!objectIsEmpty(driver.equipment)) {\n            this.setState({\n              idleEquipments: [\n                ...this.state.idleEquipments,\n                driver.equipment\n              ]\n            })\n          }\n          return driver\n        })\n        return data\n      })\n      .catch(err => console.log(err));\n  };\n\n  getEquipments = async () => {\n    return EquipmentService.getEquipments()\n      .then(data => data)\n      .catch(err => console.log(err));\n  }\n\n  // only one function used in context now to be used in login page\n  getAllData = async () => {\n    if (TokenService.hasAuthToken()) {\n      await Promise.all([\n        this.getShipments(),\n        this.getDrivers(),\n        this.getEquipments(),\n        this.getIdleDrivers()\n      ])\n        .then(([\n          shipments,\n          drivers,\n          equipments,\n          idleDrivers\n        ]) => {\n          this.setState({\n            shipments,\n            drivers,\n            equipments,\n            idleDrivers\n          })\n        })\n        .catch((err) => console.log(err));\n    }\n  }\n\n  componentDidMount = () => {\n    this.setState({\n      loggedIn: TokenService.hasAuthToken()\n    });\n    this.getAllData();\n  };\n\n  setLoggedIn = loggedIn => {\n    this.setState({\n      loggedIn\n    });\n  };\n\n  setLoggedInCarrier = loggedInCarrier => {\n    this.setState({\n      loggedInCarrier\n    });\n  };\n\n  setShipments = shipments => {\n    this.setState({\n      shipments\n    });\n  };\n\n  setEquipments = equipments => {\n    this.setState({\n      equipments\n    })\n  }\n\n  setDrivers = drivers => {\n    this.setState({\n      drivers\n    })\n  }\n\n  setIdleDrivers = idleDrivers => {\n    const idleEquipments = [];\n    this.setState({\n      idleEquipments\n    })\n    idleDrivers.map(driver => {\n      if (!objectIsEmpty(driver.equipment)) {\n        idleEquipments.push(driver.equipment)\n        this.setState({\n          idleEquipments\n        })\n      }\n      return driver\n    })\n    this.setState({\n      idleDrivers\n    })\n  }\n\n  setNewUser = newUser => {\n    this.setState({\n      newUser\n    });\n  };\n\n  render() {\n    const value = {\n      basePath: this.state.basePath,\n      loggedIn: this.state.loggedIn,\n      newUser: this.state.newUser,\n      setLoggedIn: this.setLoggedIn,\n      setNewUser: this.setNewUser,\n      setShipments: this.setShipments,\n      setEquipments: this.setEquipments,\n      setIdleDrivers: this.setIdleDrivers,\n      setDrivers: this.setDrivers,\n      setLoggedInCarrier: this.setLoggedInCarrier,\n      loggedInCarrier: this.state.loggedInCarrier,\n      shipments: this.state.shipments,\n      idleDrivers: this.state.idleDrivers,\n      equipments: this.state.equipments,\n      drivers: this.state.drivers,\n      idleEquipments: this.state.idleEquipments,\n      getAllData: this.getAllData,\n      loadStatus: [\n        'un-assigned',\n        'dispatched',\n        'loading',\n        'in transit',\n        'unloading',\n        'completed'\n      ]\n    };\n\n    return (\n      <AppContext.Provider value={value}>\n        <div className=\"App\">\n          <Header />\n          {this.state.loggedIn && <Route path=\"/\" component={Logout} />}\n          <Switch>\n            {/* Begin the app with the /app endpoint */}\n\n            <Route exact path=\"/\">\n              <Redirect to={value.basePath} />\n            </Route>\n\n            <Route exact path={value.basePath} component={HomePage} />\n\n            <Route\n              exact\n              path={`${value.basePath}/create-account`}\n              component={CreateAccountPage}\n            />\n\n            <Route\n              exact\n              path={`${value.basePath}/login`}\n              component={LoginPage}\n            />\n\n            <Route\n              exact\n              path={`${value.basePath}/dashboard`}\n              component={DashboardPage}\n            />\n\n            <Route\n              exact\n              path={`${value.basePath}/loads`}\n              component={(rprops) => {\n                return <LoadsPage \n                  rprops={rprops}\n                  shipments={this.state.shipments}\n                  boxHeader={`All Loads`}\n                />\n              }}\n            />\n\n            <Route\n              exact\n              path={`${value.basePath}/equipments`}\n              component={EquipmentsPage}\n            />\n\n            <Route\n              exact\n              path={`${value.basePath}/drivers`}\n              component={DriversPage}\n            />\n\n            <Route\n              exact\n              path={`${value.basePath}/equipment/edit/:id`}\n              component={(rprops) => {\n                return <EquipmentEditPage\n                  rprops={rprops}\n                  equipments={this.state.equipments}\n                  idleDrivers={this.state.idleDrivers}\n                  drivers={this.state.drivers} />\n              }}\n            />\n\n            <Route\n              exact\n              path={`${value.basePath}/load/new`}\n              component={AddLoadPage}\n            />\n\n            <Route\n              exact\n              path={`${value.basePath}/driver/new`}\n              component={(rprops) => {\n                return <AddDriverPage\n                  rprops={rprops}\n                  equipments={this.state.equipments} />\n              }}\n            />\n\n            <Route\n              exact\n              path={`${value.basePath}/equipment/new`}\n              component={(rprops) => {\n                return <AddEquipmentPage\n                  rprops={rprops}\n                  drivers={this.state.drivers} />\n              }}\n            />\n\n            <Route\n              exact\n              path={`${value.basePath}/driver/edit/:id`}\n              component={(rprops) => {\n                return <DriverEditPage\n                  rprops={rprops}\n                  equipments={this.state.equipments}\n                  idleDrivers={this.state.idleDrivers}\n                  drivers={this.state.drivers} />\n              }}\n            />\n\n            <Route\n              exact\n              path={`${value.basePath}/load/:id`}\n              component={(rprops) => {\n                return <LoadByIdPage\n                  rprops={rprops}\n                  shipments={this.state.shipments}\n                  idleDrivers={this.state.idleDrivers}\n                />\n              }}\n            />\n\n            <Route\n              exact\n              path={`${value.basePath}/load/edit/:id`}\n              component={(rprops) => {\n                return <EditLoadPage \n                  rprops={rprops}\n                  shipments={this.state.shipments}\n                  drivers={this.state.drivers}\n                  idleDrivers={this.state.idleDrivers}\n                />\n              }}\n            />\n\n          </Switch>\n        </div>\n      </AppContext.Provider>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>\n    , \n    document.getElementById('root'));\n"],"sourceRoot":""}