{"version":3,"sources":["Contexts/AppContext.js","Components/DesktopMenu/DesktopMenu.js","Components/MobileMenu/MobileMenu.js","Components/Header/Header.js","Components/HomePageSection/HomePageSection.js","Routes/HomePage/HomePage.js","Components/CreateAccount/CreateAccount.js","Routes/CreateAccountPage/CreateAccountPage.js","config.js","Services/TokenService.js","Services/AuthApiService.js","Components/LoginForm/LoginForm.js","Routes/LoginPage/LoginPage.js","HelperFunctions/HelperFunctions.js","Components/LoadListBox/LoadListBox.js","Components/DriverCard/DriverCard.js","Components/IdleDriversBox/IdleDriversBox.js","Routes/DashboardPage/DashboardPage.js","Services/CarrierServices.js","Components/Logout/Logout.js","Services/DriversService.js","Services/EquipmentsService.js","Routes/LoadsPage/LoadsPage.js","Components/EquipmentCard/EquipmentCard.js","Routes/EquipmentsPage/EquipmentsPage.js","Routes/DriversPage/DriversPage.js","Components/DriversDropDown/DriversDropDown.js","Routes/EquipmentEditPaage/EquipmentEditPage.js","HelperFunctions/InputFieldValidations.js","Routes/AddLoadPage/AddLoadPage.js","Routes/LoadByIdPage/LoadByIdPage.js","Components/App/App.js","index.js"],"names":["React","createContext","basePath","loggedIn","newUser","setLoggedIn","setNewUser","setShipments","setEquipments","setIdleDrivers","setDrivers","getAllData","loggedInCarrier","shipments","setLoggedInCarrier","idleDrivers","idleEquipments","equipments","drivers","loadStatus","DesktopMenu","this","context","className","to","Component","contextType","AppContext","MobileMenu","props","changeMenuOpenState","setState","menuOpen","state","closeMenuWhenLargerScreen","e","window","innerWidth","componentDidMount","addEventListener","onClick","Header","HomePageSection","HomePage","CreateAccount","handleFormSubmit","preventDefault","target","username","password","full_name","company_name","mc_num","user","value","console","log","onSubmit","htmlFor","type","id","name","required","CreateAccountPage","API_ENDPOINT","process","TOKEN_KEY","BASEPATH","TokenService","saveAuthToken","token","localStorage","setItem","config","getAuthToken","getItem","clearAuthToken","removeItem","hasAuthToken","AuthApiService","postLogin","credentials","fetch","method","headers","body","JSON","stringify","then","res","ok","json","Error","error","message","catch","LoginForm","incorrectUsername","incorrectPassword","handleSubmitLoginForm","focus","authToken","loggedInUser","onLoginSuccess","defaultProps","LoginPage","a","history","push","handleGoBack","goBack","objectIsEmpty","obj","Object","entries","length","constructor","arrayIsEmpty","arr","formatDate","dbDate","date","Date","day","getDate","month","getMonth","year","getFullYear","renderLoadStatusOptions","statusArray","map","status","i","key","LoadListBox","getLoadsWithStatus","filter","shipment","includes","property","sort","b","sortShipments","pickup_warehouse","city","pickup_date","miles","rate","toString","replace","broker","delivery_warehouse","delivery_date","boxHeader","DriverCard","driver","shipmentId","idleDriver","pay_rate","equipment","unit_num","IdleDriversBox","renderIdleDriversList","iDriver","DashboardPage","oldLoadStatus","CarrierService","getCarrierData","carrierData","err","getCarrierInfo","carrierInfo","Logout","getCarrierInfoInComponent","CarrierServices","carrier","handleLogout","DriversService","getDriversData","response","driversData","getIdleDrivers","updateEquipment","driverId","equipmentId","EquipmentService","getEquipments","Authorization","addNewEquipment","LoadsPage","EquipmentCard","handleDeleteEquipment","editingMode","idleEquipment","hasOwnProperty","EquipmentsPage","handleAddEquipment","renderEquipmentList","equip","DriversPage","renderDrivers","DriversDropDown","handleChange","optionsValue","renderDriverOptions","defaultValue","onChange","EquipmentEditPage","giveEquipment","takeAwayEquipment","setDriverForEquipment","removeDriverFromEquipment","changeEquipmentForDriver","newDriverId","oldDriverId","oldDriver","handleEquipmentEdit","equipmentArray","undefined","inIdleQueue","parseInt","removeEcecuted","changeEquipemnt","changeEquipment","rprops","validateUnitNum","unitNum","trim","unitNumError","match","params","availableDrivers","currentDriver","unshift","idleDr","emptySpaces","word","AddLoadPage","validateInputDate","pickupDate","deliveryDate","test","notValidDate","validateCityInput","pickupCity","deliveryCity","validateStateInput","pickupState","deliveryState","validateZipcodeInput","zipcode","pickupZipcode","deliveryZipcode","getAvailableDrivers","updateIdleDriverQueue","handleAddLoad","contextDriver","newShipment","hasError","dateError","cityError","stateError","zipcodeError","maxLength","onBlur","placeholder","min","disabled","LoadByIdPage","removeDriverAndEquipmentFromShipment","handleChangeLoadStatus","propShipment","App","getShipments","data","getDrivers","Promise","all","Provider","path","component","exact","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.67819b5b.chunk.js","sourcesContent":["import React from 'react';\n\nexport default React.createContext({\n    basePath: '',\n    loggedIn: () => {},\n    newUser: () => {},\n    setLoggedIn: () => {},\n    setNewUser: () => {},\n    setShipments: () => {},\n    setEquipments: () => {},\n    setIdleDrivers: () => {},\n    setDrivers: () => {},\n    getAllData: () => {},\n    loggedInCarrier: {},\n    shipments: [],\n    setLoggedInCarrier: () => {},\n    idleDrivers: [],\n    idleEquipments: [],\n    equipments: [],\n    drivers: [],\n    loadStatus: []\n});","import React, { Component } from 'react';\nimport './DesktopMenu.css';\nimport {Link} from 'react-router-dom';\nimport AppContext from '../../Contexts/AppContext';\n\nclass DesktopMenu extends Component {\n\n    static contextType = AppContext;\n\n    render() {\n\n        const {basePath} = this.context;\n        \n        return (\n            <nav className='DesktopMenu'>\n                <ul className='menu-list'>\n                <li className='menu-item'>\n                    <Link to={`${basePath}/dashboard`}>\n                        Dashboard\n                        </Link>\n                </li>\n                <li className='menu-item'>\n                    <Link to={`${basePath}/loads`}>\n                        Loads\n                        </Link>\n                </li>\n                <li className='menu-item'>\n                    <Link to={`${basePath}/equipments`}>\n                        Equipments\n                        </Link>\n                </li>\n                <li className='menu-item'>\n                    <Link to={`${basePath}/drivers`}>\n                        Drivers\n                        </Link>\n                </li>\n            </ul>\n            </nav>\n        );\n    }\n}\n\n\nexport default DesktopMenu","import React, { Component } from 'react';\nimport './MobileMenu.css';\nimport AppContext from '../../Contexts/AppContext';\nimport { Link } from 'react-router-dom';\n\nclass MobileMenu extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            menuOpen: false\n        }\n    }\n\n    static contextType = AppContext;\n\n    changeMenuOpenState = () => {\n        this.setState({\n            menuOpen: !this.state.menuOpen\n        })\n    }\n\n    // closes menu \n    // When it is open on mobile and resized to larger screen\n    // and the menu for larger screen pops up and this closes\n    closeMenuWhenLargerScreen = (e) => {\n        if (window.innerWidth > 1050) {\n            this.setState({\n                menuOpen: false\n            })\n        }\n    }\n\n    componentDidMount = () => {\n        window.addEventListener('resize', this.closeMenuWhenLargerScreen)\n    }\n\n\n    render() {\n\n        const { basePath } = this.context;\n\n        return (\n            <nav className='MobileMenu'>\n                <button className='menu-button' onClick={this.changeMenuOpenState}>\n                    <div></div>\n                    <div></div>\n                    <div></div>\n                </button>\n                {\n                    this.state.menuOpen &&\n                    <ul className='menu-list'>\n                        <button\n                            className='close-button'\n                            onClick={this.changeMenuOpenState}>\n                            X\n                        </button>\n                        <li className='menu-item'>\n                            <Link\n                                to={`${basePath}/dashboard`}\n                                onClick={this.changeMenuOpenState}>\n                                Dashboard\n                            </Link>\n                        </li>\n                        <li className='menu-item'>\n                            <Link\n                                to={`${basePath}/loads`}\n                                onClick={this.changeMenuOpenState}>\n                                Loads\n                            </Link>\n                        </li>\n                        <li className='menu-item'>\n                            <Link\n                                to={`${basePath}/equipments`}\n                                onClick={this.changeMenuOpenState}>\n                                Equipments\n                            </Link>\n                        </li>\n                        <li className='menu-item'>\n                            <Link\n                                to={`${basePath}/drivers`}\n                                onClick={this.changeMenuOpenState}>\n                                Drivers\n                            </Link>\n                        </li>\n                    </ul>\n                }\n            </nav>\n        );\n    }\n}\n\nexport default MobileMenu;","import React, { Component } from 'react';\nimport './Header.css';\nimport { Link } from 'react-router-dom';\nimport AppContext from '../../Contexts/AppContext';\nimport DesktopMenu from '../DesktopMenu/DesktopMenu';\nimport MobileMenu from '../MobileMenu/MobileMenu';\n\nclass Header extends Component {\n\n    static contextType = AppContext;\n\n    render() {\n\n        const {loggedIn} = this.context;\n\n        return (\n            <header className='Header blue-back white-text'>\n                <div className='width-wrapper'>\n                    <Link to='/'>\n                        <div className='logo'>\n                            <span>Dispatch</span>\n                            <span>Office</span>\n                        </div>\n                    </Link>\n                    {\n                        loggedIn &&\n                        <>\n                            <DesktopMenu />\n                            <MobileMenu />\n                        </>\n                    }\n                </div>\n            </header>\n        );\n    }\n}\n\nexport default Header;","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport AppContext from '../../Contexts/AppContext';\n\nclass HomePageSection extends Component {\n\n    static contextType = AppContext;\n\n    render() {\n\n        const { basePath } = this.context;\n\n        return (\n            <div className='HomePageSection width-wrapper'>\n                <p>\n                    Welcome !! to <span className='span-title red-text'>Dispatch Office</span>, a transportation management\n                    system, which assists freight managers with workflow,\n                    automation and shipment scheduling.\n                </p>\n                <Link to={`${basePath}/create-account`} className='app-button'>\n                    Create Account\n                </Link>\n                <Link to={`${basePath}/login`} className='app-link'>\n                    Login\n                </Link>\n            </div>\n        );\n    }\n}\n\nexport default HomePageSection;","import React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport './HomePage.css';\nimport AppContext from '../../Contexts/AppContext';\nimport HomePageSection from '../../Components/HomePageSection/HomePageSection';\n\nclass HomePage extends Component {\n\n    static contextType = AppContext;\n\n    render() {\n        const { basePath, loggedIn, newUser } = this.context;\n        return (\n            !loggedIn\n                ?   <section className='HomePage blue-text'>\n                        <HomePageSection />\n                    </section>\n                :   !newUser\n                    ? <Redirect to={`${basePath}/dashboard`} />\n                    : <Redirect to={`${basePath}/newuser`} />\n        );\n    }\n}\n\nexport default HomePage;","import React, { Component } from 'react';\nimport './CreateAccount.css';\n\nclass CreateAccount extends Component {\n\n    handleFormSubmit = (e) => {\n        e.preventDefault();\n        const { username, password, full_name, company_name, mc_num } = e.target\n        const user = {\n            username: username.value,\n            password: password.value,\n            company_name: company_name.value,\n            mc_num: mc_num.value,\n            full_name: full_name.value\n        }\n        console.log(user);\n    }\n\n    render() {\n        return (\n            <form className='CreateAccount width-wrapper' onSubmit={(e) => { this.handleFormSubmit(e) }}>\n                <fieldset>\n                    <legend className='blue-back white-text'>\n                        Create Account\n                    </legend>\n                    <div className='flex'>\n                        <label htmlFor='username'>\n                            <span className='input-title'>* Username:</span>\n                            <input\n                                type='text'\n                                id='username'\n                                name='username'\n                                required\n                            />\n                            <span className='error'>Invalid Username</span>\n                        </label>\n                        <label htmlFor='password'>\n                            <span className='input-title'>* Password:</span>\n                            <input\n                                type='password'\n                                id='password'\n                                name='password'\n                                required\n                            />\n                            <span className='error'>Password Error</span>\n                        </label>\n                        <label htmlFor='full_name'>\n                            <span className='input-title'>* Full Name:</span>\n                            <input type='text' id='full_name' name='full_name' required />\n                            <span className='error'>Invalid Username</span>\n                        </label>\n                        <label htmlFor='company_name'>\n                            <span className='input-title'>Company Name:</span>\n                            <input type='text' id='company_name' name='company_name' required />\n                            <span className='error'>Company Name Error</span>\n                        </label>\n                        <label htmlFor='mc_num'>\n                            <span className='input-title'>MC Number:</span>\n                            <input type='text' id='mc_num' name='mc_num' />\n                            <span className='error'>MC Number Error</span>\n                        </label>\n                        <button\n                            className='app-button'\n                            type='submit'\n                        >\n                            Create Account\n                        </button>\n                    </div>\n                </fieldset>\n            </form>\n        );\n    }\n}\n\nexport default CreateAccount;","import React, { Component } from 'react';\nimport './CreateAccountPage.css';\nimport AppContext from '../../Contexts/AppContext';\nimport { Redirect } from 'react-router-dom';\nimport CreateAccount from '../../Components/CreateAccount/CreateAccount';\n\nclass CreateAccountPage extends Component {\n\n    static contextType = AppContext;\n\n    render() {\n\n        const { basePath, loggedIn, newUser } = this.context;\n\n        return (\n            !loggedIn\n                ? <div className='CreateAccountPage'>\n                    <CreateAccount />\n                </div>\n                : !newUser\n                    ? <Redirect to={`${basePath}/dashboard`} />\n                    : <Redirect to={`${basePath}/newuser`} />\n        );\n    }\n}\n\nexport default CreateAccountPage;","export default {\n    API_ENDPOINT: process.env.API_ENDPOINT || 'https://rocky-waters-07125.herokuapp.com/api',\n    TOKEN_KEY: process.env.TOKEN_KEY || '9e7d73be-f7f1-11e9-8f0b-362b9e155667',\n    BASEPATH: '/dispatch-office-client',\n}\n\n// https://rocky-waters-07125.herokuapp.com/api","import config from '../config';\n\nconst TokenService = {\n  saveAuthToken(token) {\n    window.localStorage.setItem(config.TOKEN_KEY, token)\n  },\n  getAuthToken() {\n    return window.localStorage.getItem(config.TOKEN_KEY)\n  },\n  clearAuthToken() {\n    window.localStorage.removeItem(config.TOKEN_KEY)\n  },\n  hasAuthToken() {\n    return !!TokenService.getAuthToken()\n  },\n}\n\nexport default TokenService","import config from '../config';\n\nconst AuthApiService = {\n    // login authorization\n    postLogin(credentials){\n        return fetch(`${config.API_ENDPOINT}/auth/login`, {\n            method: \"POST\",\n            headers: {\n                \"content-type\": \"application/json\"\n            },\n            body: JSON.stringify(credentials)\n        })\n        .then(res => {\n            if(!res.ok) {\n                return res.json().then(e => {\n                    throw new Error(e.error.message)\n                })\n            }\n            \n            return res.json();\n        })\n        .then(res => {\n            return res\n        })\n        .catch(error => {\n            return error;\n        })\n    }\n}\n\nexport default AuthApiService;","import React, { Component } from 'react';\nimport './LoginForm.css';\nimport TokenService from '../../Services/TokenService';\nimport AuthApiService from '../../Services/AuthApiService';\nimport AppContext from '../../Contexts/AppContext';\n\nclass LoginForm extends Component {\n\n    state = {\n        error: null,\n        incorrectUsername: false,\n        incorrectPassword: false,\n    }\n\n    static contextType = AppContext;\n\n    static defaultProps = {\n        onLoginSuccess: () => {},\n    }\n\n    handleSubmitLoginForm = (e) => {\n        e.preventDefault();\n\n        this.setState({\n            error: null,\n            incorrectUsername: false,\n            incorrectPassword: false,\n        })\n\n        const { username, password } = e.target;\n\n        AuthApiService.postLogin({\n            username: username.value,\n            password: password.value\n        })\n            .then((res) => {\n                if(res.message === 'Incorrect Username'){\n                    this.setState({\n                        incorrectUsername: true,\n                        error: res.message\n                    })\n                    username.value = '';\n                    password.value = '';\n                    username.focus();\n                }\n                if(res.message === 'Incorrect Password'){\n                    this.setState({\n                        incorrectPassword: true,\n                        error: res.message\n                    })\n                    password.value = '';\n                }\n                \n                if(!this.state.incorrectPassword && !this.state.incorrectUsername){\n                    TokenService.saveAuthToken(res.authToken);\n                    this.context.setLoggedInCarrier(res.loggedInUser);\n                    this.props.onLoginSuccess();\n                    username.value = '';\n                    password.value = '';\n                }\n            })\n            .catch((res) => {\n                this.setState({\n                    error: res.error\n                })\n            })\n    }\n\n    render() {\n\n\n        const { incorrectPassword, incorrectUsername, error } = this.state;\n\n\n        return (\n\n            <form className='LoginForm width-wrapper' onSubmit={(e) => { this.handleSubmitLoginForm(e) }}>\n                <fieldset>\n                    <legend className='blue-back white-text'>\n                        Login\n                        </legend>\n                    <div className='flex'>\n                        <label htmlFor='username'>\n                            <span className='input-title'>* Username:</span>\n                            <input\n                                type='text'\n                                id='username'\n                                name='username'\n                                required\n                            />\n                            {\n                                incorrectUsername &&\n                                <span className='error'>{error}</span>\n                            }\n                        </label>\n                        \n                        <label htmlFor='password'>\n                            <span className='input-title'>* Password:</span>\n                            <input\n                                type='password'\n                                id='password'\n                                name='password'\n                                required\n                            />\n                            {\n                                incorrectPassword &&\n                                <span className='error'>{error}</span>\n                            }\n                        </label>\n                        <button\n                            className='app-button'\n                            type='submit'\n                        >\n                            Login\n                            </button>\n                    </div>\n                </fieldset>\n            </form>\n        );\n    }\n}\n\nexport default LoginForm;","import React, { Component } from \"react\";\nimport \"./LoginPage.css\";\nimport AppContext from \"../../Contexts/AppContext\";\nimport LoginForm from \"../../Components/LoginForm/LoginForm\";\nimport { Redirect } from \"react-router-dom\";\n\nclass LoginPage extends Component {\n  static contextType = AppContext;\n\n  // using async await so app proceeds only once complete data for carrier is received\n  onLoginSuccess = async () => {\n    this.props.history.push(\"/\");\n    this.context.setLoggedIn(true);\n    this.context.getAllData();\n  };\n\n  render() {\n    const { basePath, loggedIn, newUser } = this.context;\n\n    return !loggedIn ? (\n      <section className=\"LoginPage\">\n        <LoginForm\n          onLoginSuccess={() => {\n            this.onLoginSuccess();\n          }}\n        />\n      </section>\n    ) : !newUser ? (\n      <Redirect to={`${basePath}/dashboard`} />\n    ) : (\n      <Redirect to={`${basePath}/newuser`} />\n    );\n  }\n}\n\nexport default LoginPage;\n","import React from 'react';\n\n// takes user back to the previous page in history\nexport function handleGoBack(history){\n    return history.goBack();\n}\n\n// Returns true if the object is empty\nexport function objectIsEmpty(obj){\n    return (Object.entries(obj).length === 0 && obj.constructor === Object);\n}\n\n// Returns true if array is empty\nexport function arrayIsEmpty(arr){\n    return (arr.length === 0);\n}\n\n// Returns date in a formatted manner\nexport function formatDate(dbDate){\n    const date = new Date(dbDate);\n    const day = date.getDate();\n    const month = date.getMonth();\n    const year = date.getFullYear();\n    return `${month + 1}/${day}/${year}`;\n};\n\nexport function sortShipments(shipments, property){\n  return shipments.sort((a, b) => (a[property] < b[property] ? 1 : -1));\n};\n\nexport function renderLoadStatusOptions(statusArray){\n    return statusArray.map((status, i) => {\n        return (\n            <option \n                key={i}\n                value={status}\n                >\n                    {status}\n            </option>\n        )\n    })\n}","import React, { Component } from \"react\";\nimport \"./LoadListBox.css\";\nimport AppContext from \"../../Contexts/AppContext\";\nimport { Link } from \"react-router-dom\";\nimport {\n  formatDate,\n  sortShipments\n} from '../../HelperFunctions/HelperFunctions'\n\nclass LoadListBox extends Component {\n  static contextType = AppContext;\n\n  static defaultProps = {\n    loadStatus: [],\n    boxHeader: 'Loads'\n  };\n\n  getLoadsWithStatus = status => {\n    \n    const { basePath} = this.context;\n    let {shipments} = this.context;\n\n    if(status !== 'all'){\n      shipments = shipments.filter((shipment) => status.includes(shipment.status))\n    }\n    \n\n    if (shipments.length === 0) {\n      return <li className=\"empty-list\">No Loads</li>;\n    }\n\n    shipments = sortShipments(shipments, 'pickup_date');\n\n    return shipments.map(shipment => {\n      return (\n        <li className=\"load\" key={shipment.id}>\n          <div className=\"pick-up\">\n            <h6>Pick-up</h6>\n            <br />\n            <span className=\"red-bold\">\n              {shipment.pickup_warehouse.city},{\" \"}\n              {shipment.pickup_warehouse.state}\n              <br />\n              Date: {formatDate(shipment.pickup_date)}\n            </span>\n          </div>\n          <div className=\"status-line-wrapper\">\n            <div className=\"rate-broker\">\n              <div className=\"miles\">\n                <h6>Loaded Miles</h6>\n                <br />\n                {shipment.miles}\n              </div>\n              <div className=\"status\">\n                <h6>Status</h6>\n                <br />\n                <span className=\"red-bold\">{shipment.status}</span>\n              </div>\n            </div>\n            <div className=\"status-line\">\n              <div className=\"circle left\"></div>\n              <div className=\"line\"></div>\n              <div className=\"circle right\"></div>\n            </div>\n            <div className=\"rate-broker\">\n              <div className=\"rate\">\n                <h6>Rate</h6>\n                <br />\n                <span className=\"rate-amount red-bold\">\n                  $\n                  {shipment.rate\n                    .toString()\n                    .replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}\n                </span>\n              </div>\n              <div className=\"broker\">\n                <h6>Broker</h6>\n                <br />\n                {shipment.broker}\n              </div>\n            </div>\n          </div>\n          <div className=\"delivery\">\n            <h6>Delivery</h6>\n            <br />\n            <span className=\"red-bold\">\n              {shipment.delivery_warehouse.city},{\" \"}\n              {shipment.delivery_warehouse.state} <br />\n              Date: {formatDate(shipment.delivery_date)}\n            </span>\n          </div>\n          <div className=\"load-buttons\">\n            <Link className='app-button' to={`${basePath}/load/${shipment.id}`}>\n              View\n            </Link>\n            <Link className='app-button' to={`${basePath}/load/edit/${shipment.id}`}>\n              Edit\n            </Link>\n          </div>\n        </li>\n      );\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"LoadListBox blue-text\">\n        <h3 className=\"blue-back white-text\">{this.props.boxHeader}</h3>\n        <ul className=\"un-assigned-loads\">\n          {this.getLoadsWithStatus(this.props.loadStatus)}\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default LoadListBox;\n","import React, {Component} from 'react';\nimport './DriverCard.css';\nimport {Link} from 'react-router-dom';\nimport config from '../../config';\nimport AppContext from '../../Contexts/AppContext';\nimport { arrayIsEmpty } from '../../HelperFunctions/HelperFunctions';\n\n\nclass DriverCard extends Component{\n    \n    static defaultProps = {\n        driver: {}\n    }\n\n    static contextType = AppContext\n\n    render(){\n\n        const {driver} = this.props;\n        const {idleDrivers, shipments} = this.context;\n        let shipmentId = -1;\n        const busyDriver = arrayIsEmpty(idleDrivers.filter(idleDriver => idleDriver.id === driver.id));\n        if(busyDriver){\n            shipmentId = shipments.filter((shipment) => shipment.driver.id === driver.id)[0].id;\n        }\n\n        return(\n            <div className='DriverCard grey-back blue-text'>\n                <div className='flex-row'>\n                    <div className='card-div'>\n                        <h6>Driver</h6>\n                        <p>{driver.full_name}</p>\n                    </div>\n                    <div className='card-div'>\n                        <h6>Pay Rate</h6>\n                        <p>${driver.pay_rate}</p>\n                    </div>\n                    <div className='card-div'>\n                        <h6 className='small-header'>Equipment #</h6>\n                        <p>{driver.equipment.unit_num ? driver.equipment.unit_num : 'No Equipment'}</p>\n                    </div>\n                </div>\n                {\n                    shipmentId === -1 \n                    ?\n                    <div className='driver-buttons'>\n                        <Link to={`${config.BASEPATH}/driver/edit/${driver.id}`} className='app-button'>\n                            Edit\n                        </Link>\n                        <button className='app-button'>\n                            Delete\n                        </button>\n                    </div>\n                    :\n                    <div className='driver-buttons'>\n                        <span>\n                            Driver Busy\n                        </span>\n                        <Link className='app-button' to={`${config.BASEPATH}/load/${shipmentId}`}>\n                            View Load\n                        </Link>\n                    </div>\n                }\n                \n            </div>\n        )\n    }\n}\n\nexport default DriverCard;","import React, { Component } from 'react';\nimport './IdleDriversBox.css';\nimport AppContext from '../../Contexts/AppContext';\nimport DriverCard from '../DriverCard/DriverCard';\n\nclass IdleDriversBox extends Component {\n    \n    static contextType = AppContext;\n\n    renderIdleDriversList = () => {\n        const {idleDrivers} = this.context\n        return idleDrivers.map((iDriver) => {\n            return <li key={iDriver.id}><DriverCard driver={iDriver} /></li>\n        })\n    }\n\n    render() { \n        return (\n            <div className='IdleDriversBox'>\n                <h3 className='blue-back white-text'>Idle Drivers</h3>\n                <ul>\n                    {this.renderIdleDriversList()}\n                </ul>\n            </div>\n        );\n    }\n}\n \nexport default IdleDriversBox;","import React, { Component } from 'react';\nimport './DashboardPage.css';\nimport {Link} from 'react-router-dom';\nimport config from '../../config';\nimport LoadListBox from '../../Components/LoadListBox/LoadListBox';\nimport IdleDriversBox from '../../Components/IdleDriversBox/IdleDriversBox';\n\nclass DashboardPage extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {  }\n    }\n\n    render() { \n\n        const secondBoxLoadStatus = [\n            'in transit',\n            'loading',\n            'dispatched',\n            'unloading',\n        ]\n\n        return (  \n            <section className='DashboardPage width-wrapper'>\n                <div className='add-links'>\n                    <Link className='add-load app-button' to={`${config.BASEPATH}/load/new`}>\n                        Add Load\n                    </Link>\n                    <Link className='add-load app-button' to={`${config.BASEPATH}/driver/new`}>\n                        Add Driver\n                    </Link>\n                    <Link className='add-load app-button' to={`${config.BASEPATH}/equipment/new`}>\n                        Add Equipment\n                    </Link>\n                </div>\n                <LoadListBox \n                    oldLoadStatus='un-assigned' \n                    loadStatus={['un-assigned']}\n                    boxHeader='Un Assigned Loads'\n                />\n                <LoadListBox \n                    oldLoadStatus='dispatched' \n                    loadStatus={secondBoxLoadStatus} \n                    boxHeader='Loads in progress'\n                />\n                <IdleDriversBox />\n\n            </section>\n        );\n    }\n}\n \nexport default DashboardPage;","import TokenService from './TokenService';\nimport config from '../config';\n\nconst CarrierService = {\n    getCarrierData(){\n        return fetch(`${config.API_ENDPOINT}/carrier`, {\n            method: 'GET',\n            headers: {\n                \"content-type\": \"application/json\",\n                \"Authorization\": `bearer ${TokenService.getAuthToken()}`\n            }\n        })\n        .then(res => res.json())\n        .then(carrierData => {\n            return carrierData;\n        })\n        .catch(err => {\n            console.log(err);\n        })\n    },\n    getCarrierInfo(){\n        return fetch(`${config.API_ENDPOINT}/carrier-info`, {\n            method: 'GET',\n            headers: {\n                \"content-type\": \"application/json\",\n                \"Authorization\" : `bearer ${TokenService.getAuthToken()}`\n            }\n        })\n        .then(res => res.json())\n        .then(carrierInfo =>  {\n            return carrierInfo;\n        })\n        .catch(err => {\n            console.log(err);\n        })\n    }\n}\n\nexport default CarrierService;","import React, {Component} from 'react';\nimport AppContext from '../../Contexts/AppContext';\nimport './Logout.css';\nimport TokenService from '../../Services/TokenService';\nimport CarrierServices from '../../Services/CarrierServices';\n\nclass Logout extends Component {\n\n    static contextType = AppContext;\n\n    getCarrierInfoInComponent = async () => {\n        const carrier = await CarrierServices.getCarrierInfo()\n            .then(res => {\n                this.context.setLoggedInCarrier(res);\n                return res;\n            })\n            .catch(error => error);\n        this.setState({\n            carrier: carrier[0]\n        })\n    }\n\n    constructor(props){\n        super(props);\n        this.state = {\n            carrier: {}\n        }\n        this.getCarrierInfoInComponent()\n    }\n\n    state = {\n        carrier: {}\n    }\n\n    handleLogout = () => {\n        this.context.setLoggedIn(false);\n        TokenService.clearAuthToken();\n        this.props.history.push('/');\n    }\n\n    \n\n    render(){\n        return (\n            <div className='Logout width-wrapper'>\n                Welcome, <span className='carrier-name red-text'>\n                    {this.state.carrier.full_name}\n                </span>, <button className='app-link' onClick={() => {this.handleLogout()}}>Logout</button>\n            </div>\n        )\n    }\n}\n\nexport default Logout;","import TokenService from './TokenService';\nimport config from '../config';\n\nconst DriversService = {\n    getDriversData(){\n        return fetch(`${config.API_ENDPOINT}/drivers`, {\n            method: 'GET',\n            headers: {\n                \"content-type\": \"application/json\",\n                \"Authorization\": `bearer ${TokenService.getAuthToken()}`\n            }\n        })\n        .then(response => response.json())\n        .then(driversData => driversData)\n        .catch((error) => {\n            console.log(error);\n        })\n    },\n    getIdleDrivers(){\n        return fetch(`${config.API_ENDPOINT}/drivers/idle`, {\n            method: 'GET',\n            headers: {\n                \"content-type\": \"application/json\",\n                \"Authorization\": `bearer ${TokenService.getAuthToken()}`\n            }\n        })\n        .then(response => response.json())\n        .then(idleDrivers => idleDrivers)\n        .catch((error) => {\n            console.log(error);\n        })\n    },\n    updateEquipment(driverId, equipmentId){\n        \n    }\n}\n\nexport default DriversService;","import TokenService from \"./TokenService\";\nimport config from \"../config\";\n\nconst EquipmentService = {\n  getEquipments() {\n    return fetch(`${config.API_ENDPOINT}/equips`, {\n      method: \"GET\",\n      headers: {\n        \"content-type\": \"application/json\",\n        Authorization: `bearer ${TokenService.getAuthToken()}`\n      }\n    })\n      .then(response => response.json())\n      .then(equipments => equipments)\n      .catch(error => {\n        console.log(error);\n      });\n  },\n  addNewEquipment(equipment){\n    console.log(equipment);\n  },\n  updateEquipment(unit_num, id){\n    \n  }\n};\n\nexport default EquipmentService;\n","import React, {Component} from 'react';\nimport './LoadsPage.css';\nimport LoadListBox from '../../Components/LoadListBox/LoadListBox';\n\nclass LoadsPage extends Component {\n\n    render(){\n        return (\n            <section className='LoadsPage width-wrapper'>\n                <LoadListBox loadStatus='all' />\n            </section>\n        )\n    }\n}\n\nexport default LoadsPage;","import React, { Component } from 'react';\nimport './EquipmentCard.css';\nimport { Link } from 'react-router-dom';\nimport config from '../../config';\nimport AppContext from '../../Contexts/AppContext';\nimport {\n    arrayIsEmpty\n} from '../../HelperFunctions/HelperFunctions'\n\nclass EquipmentCard extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            editingMode: false\n        }\n    }\n\n    static contextType = AppContext\n\n    handleDeleteEquipment = (id) => {\n\n        let { equipments } = this.context\n        const { drivers, idleDrivers } = this.context\n        equipments = equipments.filter((equipment) => equipment.id !== id)\n        drivers.map(driver => {\n            if (driver.equipment.id === id) {\n                driver.equipment = {}\n            }\n            return driver\n        })\n        idleDrivers.map(driver => {\n            if (driver.equipment.id === id) {\n                driver.equipment = {}\n            }\n            return driver\n        })\n\n        this.context.setEquipments(equipments);\n        this.context.setDrivers(drivers);\n        this.context.setIdleDrivers(idleDrivers);\n\n    }\n\n    render() {\n\n        const { equipment } = this.props;\n        const { idleEquipments, shipments } = this.context;\n        const busyEquipment = arrayIsEmpty(idleEquipments.filter((idleEquipment) => idleEquipment.id === equipment.id))\n        let shipmentId = -1;\n        if(busyEquipment && equipment.driver.hasOwnProperty('id')){\n            shipmentId = shipments.filter((shipment) => shipment.equipment.id === equipment.id)[0].id;\n        }\n        \n        return (\n            <div className='EquipmentCard grey-back blue-text'>\n\n                <div className='flex-row'>\n                    <div className='equip-num'>\n                        <h6>Unit Num</h6>\n                        <p>{equipment.unit_num}</p>\n                    </div>\n                    {\n                        equipment.driver !== null &&\n                        <div className='equip-driver'>\n                            <h6>Driver</h6>\n                            <p className={equipment.driver.full_name ? '' : 'no-driver'}\n                            >{equipment.driver.full_name ? equipment.driver.full_name : 'No Driver Assigned'}</p>\n                        </div>\n                    }\n                </div>\n                {\n                    shipmentId === -1 \n                    ?\n                    <div className='equipment-buttons'>\n                        <Link className='app-button' to={`${config.BASEPATH}/equipment/edit/${equipment.id}`}>\n                            Edit\n                        </Link>\n                        <button className='app-button' onClick={() => { this.handleDeleteEquipment(equipment.id) }}>\n                            Delete\n                        </button>\n                    </div>\n                    :\n                    <div className='equipment-buttons'>\n                        <span>\n                            Equipment Busy\n                        </span>\n                        <Link className='app-button' to={`${config.BASEPATH}/load/${shipmentId}`}>\n                            View Load\n                        </Link>\n                    </div>\n                }\n\n\n\n            </div>\n        )\n    }\n}\n\nexport default EquipmentCard;","import React, { Component } from 'react';\nimport './EquipmentsPage.css';\nimport AppContext from '../../Contexts/AppContext';\nimport EquipmentCard from '../../Components/EquipmentCard/EquipmentCard';\n\nclass EquipmentsPage extends Component {\n\n    static contextType = AppContext;\n\n    handleAddEquipment = (e) => {\n        e.preventDefault();\n        console.log(`Equipment Add Submitted`);\n    }\n\n    renderEquipmentList = () => {\n\n        let { equipments } = this.context;\n        equipments = equipments.filter((equipment) => equipment.status === 'active')\n\n        return equipments.map(equip => {\n            return (\n                <li key={equip.id}>\n                    <EquipmentCard equipment={equip} />\n                </li>\n            )\n        })\n    }\n\n    render() {\n        return (\n            <section className='EquipmentPage width-wrapper'>\n                <div className='box'>\n                    <h3 className='box-header blue-back white-text'>Equipment List</h3>\n                    <ul className='equipment-list'>\n                        {this.renderEquipmentList()}\n                    </ul>\n                </div>\n            </section>\n        )\n    }\n}\n\n\nexport default EquipmentsPage;","import React, { Component } from 'react';\nimport './DriversPage.css';\nimport AppContext from '../../Contexts/AppContext';\nimport DriverCard from '../../Components/DriverCard/DriverCard';\n\nclass DriversPage extends Component {\n\n    static contextType = AppContext\n\n\n    renderDrivers = (drivers) => {\n        \n        return drivers.map((driver) => {\n            if(driver.status === 'active'){\n                return (\n                    <li key={driver.id}>\n                        <DriverCard driver={driver} />\n                    </li>\n                )\n            }\n            else{\n                return ''\n            }\n        })\n    }\n\n    render() {\n\n        const { drivers }= this.context\n\n        return (\n            <section className='DriversPage width-wrapper'>\n                <h4 className='blue-back white-text'>\n                    Drivers List\n                </h4>\n                <ul className='drivers-list'>\n                    {this.renderDrivers(drivers)}\n                </ul>\n            </section>\n        )\n    }\n}\n\n\nexport default DriversPage;","import React, { Component } from 'react';\nimport './DriversDropDown.css'\n\nclass DriversDropDown extends Component {\n    \n    constructor(props){\n        super(props)\n        this.state = {\n            optionsValue: props.defaultValue\n        }\n    }\n    \n    static defaultProps = {\n        drivers: [],\n        defaultValue: 0,\n        className: 'select-css',\n        name: 'driver',\n        id: 'driver'\n    }\n\n    handleChange = (e) => {\n        this.setState({\n            optionsValue: e.target.value\n        })\n    }\n\n    renderDriverOptions = (drivers) => {\n        if(drivers !== []){\n            return drivers.map((driver, i) => {\n                return (\n                    <option \n                        value={driver.id}\n                        key={i}\n                        defaultValue={true}\n                    >\n                        {driver.full_name}\n                    </option>\n                )\n            })\n        }\n        \n    }\n\n    render() {\n\n        const { \n            className = 'select-css', \n            drivers = [], \n            name='driver', \n            id='driver'\n        } = this.props;\n\n\n        return (\n            <div className='DriversDropDown'>\n                <select className={className}\n                    name={name}\n                    id={id} \n                    value={this.state.optionsValue} \n                    onChange={(e) => {this.handleChange(e)}}>\n                    <option value='-1'>No Driver</option>\n                    {this.renderDriverOptions(drivers)}    \n                </select>\n            </div>\n        );\n    }\n}\n\nexport default DriversDropDown;","import React, { Component } from 'react';\nimport './EquipmentEditPage.css';\nimport DriversDropDown from '../../Components/DriversDropDown/DriversDropDown';\nimport AppContext from '../../Contexts/AppContext';\nimport {\n    handleGoBack,\n    objectIsEmpty,\n    arrayIsEmpty,\n} from '../../HelperFunctions/HelperFunctions';\n// import EquipmentService from '../../Services/EquipmentsService';\n// import DriversService from '../../Services/DriversService';\n\nclass EquipmentEditPage extends Component {\n\n    static defaultProps = {\n        equipments: {},\n        idleDrivers: {},\n        rprops: {},\n    }\n\n    constructor(props) {\n        super(props);\n\n        // setting state so that edit equipment page\n        // already has values in it for the selected equipment to edit\n        // if not done this way , then another Get request had to be made for\n        // getting equipment by id \n        const { equipments, idleDrivers } = props;\n        const { id } = this.props.rprops.match.params;\n        const equipment = equipments.filter(equipment => equipment.id === parseInt(id, 10));\n        let driver = {};\n        let availableDrivers = idleDrivers.filter(driver => objectIsEmpty(driver.equipment))\n        let unitNum = '';\n        let currentDriver = -1;\n        let inIdleQueue = true;\n        if (equipment[0] !== undefined) {\n            driver = equipment[0].driver;\n            unitNum = equipment[0].unit_num;\n\n            // The server after adding serialization is sending in full_name and driver\n            // properties with empty strings so to solve and empty driver populating\n            // in the select statement the below line is as is, if there is a driver.id then\n            // set one else leave it to current driver which is -1\n            currentDriver = driver.id ? driver.id : currentDriver;\n            if (currentDriver !== -1) {\n                availableDrivers.unshift(driver);\n                inIdleQueue = !arrayIsEmpty(idleDrivers.filter((idleDr) => driver.id === idleDr.id));\n            }\n        }\n\n        this.state = {\n            error: '',\n            unitNumError: false,\n            unitNum,\n            equipment,\n            availableDrivers,\n            currentDriver,\n            inIdleQueue,\n        }\n    }\n\n    static contextType = AppContext\n\n    giveEquipment = (driver, equipment) => {\n        driver.equipment = {\n            id: equipment.id,\n            unit_num: equipment.unit_num,\n            status: 'active'\n        }\n        return driver;\n    }\n\n    takeAwayEquipment = (driver) => {\n        driver.equipment = {}\n        return driver;        \n    }\n\n    setDriverForEquipment = (equipment, driver) => {\n        \n        equipment.driver = driver\n        return equipment;\n    }\n\n    removeDriverFromEquipment = (equipment) => {\n        equipment.driver = {}\n        return equipment;\n    }\n\n    changeEquipmentForDriver = (idleDrivers, driver, newDriverId, oldDriverId, equipment) => {\n        if(driver.id === newDriverId && newDriverId !== -1){\n            driver = this.giveEquipment(driver, equipment);\n            idleDrivers.map((oldDriver) => {\n                if(oldDriverId === oldDriver.id){\n                    oldDriver = this.takeAwayEquipment(oldDriver)\n                }\n                return oldDriver;\n            })\n        } else if (driver.id === oldDriverId){ \n            driver = this.takeAwayEquipment(driver)\n        }\n        return driver;\n    }\n\n    // Updates the changes in state and in the database\n    handleEquipmentEdit = (e, equipmentArray) => {\n\n        e.preventDefault();\n        const equipment = equipmentArray[0];\n        const oldDriverId = equipment.driver.id === undefined ? -1 : equipment.driver.id;\n        const newDriverId = this.state.inIdleQueue ? parseInt(e.target['driver'].value, 10) : oldDriverId;\n        const unit_num = e.target['unit-num'].value;\n        const { equipments, idleDrivers, drivers } = this.props\n\n        // first if checks if 'No Driver' just stays as is and then dont enter changing driver\n        if(newDriverId !== oldDriverId){\n            \n            idleDrivers.map((driver) => {\n                driver = this.changeEquipmentForDriver(idleDrivers, driver, newDriverId, oldDriverId, equipment);\n                return driver;\n            })\n\n            drivers.map((driver) => {\n                driver = this.changeEquipmentForDriver(drivers, driver, newDriverId, oldDriverId, equipment);\n                return driver;\n            })\n\n            let removeEcecuted = false;\n            equipments.map((changeEquipemnt) => {\n                if(oldDriverId === -1){\n                    changeEquipemnt = this.setDriverForEquipment(equipment, idleDrivers.filter(driver => driver.id === newDriverId)[0])\n                }else {\n\n                    if((newDriverId === changeEquipemnt.driver.id || newDriverId === -1) && !removeEcecuted) {\n                        if(changeEquipemnt.id === equipment.id){\n                            changeEquipemnt = this.removeDriverFromEquipment(equipment)\n                            removeEcecuted = true;\n                        }\n                    }\n                    if(changeEquipemnt.id === equipment.id && newDriverId !== -1){\n                        changeEquipemnt = this.setDriverForEquipment(equipment, idleDrivers.filter(driver => driver.id === newDriverId)[0]);\n                    } \n                }\n                return changeEquipemnt\n            })\n            \n            // DriversService.updateEquipment(newDriverId, equipment.id)\n        }\n\n        if (unit_num !== equipment.unit_num) {\n            equipments.map((changeEquipment) => {\n                if (changeEquipment.id === equipment.id) {\n                    changeEquipment.unit_num = unit_num\n                }\n                return changeEquipment\n            });\n\n            idleDrivers.map((driver) => {\n                if(driver.equipment.id === equipment.id){\n                    driver.equipment.unit_num = unit_num\n                }\n                return driver;\n            });\n\n            drivers.map((driver) => {\n                if(driver.equipment.id === equipment.id){\n                    driver.equipment.unit_num = unit_num\n                }\n                return driver;\n            });\n            // EquipmentService.updateEquipment(unit_num, equipment.id);\n        }\n        \n        this.context.setIdleDrivers(idleDrivers);\n        this.context.setEquipments(equipments);\n        this.context.setDrivers(drivers);\n\n        handleGoBack(this.props.rprops.history);\n\n    }\n\n    validateUnitNum = (e) => {\n        const unitNum = e.target.value;\n        this.setState({\n            unitNum\n        })\n        if (unitNum.trim() === '') {\n            this.setState({\n                error: 'Invalid Unit Num',\n                unitNumError: true\n            })\n        } else {\n            this.setState({\n                error: '',\n                unitNumError: false\n            })\n        }\n    }\n\n    render() {\n\n        const { unitNum, equipment, availableDrivers, currentDriver } = this.state\n\n        return (\n            <section className='EquipmentEditPage width-wrapper'>\n\n                <form className='edit-equip' onSubmit={(e) => { this.handleEquipmentEdit(e, equipment) }}>\n                    <fieldset>\n                        <legend className='blue-back white-text'>\n                            <button type='button' className='app-button go-back' onClick={(e) => { handleGoBack(this.props.rprops.history) }}>\n                                Go Back\n                            </button>\n                            <span>Edit Equipment</span>\n                        </legend>\n                        <div className='flex'>\n                            <label htmlFor='unit-num'>\n                                <span className='input-title'>Unit Num:</span>\n                                <input\n                                    type='text'\n                                    id='unit-num'\n                                    name='unit-num'\n                                    required\n                                    value={unitNum}\n                                    onChange={(e) => { this.validateUnitNum(e) }}\n                                />\n                                {\n                                    this.state.unitNumError &&\n                                    <span className='error'>{this.state.error}</span>\n                                }\n                            </label>\n                            {\n                               this.state.inIdleQueue && \n                               <label htmlFor='driver'>\n                                    <span className='input-title'>Available Drivers</span>\n                                    {\n                                        equipment[0] !== undefined &&\n                                        <DriversDropDown\n                                            name={'driver'}\n                                            id={'driver'}\n                                            drivers={availableDrivers}\n                                            className={'select-css'}\n                                            defaultValue={currentDriver} />\n                                    }\n\n                                </label>\n                            }\n                            <button\n                                className='app-button'\n                                type='submit'\n                            >\n                                Save Changes\n                                </button>\n                        </div>\n                    </fieldset>\n                </form>\n            </section>\n        );\n    }\n}\n\nexport default EquipmentEditPage;","export function emptySpaces(word){\n    if(word.trim() === '')\n        return true;\n\n    return false;\n}\n\nexport function notValidState(state){\n    if(state.trim().length < 2)\n        return `Invalid state code, Eg. TX`\n}\n\nexport function notValidDate(date){\n    const date_regex = /^(0?[1-9]|1[0-2])\\/(0?[1-9]|1\\d|2\\d|3[01])\\/(15|18|17|16|19|20|21|23|24|25)\\d{2}$/ ;\n    return date.length < 8 || !date_regex.test(date);\n}","import React, { Component } from 'react';\nimport './AddLoadPage.css';\nimport {\n    handleGoBack,\n    formatDate,\n} from '../../HelperFunctions/HelperFunctions';\nimport {\n    notValidDate,\n    emptySpaces,\n} from '../../HelperFunctions/InputFieldValidations';\nimport DriversDropDown from '../../Components/DriversDropDown/DriversDropDown';\nimport AppContext from '../../Contexts/AppContext';\n\nclass AddLoadPage extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            hasError: false,\n            availableDrivers: [],\n            error: {\n                dateError: 'Enter Date in correct format \"MM/DD/YYYY\"',\n                pickupDate: false,\n                deliveryDate: false,\n                cityError: 'City is required',\n                pickupCity: false,\n                deliveryCity: false,\n                stateError: 'State is required',\n                pickupState: false,\n                deliveryState: false,\n                zipcodeError: 'Zipcode is required',\n                pickupZipcode: false,\n                deliveryZipcode: false,\n            },\n            pickupDate: formatDate(new Date()),\n            deliveryDate: formatDate(new Date()),\n            pickupCity: '',\n            deliveryCity: '',\n            pickupState: '',\n            deliveryState: '',\n            pickupZipcode: '',\n            deliveryZipcode: '',\n            miles: '',\n            rate: '',\n            broker: '',\n        }\n    }\n\n    static contextType = AppContext\n\n    // validation of date, Validates both pickup date and delivery date\n    // *** THIS FUNCTION IS DEPENDENT ON THE NAME PROPERTY OF THE INPUT BOXES ***\n    validateInputDate = (e) => {\n        const date = e.target.value;\n        const { name } = e.target;\n\n        name === 'pickup-date'\n            ? this.setState({ pickupDate: date })\n            : this.setState({ deliveryDate: date });\n\n        if (notValidDate(date)) {\n            name === 'pickup-date'\n                ? this.setState({\n                    error: {\n                        ...this.state.error,\n                        pickupDate: true,\n                    }\n                })\n                : this.setState({\n                    error: {\n                        ...this.state.error,\n                        deliveryDate: true,\n                    }\n                });\n        } else {\n            name === 'pickup-date'\n                ? this.setState({\n                    error: {\n                        ...this.state.error,\n                        pickupDate: false,\n                    }\n                })\n                : this.setState({\n                    error: {\n                        ...this.state.error,\n                        deliveryDate: false,\n                    }\n                });\n        }\n    }\n\n    validateCityInput = (e) => {\n        const city = e.target.value;\n        const { name } = e.target;\n\n        name === 'pickup-city'\n            ? this.setState({ pickupCity: city })\n            : this.setState({ deliveryCity: city });\n\n\n        if (emptySpaces(city)) {\n            name === 'pickup-city'\n                ? this.setState({\n                    error: {\n                        ...this.state.error,\n                        pickupCity: true,\n                    }\n                })\n                : this.setState({\n                    error: {\n                        ...this.state.error,\n                        deliveryCity: true,\n                    }\n                });\n        } else {\n            name === 'pickup-city'\n                ? this.setState({\n                    error: {\n                        ...this.state.error,\n                        pickupCity: false,\n                    }\n                })\n                : this.setState({\n                    error: {\n                        ...this.state.error,\n                        deliveryCity: false,\n                    }\n                });\n        }\n    }\n\n    validateStateInput = (e) => {\n        const state = e.target.value;\n        const { name } = e.target;\n\n        name === 'pickup-state'\n            ? this.setState({ pickupState: state })\n            : this.setState({ deliveryState: state });\n\n\n        if (emptySpaces(state)) {\n            name === 'pickup-state'\n                ? this.setState({\n                    error: {\n                        ...this.state.error,\n                        pickupState: true,\n                    }\n                })\n                : this.setState({\n                    error: {\n                        ...this.state.error,\n                        deliveryState: true,\n                    }\n                });\n        } else {\n            name === 'pickup-state'\n                ? this.setState({\n                    error: {\n                        ...this.state.error,\n                        pickupState: false,\n                    }\n                })\n                : this.setState({\n                    error: {\n                        ...this.state.error,\n                        deliveryState: false,\n                    }\n                });\n        }\n    }\n\n    validateZipcodeInput = (e) => {\n        const zipcode = e.target.value;\n        const { name } = e.target;\n\n        name === 'pickup-zipcode'\n            ? this.setState({ pickupZipcode: zipcode })\n            : this.setState({ deliveryZipcode: zipcode });\n\n\n        if (emptySpaces(zipcode)) {\n            name === 'pickup-zipcode'\n                ? this.setState({\n                    error: {\n                        ...this.state.error,\n                        pickupZipcode: true,\n                    }\n                })\n                : this.setState({\n                    error: {\n                        ...this.state.error,\n                        deliveryZipcode: true,\n                    }\n                });\n        } else {\n            name === 'pickup-zipcode'\n                ? this.setState({\n                    error: {\n                        ...this.state.error,\n                        pickupZipcode: false,\n                    }\n                })\n                : this.setState({\n                    error: {\n                        ...this.state.error,\n                        deliveryZipcode: false,\n                    }\n                });\n        }\n    }\n\n    // to populate the drivers drop down list\n    // with only those drivers that are idle and \n    // have an equipment avialable to be assigned\n    getAvailableDrivers = () => {\n        const { idleDrivers } = this.context;\n        const availableDrivers = idleDrivers.filter((driver) => !(Object.entries(driver.equipment).length === 0 && driver.equipment.constructor === Object));\n        return availableDrivers;\n    }\n\n    updateIdleDriverQueue = (driverId) => {\n        let { idleDrivers } = this.context;\n        idleDrivers = idleDrivers.filter(driver => driver.id !== driverId);\n        this.context.setIdleDrivers(idleDrivers)\n    }\n\n    handleAddLoad = (e) => {\n\n        e.preventDefault();\n\n        const broker = e.target['broker'].value.trim() || '';\n        const delivery_warehouse = {\n            city: e.target['delivery-city'].value.trim(),\n            state: e.target['delivery-state'].value,\n            zipcode: e.target['delivery-zipcode'].value.trim()\n        };\n        const pickup_warehouse = {\n            city: e.target['pickup-city'].value.trim(),\n            state: e.target['pickup-state'].value,\n            zipcode: e.target['pickup-zipcode'].value.trim()\n        };\n        const miles = e.target['miles'].value.trim() || '0';\n        const rate = e.target['rate'].value.trim() || '0';\n        const driverId = parseInt(e.target['driver'].value, 10);\n\n        // getting driver and equipment from drivers array in context\n        let driver = {}\n        let equipment = {}\n        let status = 'un-assigned';\n        if (driverId !== -1) {\n            this.context.drivers.map(contextDriver => {\n                if (contextDriver.id === driverId) {\n                    driver = {\n                        id: driverId,\n                        full_name: contextDriver.full_name,\n                        pay_rate: contextDriver.pay_rate,\n                        status: contextDriver.status\n                    }\n                    equipment = {\n                        id: contextDriver.equipment.id,\n                        status: contextDriver.equipment.status,\n                        unit_num: contextDriver.equipment.unit_num\n                    }\n                }\n                return contextDriver\n            });\n            this.updateIdleDriverQueue(driverId);\n            status = 'dispatched'\n        }\n\n        const pickup_date = e.target['pickup-date'].value;\n        const delivery_date = e.target['delivery-date'].value;\n\n        const newShipment = {\n            id: this.context.shipments.length + 50,\n            pickup_date,\n            delivery_date,\n            broker,\n            delivery_warehouse,\n            pickup_warehouse,\n            miles,\n            driver,\n            equipment,\n            rate,\n            status,\n        }\n\n        this.context.setShipments([\n            ...this.context.shipments,\n            newShipment\n        ])\n\n        handleGoBack(this.props.history);\n\n    }\n\n    render() {\n        const availableDrivers = this.getAvailableDrivers()\n        const { error } = this.state\n\n        return (\n            <section className='AddLoadPage width-wrapper'>\n                <form className='add-load-form' onSubmit={(e) => { this.handleAddLoad(e) }}>\n                    <fieldset>\n                        <legend className='blue-back white-text'>\n                            <button type='button' className='app-button go-back' onClick={(e) => { handleGoBack(this.props.history) }}>\n                                Go Back\n                            </button>\n                            <span>Add Load</span>\n                        </legend>\n                        <div className='flex'>\n                            <h4 className='fieldset-sub-title blue-text'>\n                                Pick Up Info\n                            </h4>\n                            <label htmlFor='pickup-date'>\n                                <span className='input-title'>* Date</span>\n                                <input\n                                    type='text'\n                                    id='pickup-date'\n                                    name='pickup-date'\n                                    maxLength='10'\n                                    value={this.state.pickupDate}\n                                    onChange={(e) => { this.validateInputDate(e) }}\n                                    onBlur={(e) => {\n                                        if (e.target.value === '') {\n                                            this.setState({\n                                                pickupDate: formatDate(new Date()),\n                                                error: {\n                                                    ...this.state.error,\n                                                    pickupDate: false\n                                                }\n                                            })\n                                        }\n                                    }}\n                                />\n                                {\n                                    error.pickupDate &&\n                                    <span className='error'>{error.dateError}</span>\n                                }\n                            </label>\n                            <label htmlFor='pickup-city'>\n                                <span className='input-title'>* City</span>\n                                <input\n                                    type='text'\n                                    id='pickup-city'\n                                    name='pickup-city'\n                                    placeholder='Eg. Dallas'\n                                    required\n                                    value={this.state.pickupCity}\n                                    onChange={(e) => { this.validateCityInput(e) }}\n                                />\n                                {\n                                    error.pickupCity &&\n                                    <span className='error'>{error.cityError}</span>\n                                }\n                            </label>\n                            <label htmlFor='pickup-state'>\n                                <span className='input-title'>* State</span>\n                                <input\n                                    type='text'\n                                    placeholder='Eg. TX'\n                                    maxLength='2'\n                                    id='pickup-state'\n                                    name='pickup-state'\n                                    required\n                                    value={this.state.pickupState}\n                                    onChange={(e) => { this.validateStateInput(e) }}\n                                />\n                                {\n                                    this.state.error.pickupState &&\n                                    <span className='error'>{this.state.error.stateError}</span>\n                                }\n                            </label>\n                            <label htmlFor='pickup-zipcode'>\n                                <span className='input-title'>* Zipcode</span>\n                                <input\n                                    type='text'\n                                    id='pickup-zipcode'\n                                    maxLength='10'\n                                    name='pickup-zipcode'\n                                    placeholder='Eg. 75001'\n                                    required\n                                    value={this.state.pickupZipcode}\n                                    onChange={(e) => { this.validateZipcodeInput(e) }}\n                                />\n                                {\n                                    this.state.error.pickupZipcode &&\n                                    <span className='error'>{this.state.error.zipcodeError}</span>\n                                }\n                            </label>\n                            <h4 className='fieldset-sub-title blue-text'>\n                                Delivery Info\n                            </h4>\n                            <label htmlFor='delivery-date'>\n                                <span className='input-title'>* Date</span>\n                                <input\n                                    type='text'\n                                    id='delivery-date'\n                                    name='delivery-date'\n                                    maxLength='10'\n                                    value={this.state.deliveryDate}\n                                    onChange={(e) => { this.validateInputDate(e) }}\n                                    onBlur={(e) => {\n                                        if (e.target.value === '') {\n                                            this.setState({\n                                                deliveryDate: formatDate(new Date()),\n                                                error: {\n                                                    ...this.state.error,\n                                                    deliveryDate: false\n                                                }\n                                            })\n                                        }\n                                    }}\n                                />\n                                {\n                                    this.state.error.deliveryDate &&\n                                    <span className='error'>{this.state.error.dateError}</span>\n                                }\n                            </label>\n                            <label htmlFor='delivery-city'>\n                                <span className='input-title'>* City</span>\n                                <input\n                                    type='text'\n                                    id='delivery-city'\n                                    name='delivery-city'\n                                    placeholder='Eg. Indianapolis'\n                                    required\n                                    value={this.state.deliveryCity}\n                                    onChange={(e) => { this.validateCityInput(e) }}\n                                />\n                                {\n                                    this.state.error.deliveryCity &&\n                                    <span className='error'>{this.state.error.cityError}</span>\n                                }\n                            </label>\n                            <label htmlFor='delivery-state'>\n                                <span className='input-title'>* State</span>\n                                <input\n                                    type='text'\n                                    placeholder='Eg. IN'\n                                    maxLength='2'\n                                    id='delivery-state'\n                                    name='delivery-state'\n                                    required\n                                    value={this.state.deliveryState}\n                                    onChange={(e) => { this.validateStateInput(e) }}\n                                />\n                                {\n                                    this.state.error.deliveryState &&\n                                    <span className='error'>{this.state.error.stateError}</span>\n                                }\n                            </label>\n                            <label htmlFor='delivery-zipcode'>\n                                <span className='input-title'>* Zipcode</span>\n                                <input\n                                    type='text'\n                                    id='delivery-zipcode'\n                                    name='delivery-zipcode'\n                                    maxLength='10'\n                                    placeholder='Eg. 46225'\n                                    required\n                                    value={this.state.deliveryZipcode}\n                                    onChange={(e) => { this.validateZipcodeInput(e) }}\n                                />\n                                {\n                                    this.state.error.deliveryZipcode &&\n                                    <span className='error'>{this.state.error.zipcodeError}</span>\n                                }\n                            </label>\n                            <h4 className='fieldset-sub-title blue-text'>\n                                Additional Info\n                            </h4>\n                            <label htmlFor='miles'>\n                                <span className='input-title'>Miles</span>\n                                <input\n                                    type='number'\n                                    min='0'\n                                    id='miles'\n                                    name='miles'\n                                />\n                                {\n                                    // this.state.unitNumError &&\n                                    // <span className='error'>{this.state.error}</span>\n                                }\n                            </label>\n                            <label htmlFor='rate'>\n                                <span className='input-title'>Rate</span>\n                                <input\n                                    type='number'\n                                    min='0'\n                                    id='rate'\n                                    name='rate'\n                                />\n                                {\n                                    // this.state.unitNumError &&\n                                    // <span className='error'>{this.state.error}</span>\n                                }\n                            </label>\n                            <label htmlFor='broker'>\n                                <span className='input-title'>Broker</span>\n                                <input\n                                    type='text'\n                                    id='broker'\n                                    name='broker'\n                                />\n                            </label>\n                            <label htmlFor='driver'>\n                                <span className='input-title'>Assign Driver</span>\n                                <DriversDropDown name='driver' id='driver' drivers={availableDrivers} className='select-css' />\n                                {\n                                    // incorrectPassword &&\n                                    // <span className='error'>{error}</span>\n                                }\n                            </label>\n                            {\n                                !(\n                                    error.pickupCity ||\n                                    error.deliveryCity ||\n                                    error.pickupDate ||\n                                    error.deliveryDate ||\n                                    error.pickupState ||\n                                    error.deliveryState ||\n                                    error.pickupZipcode ||\n                                    error.deliveryZipcode\n                                )\n                                    ?\n                                    <button\n                                        className='app-button'\n                                        type='submit'\n                                    >\n                                        Add New Load\n                                    </button>\n                                    :\n                                    <button\n                                        className='app-button'\n                                        type='submit'\n                                        disabled\n                                    >\n                                        Add New Load\n                                    </button>\n                            }\n\n                        </div>\n                    </fieldset>\n                </form>\n            </section>\n        );\n    }\n}\n\nexport default AddLoadPage;","import React, { Component } from 'react';\nimport './LoadByIdPage.css';\nimport AppContext from '../../Contexts/AppContext';\nimport { arrayIsEmpty, objectIsEmpty, renderLoadStatusOptions } from '../../HelperFunctions/HelperFunctions';\n\nclass LoadByIdPage extends Component {\n\n    static defaultProps = {\n        rprops: {},\n        shipments: []\n    }\n\n    constructor(props) {\n        super(props);\n\n        const id = parseInt(this.props.rprops.match.params.id, 10)\n        const { shipments } = this.props;\n        let shipment = {};\n        let status = '';\n        if (!arrayIsEmpty(shipments)) {\n            shipment = shipments.filter(shipment => shipment.id === id)[0];\n            status = shipment.status\n        }\n        console.log(status);\n        this.state = {\n            shipment,\n            status,\n        }\n    }\n\n    // remove drivers when status is changed to un-assigned\n    removeDriverAndEquipmentFromShipment = (shipment) => {\n        shipment.driver = {}\n        shipment.equipment = {}\n        return shipment;\n    }\n\n    handleChangeLoadStatus = (e) => {\n        e.preventDefault();\n        \n        const {status} = this.state;\n        this.setState({\n            shipment: {\n                ...this.state.shipment,\n                status\n            }\n        }, () => {\n            const { shipment } = this.state;\n            let { shipments } = this.props;\n            shipments = shipments.map((propShipment) => {\n                if (propShipment.id === shipment.id) {\n                    propShipment.status = status\n                    if(status === 'un-assigned'){\n                        propShipment = this.removeDriverAndEquipmentFromShipment(propShipment);\n                    }\n                }\n                return propShipment\n            })\n            this.context.setShipments(shipments);\n        })\n\n    }\n\n    static contextType = AppContext\n\n    render() {\n\n        const { shipment } = this.state\n\n        return (\n            !objectIsEmpty(shipment) ?\n                <section className='LoadByIdPage width-wrapper'>\n                    <div className='flex-row'>\n                        <div className='pick-up-info box-style'>\n                            <h3>Pick Up Info</h3>\n                            <div className='pickup info-wrapper'>\n                                <div className='pickup info date'>\n                                    <h6>Date</h6>\n                                    <p>{shipment.pickup_date}</p>\n                                </div>\n                                <div className='pickup info city'>\n                                    <h6>City, ST</h6>\n                                    <p>{shipment.pickup_warehouse.city}, {shipment.pickup_warehouse.state}</p>\n                                </div>\n                                <div className='pickup info state'>\n                                    <h6>Zipcode</h6>\n                                    <p>{shipment.pickup_warehouse.zipcode}</p>\n                                </div>\n                            </div>\n                        </div>\n                        <div className='delivery-info box-style'>\n                            <h3>Delivery Info</h3>\n                            <div className='delivery info-wrapper'>\n                                <div className='delivery info'>\n                                    <h6>Delivery Date</h6>\n                                    <p>{shipment.delivery_date}</p>\n                                </div>\n                                <div className='delivery info city'>\n                                    <h6>City, ST</h6>\n                                    <p>{shipment.delivery_warehouse.city}, {shipment.delivery_warehouse.state}</p>\n                                </div>\n                                <div className='delivery info state'>\n                                    <h6>Zipcode</h6>\n                                    <p>{shipment.delivery_warehouse.zipcode}</p>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    <div className='additional-info box-style'>\n                        <h3>Additional Info</h3>\n                        <div className='flex-row'>\n                            <div className='additional-info info-wrapper'>\n                                <div className='additional-info info'>\n                                    <h6>Miles</h6>\n                                    <p>{shipment.miles}</p>\n                                </div>\n                                <div className='additional-info info city'>\n                                    <h6>Rate</h6>\n                                    <p className='red-text'>${shipment.rate}</p>\n                                </div>\n                                <div className='additional-info info state'>\n                                    <h6>Broker</h6>\n                                    <p>{shipment.broker}</p>\n                                </div>\n                            </div>\n                            <div className='additional-info change-status'>\n                                <div className='additional-info info'>\n                                    <form onSubmit={(e) => { this.handleChangeLoadStatus(e) }}>\n                                        <fieldset>\n                                            <legend><h6>Status</h6></legend>\n                                            {\n                                                shipment.status !== 'un-assigned'\n                                                    ?\n                                                    <select\n                                                        className='select-css'\n                                                        name='status'\n                                                        id='status'\n                                                        value={this.state.status}\n                                                        onChange={(e) => { this.setState({ status: e.target.value }) }}>\n                                                        {\n                                                            renderLoadStatusOptions(this.context.loadStatus)\n                                                        }\n                                                    </select>\n                                                    :\n                                                    <select\n                                                        className='select-css'\n                                                        name='status'\n                                                        id='status'\n                                                        disabled\n                                                        defaultValue={this.state.status}\n                                                    >\n                                                        {\n                                                            renderLoadStatusOptions(this.context.loadStatus)\n                                                        }\n                                                    </select>\n                                            }\n\n                                            {\n                                                this.state.status !== shipment.status\n                                                    ?\n                                                    <button type='submit' className='app-button'>\n                                                        Change Status\n                                                    </button>\n                                                    :\n                                                    <button className='app-button' disabled>\n                                                        Change Status\n                                                    </button>\n                                            }\n                                        </fieldset>\n                                    </form>\n\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    {\n                        shipment.status !== 'un-assigned'\n                            ?\n                            <div className='driver-info box-style'>\n                                <h3>Driver Info</h3>\n                                <div className='flex-row'>\n                                    \n                                    <div className='additional-info info-wrapper'>\n                                        <div className='additional-info info'>\n                                            <h6>Driver</h6>\n                                            <p>{shipment.driver.full_name}</p>\n                                        </div>\n                                        <div className='additional-info info city'>\n                                            <h6>Pay per Mile</h6>\n                                            <p>${shipment.driver.pay_rate}</p>\n                                        </div>\n                                    </div>\n                                    <div className='additional-info info-wrapper'>\n                                        <div className='additional-info info state'>\n                                            <h6>Drvier Payout</h6>\n                                            <p className='red-text'>${shipment.driver.pay_rate * shipment.miles}</p>\n                                        </div>\n                                        <div className='additional-info info'>\n                                            <h6>Equipment #</h6>\n                                            <p>{shipment.equipment.unit_num}</p>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                            :\n                            <div className='driver-info box-style'>\n                                <h3>Assign Driver</h3>\n                                <div className='assign-driver'>\n                                    Assign Driver Section\n                                </div>\n                            </div>\n                    }\n                </section>\n                :\n                <></>\n        );\n    }\n}\n\nexport default LoadByIdPage;","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { Switch, Route, Redirect } from \"react-router-dom\";\nimport Header from \"../Header/Header\";\nimport HomePage from \"../../Routes/HomePage/HomePage\";\nimport AppContext from \"../../Contexts/AppContext\";\nimport CreateAccountPage from \"../../Routes/CreateAccountPage/CreateAccountPage\";\nimport LoginPage from \"../../Routes/LoginPage/LoginPage\";\nimport TokenService from \"../../Services/TokenService\";\nimport DashboardPage from \"../../Routes/DashboardPage/DashboardPage\";\nimport Logout from \"../Logout/Logout\";\nimport CarrierService from \"../../Services/CarrierServices\";\nimport DriversService from \"../../Services/DriversService\";\nimport EquipmentService from \"../../Services/EquipmentsService\";\nimport LoadsPage from \"../../Routes/LoadsPage/LoadsPage\";\nimport EquipmentsPage from \"../../Routes/EquipmentsPage/EquipmentsPage\";\nimport DriversPage from \"../../Routes/DriversPage/DriversPage\";\nimport EquipmentEditPage from \"../../Routes/EquipmentEditPaage/EquipmentEditPage\";\nimport AddLoadPage from \"../../Routes/AddLoadPage/AddLoadPage\";\nimport { objectIsEmpty } from '../../HelperFunctions/HelperFunctions';\nimport LoadByIdPage from \"../../Routes/LoadByIdPage/LoadByIdPage\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      basePath: \"/dispatch-office-client\",\n      loggedIn: false,\n      newUser: false,\n      shipments: [],\n      drivers: [],\n      idleDrivers: [],\n      idleEquipments: [],\n      equipments: [],\n      loggedInCarrier: {\n        full_name: \"\",\n        company_name: \"\",\n        mc_num: \"\"\n      }\n    };\n  }\n\n  // gets all the shipments\n  getShipments = async () => {\n    return CarrierService.getCarrierData()\n      .then(data => data)\n      .catch(err => console.log(err));\n  };\n\n  getDrivers = async () => {\n    return DriversService.getDriversData()\n      .then(data => data)\n      .catch(err => console.log(err))\n  }\n\n  // gets all idleDrivers for dashboard\n  getIdleDrivers = async () => {\n    return DriversService.getIdleDrivers()\n      .then(data => {\n        data.map((driver) => {\n          if (!objectIsEmpty(driver.equipment)) {\n            this.setState({\n              idleEquipments: [\n                ...this.state.idleEquipments,\n                driver.equipment\n              ]\n            })\n          }\n          return driver\n        })\n        return data\n      })\n      .catch(err => console.log(err));\n  };\n\n  getEquipments = async () => {\n    return EquipmentService.getEquipments()\n      .then(data => data)\n      .catch(err => console.log(err));\n  }\n\n  // only one function used in context now to be used in login page\n  getAllData = async () => {\n    if (TokenService.hasAuthToken()) {\n      await Promise.all([\n        this.getShipments(),\n        this.getDrivers(),\n        this.getEquipments(),\n        this.getIdleDrivers()\n      ])\n        .then(([\n          shipments,\n          drivers,\n          equipments,\n          idleDrivers\n        ]) => {\n          this.setState({\n            shipments,\n            drivers,\n            equipments,\n            idleDrivers\n          })\n        })\n        .catch((err) => console.log(err));\n    }\n  }\n\n  componentDidMount = () => {\n    this.setState({\n      loggedIn: TokenService.hasAuthToken()\n    });\n    this.getAllData();\n  };\n\n  setLoggedIn = loggedIn => {\n    this.setState({\n      loggedIn\n    });\n  };\n\n  setLoggedInCarrier = loggedInCarrier => {\n    this.setState({\n      loggedInCarrier\n    });\n  };\n\n  setShipments = shipments => {\n    this.setState({\n      shipments\n    });\n  };\n\n  setEquipments = equipments => {\n    this.setState({\n      equipments\n    })\n  }\n\n  setDrivers = drivers => {\n    this.setState({\n      drivers\n    })\n  }\n\n  setIdleDrivers = idleDrivers => {\n    const idleEquipments = [];\n    this.setState({\n      idleEquipments\n    })\n    idleDrivers.map(driver => {\n      if (!objectIsEmpty(driver.equipment)) {\n        idleEquipments.push(driver.equipment)\n        this.setState({\n          idleEquipments\n        })\n      }\n      return driver\n    })\n    this.setState({\n      idleDrivers\n    })\n  }\n\n  setNewUser = newUser => {\n    this.setState({\n      newUser\n    });\n  };\n\n  render() {\n    const value = {\n      basePath: this.state.basePath,\n      loggedIn: this.state.loggedIn,\n      newUser: this.state.newUser,\n      setLoggedIn: this.setLoggedIn,\n      setNewUser: this.setNewUser,\n      setShipments: this.setShipments,\n      setEquipments: this.setEquipments,\n      setIdleDrivers: this.setIdleDrivers,\n      setDrivers: this.setDrivers,\n      setLoggedInCarrier: this.setLoggedInCarrier,\n      loggedInCarrier: this.state.loggedInCarrier,\n      shipments: this.state.shipments,\n      idleDrivers: this.state.idleDrivers,\n      equipments: this.state.equipments,\n      drivers: this.state.drivers,\n      idleEquipments: this.state.idleEquipments,\n      getAllData: this.getAllData,\n      loadStatus: [\n        'un-assigned',\n        'dispatched',\n        'loading',\n        'in transit',\n        'unloading',\n        'completed'\n      ]\n    };\n\n    return (\n      <AppContext.Provider value={value}>\n        <div className=\"App\">\n          <Header />\n          {this.state.loggedIn && <Route path=\"/\" component={Logout} />}\n          <Switch>\n            {/* Begin the app with the /app endpoint */}\n\n            <Route exact path=\"/\">\n              <Redirect to={value.basePath} />\n            </Route>\n\n            <Route exact path={value.basePath} component={HomePage} />\n\n            <Route\n              exact\n              path={`${value.basePath}/create-account`}\n              component={CreateAccountPage}\n            />\n\n            <Route\n              exact\n              path={`${value.basePath}/login`}\n              component={LoginPage}\n            />\n\n            <Route\n              exact\n              path={`${value.basePath}/dashboard`}\n              component={DashboardPage}\n            />\n\n            <Route\n              exact\n              path={`${value.basePath}/loads`}\n              component={LoadsPage}\n            />\n\n            <Route\n              exact\n              path={`${value.basePath}/equipments`}\n              component={EquipmentsPage}\n            />\n\n            <Route\n              exact\n              path={`${value.basePath}/drivers`}\n              component={DriversPage}\n            />\n\n            <Route\n              exact\n              path={`${value.basePath}/equipment/edit/:id`}\n              component={(rprops) => {\n                return <EquipmentEditPage\n                  rprops={rprops}\n                  equipments={this.state.equipments}\n                  idleDrivers={this.state.idleDrivers}\n                  drivers={this.state.drivers} />\n              }}\n            />\n\n            <Route\n              exact\n              path={`${value.basePath}/load/new`}\n              component={AddLoadPage}\n            />\n\n            {/* \n              Driver Edit Page\n            <Route\n              exact\n              path={`${value.basePath}/driver/edit/:id`}\n              component={(rprops) => {\n                return <DriverEditPage\n                  rprops={rprops}\n                  equipments={this.state.equipments}\n                  idleDrivers={this.state.idleDrivers}\n                  drivers={this.state.drivers} />\n              }}\n            /> */}\n\n            <Route\n              exact\n              path={`${value.basePath}/load/:id`}\n              component={(rprops) => {\n                return <LoadByIdPage\n                  rprops={rprops}\n                  shipments={this.state.shipments}\n                />\n              }}\n            />\n\n          </Switch>\n        </div>\n      </AppContext.Provider>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>\n    , \n    document.getElementById('root'));\n"],"sourceRoot":""}