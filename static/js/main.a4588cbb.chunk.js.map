{"version":3,"sources":["Contexts/AppContext.js","Components/DesktopMenu/DesktopMenu.js","Components/MobileMenu/MobileMenu.js","Components/Header/Header.js","Components/HomePageSection/HomePageSection.js","Routes/HomePage/HomePage.js","Components/CreateAccount/CreateAccount.js","Routes/CreateAccountPage/CreateAccountPage.js","config.js","Services/TokenService.js","Services/AuthApiService.js","Components/LoginForm/LoginForm.js","Routes/LoginPage/LoginPage.js","HelperFunctions/HelperFunctions.js","Components/LoadListBox/LoadListBox.js","Services/DriversService.js","Components/DriverCard/DriverCard.js","Components/IdleDriversBox/IdleDriversBox.js","Routes/DashboardPage/DashboardPage.js","Services/CarrierServices.js","Components/Logout/Logout.js","Services/EquipmentsService.js","Routes/LoadsPage/LoadsPage.js","Components/EquipmentCard/EquipmentCard.js","Routes/EquipmentsPage/EquipmentsPage.js","Routes/DriversPage/DriversPage.js","Components/DriversDropDown/DriversDropDown.js","Routes/EquipmentEditPaage/EquipmentEditPage.js","HelperFunctions/InputFieldValidations.js","Services/ShipmentsService.js","Routes/AddLoadPage/AddLoadPage.js","Routes/LoadByIdPage/LoadByIdPage.js","Routes/AddDriverPage/AddDriverPage.js","Routes/AddEquipmentPage/AddEquipmentPage.js","Routes/DriverEditPage/DriverEditPage.js","Routes/EditLoadPage/EditLoadPage.js","Components/App/App.js","index.js"],"names":["React","createContext","basePath","loggedIn","newUser","setLoggedIn","setNewUser","setShipments","setEquipments","setIdleDrivers","setDrivers","getAllData","loggedInCarrier","shipments","setLoggedInCarrier","idleDrivers","idleEquipments","equipments","drivers","loadStatus","DesktopMenu","this","context","className","to","Component","contextType","AppContext","MobileMenu","props","changeMenuOpenState","setState","menuOpen","state","closeMenuWhenLargerScreen","e","window","innerWidth","componentDidMount","addEventListener","onClick","Header","HomePageSection","HomePage","CreateAccount","handleFormSubmit","preventDefault","target","username","password","full_name","company_name","mc_num","user","value","console","log","onSubmit","htmlFor","type","id","name","required","CreateAccountPage","API_ENDPOINT","process","TOKEN_KEY","BASEPATH","TokenService","saveAuthToken","token","localStorage","setItem","config","getAuthToken","getItem","clearAuthToken","removeItem","hasAuthToken","AuthApiService","postLogin","credentials","fetch","method","headers","body","JSON","stringify","then","res","ok","json","Error","error","message","catch","LoginForm","incorrectUsername","incorrectPassword","handleSubmitLoginForm","focus","authToken","loggedInUser","onLoginSuccess","defaultProps","LoginPage","a","history","push","handleGoBack","goBack","routeUserTo","route","objectIsEmpty","obj","Object","entries","length","constructor","arrayIsEmpty","arr","formatCurrency","amount","toString","replace","formatDate","dbDate","date","Date","day","getDate","month","getMonth","year","getFullYear","renderLoadStatusOptions","statusArray","map","status","i","key","renderEquipmentOptions","equipment","unit_num","getAvailableDrivers","filter","driver","removeEquipmentDriver","pay_rate","LoadListBox","getLoadsWithStatus","shipment","includes","property","sort","b","sortShipments","pickup_warehouse","city","pickup_date","miles","rate","broker","delivery_warehouse","delivery_date","boxHeader","DriversService","getDriversData","response","driversData","getIdleDrivers","updateEquipment","equipment_id","Authorization","updateDriver","addDriver","DriverCard","handleDeleteDriver","driverToRemove","driverId","updateDriverInDB","shipmentId","idleDriver","IdleDriversBox","renderIdleDriversList","iDriver","DashboardPage","oldLoadStatus","CarrierService","getCarrierData","carrierData","err","getCarrierInfo","carrierInfo","Logout","getCarrierInfoInComponent","CarrierServices","carrier","handleLogout","EquipmentService","getEquipments","addNewEquipment","LoadsPage","EquipmentCard","handleDeleteEquipment","EquipmentsService","editingMode","idleEquipment","hasOwnProperty","EquipmentsPage","handleAddEquipment","renderEquipmentList","equip","DriversPage","renderDrivers","DriversDropDown","handleChange","optionsValue","renderDriverOptions","defaultValue","onChange","EquipmentEditPage","giveEquipment","takeAwayEquipment","setDriverForEquipment","removeDriverFromEquipment","changeEquipmentForDriver","newDriverId","oldDriverId","oldDriver","handleEquipmentEdit","equipmentArray","undefined","inIdleQueue","parseInt","removeExecuted","changeEquipemnt","changeEquipment","rprops","validateUnitNum","unitNum","trim","unitNumError","match","params","availableDrivers","currentDriver","unshift","idleDr","emptySpaces","word","notValidDate","test","isNotValidDriverName","isNotValidPay","pay","isNaN","ShipmentsSerivce","insertShipment","driver_id","pickup_city","pickup_state","pickup_zipcode","delivery_city","delivery_state","delivery_zipcode","updateShipment","deleteShipment","AddLoadPage","validateInputDate","pickupDate","deliveryDate","validateCityInput","pickupCity","deliveryCity","validateStateInput","pickupState","deliveryState","validateZipcodeInput","zipcode","pickupZipcode","deliveryZipcode","updateIdleDriverQueue","handleAddLoad","toUpperCase","contextDriver","shipmentInDB","newShipment","hasError","dateError","cityError","stateError","zipcodeError","maxLength","onBlur","placeholder","min","disabled","LoadByIdPage","removeDriverAndEquipmentFromShipment","handleChangeLoadStatus","ShipmentsService","propShipment","handleAssignDriver","driverAssigned","avaialableDrivers","onDriverDropDownChange","handleShipmentDelete","shipmentToDelete","driverPayout","AddDriverPage","validateDriverName","isNotValid","driverName","driverNameError","validatePayRate","driverPay","driverPayError","handleAddDriver","dbDriver","contextEquipment","availableEquipments","AddEquipmentPage","validateUnitNumField","equipmentNumError","equipmentNum","dbEquipment","DriverEditPage","driverToChange","makeDriverChanges","changes","handleEditDriver","changeDriver","newEquipmentId","oldEquipmentId","newEquipment","DriversSerivce","propsEquipment","EditLoadPage","stateCode","handleEditLoad","newShipmentFields","updateShipmentInDB","App","getShipments","data","getDrivers","Promise","all","Provider","path","component","exact","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a4588cbb.chunk.js","sourcesContent":["import React from 'react';\n\nexport default React.createContext({\n    basePath: '',\n    loggedIn: () => {},\n    newUser: () => {},\n    setLoggedIn: () => {},\n    setNewUser: () => {},\n    setShipments: () => {},\n    setEquipments: () => {},\n    setIdleDrivers: () => {},\n    setDrivers: () => {},\n    getAllData: () => {},\n    loggedInCarrier: {},\n    shipments: [],\n    setLoggedInCarrier: () => {},\n    idleDrivers: [],\n    idleEquipments: [],\n    equipments: [],\n    drivers: [],\n    loadStatus: []\n});","import React, { Component } from 'react';\nimport './DesktopMenu.css';\nimport {Link} from 'react-router-dom';\nimport AppContext from '../../Contexts/AppContext';\n\nclass DesktopMenu extends Component {\n\n    static contextType = AppContext;\n\n    render() {\n\n        const {basePath} = this.context;\n        \n        return (\n            <nav className='DesktopMenu'>\n                <ul className='menu-list'>\n                <li className='menu-item'>\n                    <Link to={`${basePath}/dashboard`}>\n                        Dashboard\n                        </Link>\n                </li>\n                <li className='menu-item'>\n                    <Link to={`${basePath}/loads`}>\n                        Loads\n                        </Link>\n                </li>\n                <li className='menu-item'>\n                    <Link to={`${basePath}/equipments`}>\n                        Equipments\n                        </Link>\n                </li>\n                <li className='menu-item'>\n                    <Link to={`${basePath}/drivers`}>\n                        Drivers\n                        </Link>\n                </li>\n            </ul>\n            </nav>\n        );\n    }\n}\n\n\nexport default DesktopMenu","import React, { Component } from 'react';\nimport './MobileMenu.css';\nimport AppContext from '../../Contexts/AppContext';\nimport { Link } from 'react-router-dom';\n\nclass MobileMenu extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            menuOpen: false\n        }\n    }\n\n    static contextType = AppContext;\n\n    changeMenuOpenState = () => {\n        this.setState({\n            menuOpen: !this.state.menuOpen\n        })\n    }\n\n    // closes menu \n    // When it is open on mobile and resized to larger screen\n    // and the menu for larger screen pops up and this closes\n    closeMenuWhenLargerScreen = (e) => {\n        if (window.innerWidth > 1050) {\n            this.setState({\n                menuOpen: false\n            })\n        }\n    }\n\n    componentDidMount = () => {\n        window.addEventListener('resize', this.closeMenuWhenLargerScreen)\n    }\n\n\n    render() {\n\n        const { basePath } = this.context;\n\n        return (\n            <nav className='MobileMenu'>\n                <button className='menu-button' onClick={this.changeMenuOpenState}>\n                    <div></div>\n                    <div></div>\n                    <div></div>\n                </button>\n                {\n                    this.state.menuOpen &&\n                    <ul className='menu-list'>\n                        <button\n                            className='close-button'\n                            onClick={this.changeMenuOpenState}>\n                            X\n                        </button>\n                        <li className='menu-item'>\n                            <Link\n                                to={`${basePath}/dashboard`}\n                                onClick={this.changeMenuOpenState}>\n                                Dashboard\n                            </Link>\n                        </li>\n                        <li className='menu-item'>\n                            <Link\n                                to={`${basePath}/loads`}\n                                onClick={this.changeMenuOpenState}>\n                                Loads\n                            </Link>\n                        </li>\n                        <li className='menu-item'>\n                            <Link\n                                to={`${basePath}/equipments`}\n                                onClick={this.changeMenuOpenState}>\n                                Equipments\n                            </Link>\n                        </li>\n                        <li className='menu-item'>\n                            <Link\n                                to={`${basePath}/drivers`}\n                                onClick={this.changeMenuOpenState}>\n                                Drivers\n                            </Link>\n                        </li>\n                    </ul>\n                }\n            </nav>\n        );\n    }\n}\n\nexport default MobileMenu;","import React, { Component } from 'react';\nimport './Header.css';\nimport { Link } from 'react-router-dom';\nimport AppContext from '../../Contexts/AppContext';\nimport DesktopMenu from '../DesktopMenu/DesktopMenu';\nimport MobileMenu from '../MobileMenu/MobileMenu';\n\nclass Header extends Component {\n\n    static contextType = AppContext;\n\n    render() {\n\n        const {loggedIn} = this.context;\n\n        return (\n            <header className='Header blue-back white-text'>\n                <div className='width-wrapper'>\n                    <Link to='/'>\n                        <div className='logo'>\n                            <span>Dispatch</span>\n                            <span>Office</span>\n                        </div>\n                    </Link>\n                    {\n                        loggedIn &&\n                        <>\n                            <DesktopMenu />\n                            <MobileMenu />\n                        </>\n                    }\n                </div>\n            </header>\n        );\n    }\n}\n\nexport default Header;","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport AppContext from '../../Contexts/AppContext';\n\nclass HomePageSection extends Component {\n\n    static contextType = AppContext;\n\n    render() {\n\n        const { basePath } = this.context;\n\n        return (\n            <div className='HomePageSection width-wrapper'>\n                <p>\n                    Welcome !! to <span className='span-title red-text'>Dispatch Office</span>, a transportation management\n                    system, which assists freight managers with workflow,\n                    automation and shipment scheduling.\n                </p>\n                <Link to={`${basePath}/create-account`} className='app-button'>\n                    Create Account\n                </Link>\n                <Link to={`${basePath}/login`} className='app-link'>\n                    Login\n                </Link>\n            </div>\n        );\n    }\n}\n\nexport default HomePageSection;","import React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport './HomePage.css';\nimport AppContext from '../../Contexts/AppContext';\nimport HomePageSection from '../../Components/HomePageSection/HomePageSection';\n\nclass HomePage extends Component {\n\n    static contextType = AppContext;\n\n    render() {\n        const { basePath, loggedIn, newUser } = this.context;\n        return (\n            !loggedIn\n                ?   <section className='HomePage blue-text'>\n                        <HomePageSection />\n                    </section>\n                :   !newUser\n                    ? <Redirect to={`${basePath}/dashboard`} />\n                    : <Redirect to={`${basePath}/newuser`} />\n        );\n    }\n}\n\nexport default HomePage;","import React, { Component } from 'react';\nimport './CreateAccount.css';\n\nclass CreateAccount extends Component {\n\n    handleFormSubmit = (e) => {\n        e.preventDefault();\n        const { username, password, full_name, company_name, mc_num } = e.target\n        const user = {\n            username: username.value,\n            password: password.value,\n            company_name: company_name.value,\n            mc_num: mc_num.value,\n            full_name: full_name.value\n        }\n        console.log(user);\n    }\n\n    render() {\n        return (\n            <form className='CreateAccount width-wrapper' onSubmit={(e) => { this.handleFormSubmit(e) }}>\n                <fieldset>\n                    <legend className='blue-back white-text'>\n                        Create Account\n                    </legend>\n                    <div className='flex'>\n                        <label htmlFor='username'>\n                            <span className='input-title'>* Username:</span>\n                            <input\n                                type='text'\n                                id='username'\n                                name='username'\n                                required\n                            />\n                            <span className='error'>Invalid Username</span>\n                        </label>\n                        <label htmlFor='password'>\n                            <span className='input-title'>* Password:</span>\n                            <input\n                                type='password'\n                                id='password'\n                                name='password'\n                                required\n                            />\n                            <span className='error'>Password Error</span>\n                        </label>\n                        <label htmlFor='full_name'>\n                            <span className='input-title'>* Full Name:</span>\n                            <input type='text' id='full_name' name='full_name' required />\n                            <span className='error'>Invalid Username</span>\n                        </label>\n                        <label htmlFor='company_name'>\n                            <span className='input-title'>Company Name:</span>\n                            <input type='text' id='company_name' name='company_name' required />\n                            <span className='error'>Company Name Error</span>\n                        </label>\n                        <label htmlFor='mc_num'>\n                            <span className='input-title'>MC Number:</span>\n                            <input type='text' id='mc_num' name='mc_num' />\n                            <span className='error'>MC Number Error</span>\n                        </label>\n                        <button\n                            className='app-button'\n                            type='submit'\n                        >\n                            Create Account\n                        </button>\n                    </div>\n                </fieldset>\n            </form>\n        );\n    }\n}\n\nexport default CreateAccount;","import React, { Component } from 'react';\nimport './CreateAccountPage.css';\nimport AppContext from '../../Contexts/AppContext';\nimport { Redirect } from 'react-router-dom';\nimport CreateAccount from '../../Components/CreateAccount/CreateAccount';\n\nclass CreateAccountPage extends Component {\n\n    static contextType = AppContext;\n\n    render() {\n\n        const { basePath, loggedIn, newUser } = this.context;\n\n        return (\n            !loggedIn\n                ? <div className='CreateAccountPage'>\n                    <CreateAccount />\n                </div>\n                : !newUser\n                    ? <Redirect to={`${basePath}/dashboard`} />\n                    : <Redirect to={`${basePath}/newuser`} />\n        );\n    }\n}\n\nexport default CreateAccountPage;","// const path = 'http://localhost:8000/api';\nconst path = 'https://rocky-waters-07125.herokuapp.com/api';\n\nexport default {\n    API_ENDPOINT: process.env.API_ENDPOINT || path,\n    TOKEN_KEY: process.env.TOKEN_KEY || '9e7d73be-f7f1-11e9-8f0b-362b9e155667',\n    BASEPATH: '/dispatch-office-client',\n}","import config from '../config';\n\nconst TokenService = {\n  saveAuthToken(token) {\n    window.localStorage.setItem(config.TOKEN_KEY, token)\n  },\n  getAuthToken() {\n    return window.localStorage.getItem(config.TOKEN_KEY)\n  },\n  clearAuthToken() {\n    window.localStorage.removeItem(config.TOKEN_KEY)\n  },\n  hasAuthToken() {\n    return !!TokenService.getAuthToken()\n  },\n}\n\nexport default TokenService","import config from '../config';\n\nconst AuthApiService = {\n    // login authorization\n    postLogin(credentials){\n        return fetch(`${config.API_ENDPOINT}/auth/login`, {\n            method: \"POST\",\n            headers: {\n                \"content-type\": \"application/json\"\n            },\n            body: JSON.stringify(credentials)\n        })\n        .then(res => {\n            if(!res.ok) {\n                return res.json().then(e => {\n                    throw new Error(e.error.message)\n                })\n            }\n            \n            return res.json();\n        })\n        .then(res => {\n            return res\n        })\n        .catch(error => {\n            return error;\n        })\n    }\n}\n\nexport default AuthApiService;","import React, { Component } from 'react';\nimport './LoginForm.css';\nimport TokenService from '../../Services/TokenService';\nimport AuthApiService from '../../Services/AuthApiService';\nimport AppContext from '../../Contexts/AppContext';\n\nclass LoginForm extends Component {\n\n    state = {\n        error: null,\n        incorrectUsername: false,\n        incorrectPassword: false,\n    }\n\n    static contextType = AppContext;\n\n    static defaultProps = {\n        onLoginSuccess: () => {},\n    }\n\n    handleSubmitLoginForm = (e) => {\n        e.preventDefault();\n\n        this.setState({\n            error: null,\n            incorrectUsername: false,\n            incorrectPassword: false,\n        })\n\n        const { username, password } = e.target;\n\n        AuthApiService.postLogin({\n            username: username.value,\n            password: password.value\n        })\n            .then((res) => {\n                if(res.message === 'Incorrect Username'){\n                    this.setState({\n                        incorrectUsername: true,\n                        error: res.message\n                    })\n                    username.value = '';\n                    password.value = '';\n                    username.focus();\n                }\n                if(res.message === 'Incorrect Password'){\n                    this.setState({\n                        incorrectPassword: true,\n                        error: res.message\n                    })\n                    password.value = '';\n                }\n                \n                if(!this.state.incorrectPassword && !this.state.incorrectUsername){\n                    TokenService.saveAuthToken(res.authToken);\n                    this.context.setLoggedInCarrier(res.loggedInUser);\n                    this.props.onLoginSuccess();\n                    username.value = '';\n                    password.value = '';\n                }\n            })\n            .catch((res) => {\n                this.setState({\n                    error: res.error\n                })\n            })\n    }\n\n    render() {\n\n\n        const { incorrectPassword, incorrectUsername, error } = this.state;\n\n\n        return (\n\n            <form className='LoginForm width-wrapper' onSubmit={(e) => { this.handleSubmitLoginForm(e) }}>\n                <fieldset>\n                    <legend className='blue-back white-text'>\n                        Login\n                        </legend>\n                    <div className='flex'>\n                        <label htmlFor='username'>\n                            <span className='input-title'>* Username:</span>\n                            <input\n                                type='text'\n                                id='username'\n                                name='username'\n                                required\n                            />\n                            {\n                                incorrectUsername &&\n                                <span className='error'>{error}</span>\n                            }\n                        </label>\n                        \n                        <label htmlFor='password'>\n                            <span className='input-title'>* Password:</span>\n                            <input\n                                type='password'\n                                id='password'\n                                name='password'\n                                required\n                            />\n                            {\n                                incorrectPassword &&\n                                <span className='error'>{error}</span>\n                            }\n                        </label>\n                        <button\n                            className='app-button'\n                            type='submit'\n                        >\n                            Login\n                            </button>\n                    </div>\n                </fieldset>\n            </form>\n        );\n    }\n}\n\nexport default LoginForm;","import React, { Component } from \"react\";\nimport \"./LoginPage.css\";\nimport AppContext from \"../../Contexts/AppContext\";\nimport LoginForm from \"../../Components/LoginForm/LoginForm\";\nimport { Redirect } from \"react-router-dom\";\n\nclass LoginPage extends Component {\n  static contextType = AppContext;\n\n  // using async await so app proceeds only once complete data for carrier is received\n  onLoginSuccess = async () => {\n    this.props.history.push(\"/\");\n    this.context.setLoggedIn(true);\n    this.context.getAllData();\n  };\n\n  render() {\n    const { basePath, loggedIn, newUser } = this.context;\n\n    return !loggedIn ? (\n      <section className=\"LoginPage\">\n        <LoginForm\n          onLoginSuccess={() => {\n            this.onLoginSuccess();\n          }}\n        />\n      </section>\n    ) : !newUser ? (\n      <Redirect to={`${basePath}/dashboard`} />\n    ) : (\n      <Redirect to={`${basePath}/newuser`} />\n    );\n  }\n}\n\nexport default LoginPage;\n","import React from 'react';\n\n// takes user back to the previous page in history\nexport function handleGoBack(history) {\n    return history.goBack();\n}\n\nexport function routeUserTo(history, route) {\n    return history.push(route);\n}\n\n// Returns true if the object is empty\nexport function objectIsEmpty(obj) {\n    return (Object.entries(obj).length === 0 && obj.constructor === Object);\n}\n\n// Return true is value passed in not undefined\nexport function isNotUndefined(value){\n    return value !== undefined;\n}\n\n// Returns true if array is empty\nexport function arrayIsEmpty(arr) {\n    return (arr.length === 0);\n}\n\nexport function formatCurrency(amount) {\n    return `$${amount.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}`;\n}\n\n// Returns date in a formatted manner\nexport function formatDate(dbDate) {\n    const date = new Date(dbDate);\n    const day = date.getDate();\n    const month = date.getMonth();\n    const year = date.getFullYear();\n    return `${month + 1}/${day}/${year}`;\n};\n\nexport function sortShipments(shipments, property) {\n    return shipments.sort((a, b) => (a[property] < b[property] ? 1 : -1));\n};\n\nexport function renderLoadStatusOptions(statusArray) {\n    return statusArray.map((status, i) => {\n        return (\n            <option\n                key={i}\n                value={status}\n            >\n                {status}\n            </option>\n        )\n    })\n}\n\nexport function renderEquipmentOptions(equipments) {\n    return equipments.map((equipment) => {\n        return (\n            <option\n                key={equipment.id}\n                value={equipment.id}\n            >\n                {equipment.unit_num}\n            </option>\n        )\n    })\n}\n\nexport function renderDriverOptions(drivers) {\n    return drivers.map((driver) => {\n        return (\n            <option\n                key={driver.id}\n                value={driver.id}\n            >\n                {driver.full_name}\n            </option>\n        )\n    })\n}\n\n// to populate the drivers drop down list\n// with only those drivers that are idle and \n// have an equipment avialable to be assigned\nexport function getAvailableDrivers(idleDrivers) {\n    const availableDrivers = idleDrivers.filter((driver) => !(Object.entries(driver.equipment).length === 0 && driver.equipment.constructor === Object));\n    return availableDrivers;\n}\n\nexport function removeEquipmentDriver(equipment){\n    equipment.driver = {\n        full_name: '',\n        pay_rate: '',\n    }\n    return equipment;\n}\n\nexport function pickupAfterDelivery(pickup, delivery){\n    const pickupYear = new Date(pickup).getFullYear();\n\n    console.log(pickupYear);\n    \n    return false;\n}","import React, { Component } from \"react\";\nimport \"./LoadListBox.css\";\nimport AppContext from \"../../Contexts/AppContext\";\nimport { Link } from \"react-router-dom\";\nimport {\n  formatDate,\n  formatCurrency,\n  sortShipments\n} from '../../HelperFunctions/HelperFunctions'\n\nclass LoadListBox extends Component {\n  static contextType = AppContext;\n\n  static defaultProps = {\n    loadStatus: [],\n    boxHeader: 'Loads'\n  };\n\n  getLoadsWithStatus = status => {\n    \n    const { basePath} = this.context;\n    let {shipments} = this.context;\n\n    if(status !== 'all'){\n      shipments = shipments.filter((shipment) => status.includes(shipment.status))\n    }\n    \n\n    if (shipments.length === 0) {\n      return <li className=\"empty-list\">No Loads</li>;\n    }\n\n    shipments = sortShipments(shipments, 'pickup_date');\n\n    return shipments.map(shipment => {\n      return (\n        <li className=\"load\" key={shipment.id}>\n          <div className=\"pick-up\">\n            <h6>Pick-up</h6>\n            <br />\n            <span className=\"red-bold\">\n              {shipment.pickup_warehouse.city},{\" \"}\n              {shipment.pickup_warehouse.state}\n              <br />\n              Date: {formatDate(shipment.pickup_date)}\n            </span>\n          </div>\n          <div className=\"status-line-wrapper\">\n            <div className=\"rate-broker\">\n              <div className=\"miles\">\n                <h6>Loaded Miles</h6>\n                <br />\n                {shipment.miles}\n              </div>\n              <div className=\"status\">\n                <h6>Status</h6>\n                <br />\n                <span className=\"red-bold\">{shipment.status}</span>\n              </div>\n            </div>\n            <div className=\"status-line\">\n              <div className=\"circle left\"></div>\n              <div className=\"line\"></div>\n              <div className=\"circle right\"></div>\n            </div>\n            <div className=\"rate-broker\">\n              <div className=\"rate\">\n                <h6>Rate</h6>\n                <br />\n                <span className=\"rate-amount red-bold\">\n                  {formatCurrency(shipment.rate)}\n                </span>\n              </div>\n              <div className=\"broker\">\n                <h6>Broker</h6>\n                <br />\n                {shipment.broker}\n              </div>\n            </div>\n          </div>\n          <div className=\"delivery\">\n            <h6>Delivery</h6>\n            <br />\n            <span className=\"red-bold\">\n              {shipment.delivery_warehouse.city},{\" \"}\n              {shipment.delivery_warehouse.state} <br />\n              Date: {formatDate(shipment.delivery_date)}\n            </span>\n          </div>\n          <div className=\"load-buttons\">\n            <Link className='app-button' to={`${basePath}/load/${shipment.id}`}>\n              View\n            </Link>\n            <Link className='app-button' to={`${basePath}/load/edit/${shipment.id}`}>\n              Edit\n            </Link>\n          </div>\n        </li>\n      );\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"LoadListBox blue-text\">\n        <h3 className=\"blue-back white-text\">{this.props.boxHeader}</h3>\n        <ul className=\"un-assigned-loads\">\n          {this.getLoadsWithStatus(this.props.loadStatus)}\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default LoadListBox;\n","import TokenService from './TokenService';\nimport config from '../config';\n\nconst DriversService = {\n    getDriversData() {\n        return fetch(`${config.API_ENDPOINT}/drivers`, {\n            method: 'GET',\n            headers: {\n                \"content-type\": \"application/json\",\n                \"Authorization\": `bearer ${TokenService.getAuthToken()}`\n            }\n        })\n            .then(response => response.json())\n            .then(driversData => driversData)\n            .catch((error) => {\n                console.log(error);\n            })\n    },\n\n    getIdleDrivers() {\n        return fetch(`${config.API_ENDPOINT}/drivers/idle`, {\n            method: 'GET',\n            headers: {\n                \"content-type\": \"application/json\",\n                \"Authorization\": `bearer ${TokenService.getAuthToken()}`\n            }\n        })\n            .then(response => response.json())\n            .then(idleDrivers => idleDrivers)\n            .catch((error) => {\n                console.log(error);\n            })\n    },\n\n    updateEquipment(id, equipment_id) {\n        return fetch(`${config.API_ENDPOINT}/drivers/${id}`, {\n            method: \"PATCH\",\n            headers: {\n                \"content-type\": \"application/json\",\n                Authorization: `bearer ${TokenService.getAuthToken()}`\n            },\n            body: JSON.stringify({\n                equipment_id\n            })\n        })\n            .then(response => response.json())\n            .then(driver => driver)\n            .catch((error) => {\n                console.log(error);\n            })\n    },\n\n    updateDriver(driver){\n        return fetch(`${config.API_ENDPOINT}/drivers/${driver.id}`, {\n            method: \"PATCH\",\n            headers: {\n                \"content-type\": \"application/json\",\n                Authorization: `bearer ${TokenService.getAuthToken()}`\n            },\n            body: JSON.stringify({\n                full_name: driver.full_name,\n                pay_rate: driver.pay_rate,\n                equipment_id: driver.equipment_id,\n                status: driver.status\n            })\n        })\n            .then(response => response.json())\n            .then(driver => driver)\n            .catch((error) => {\n                console.log(error);\n            })\n    },\n\n    addDriver(driver){\n        return fetch(`${config.API_ENDPOINT}/drivers`, {\n            method: \"POST\",\n            headers: {\n                \"content-type\": \"application/json\",\n                Authorization: `bearer ${TokenService.getAuthToken()}`\n            },\n            body: JSON.stringify({\n                full_name: driver.full_name,\n                pay_rate: driver.pay_rate,\n                equipment_id: driver.equipment_id,\n            })\n        })\n            .then(response => response.json())\n            .then(driver => driver)\n            .catch((error) => {\n                console.log(error);\n            })\n    }\n}\n\nexport default DriversService;","import React, {Component} from 'react';\nimport './DriverCard.css';\nimport {Link} from 'react-router-dom';\nimport config from '../../config';\nimport AppContext from '../../Contexts/AppContext';\nimport { arrayIsEmpty, objectIsEmpty, removeEquipmentDriver } from '../../HelperFunctions/HelperFunctions';\nimport DriversService from '../../Services/DriversService';\n\n\nclass DriverCard extends Component{\n    \n    static defaultProps = {\n        driver: {}\n    }\n\n    static contextType = AppContext\n\n    handleDeleteDriver = (driverToRemove) => {\n\n        let {drivers, idleDrivers, equipments} = this.context\n        const driverId = driverToRemove.id\n\n        // if driver had equipment remove driver from equipment\n        if(!objectIsEmpty(driverToRemove.equipment)){\n            equipments = equipments.map((equipment) => {\n                if(equipment.driver.id === driverId){\n                    removeEquipmentDriver(equipment)\n                }\n                return equipment;\n            })\n        }\n\n        // change driver status to inactive in all drivers array\n        drivers = drivers.map((driver)=>{\n\n            if(driver.id === driverId){\n                driver.status = 'inactive'\n            }\n            return driver\n        })\n\n        const updateDriverInDB = {\n            id: driverToRemove.id,\n            full_name: driverToRemove.full_name,\n            pay_rate: driverToRemove.pay_rate,\n            equipment_id: null,\n            status: 'inactive'\n        }\n        DriversService.updateDriver(updateDriverInDB);\n\n        // remove driver for idle driver array\n        idleDrivers = idleDrivers.filter((driver) => driver.id !== driverId)\n\n        this.context.setDrivers(drivers);\n        this.context.setIdleDrivers(idleDrivers);\n        this.context.setEquipments(equipments);\n    }\n\n    render(){\n\n        const {driver} = this.props;\n        const {idleDrivers, shipments} = this.context;\n        let shipmentId = -1;\n        const busyDriver = arrayIsEmpty(idleDrivers.filter(idleDriver => idleDriver.id === driver.id));\n        if(busyDriver){\n            shipmentId = shipments.filter((shipment) => shipment.driver.id === driver.id)[0].id;\n        }\n\n        return(\n            <div className='DriverCard grey-back blue-text'>\n                <div className='flex-row'>\n                    <div className='card-div'>\n                        <h6>Driver</h6>\n                        <p>{driver.full_name}</p>\n                    </div>\n                    <div className='card-div'>\n                        <h6>Pay Rate</h6>\n                        <p>${driver.pay_rate}</p>\n                    </div>\n                    <div className='card-div'>\n                        <h6 className='small-header'>Equipment #</h6>\n                        <p>{driver.equipment.unit_num ? driver.equipment.unit_num : 'No Equipment'}</p>\n                    </div>\n                </div>\n                {\n                    shipmentId === -1 \n                    ?\n                    <div className='driver-buttons'>\n                        <Link to={`${config.BASEPATH}/driver/edit/${driver.id}`} className='app-button'>\n                            Edit\n                        </Link>\n                        <button className='app-button' onClick={() => {this.handleDeleteDriver(driver)}}>\n                            Delete\n                        </button>\n                    </div>\n                    :\n                    <div className='driver-buttons'>\n                        <span>\n                            Driver Busy\n                        </span>\n                        <Link className='app-button' to={`${config.BASEPATH}/load/${shipmentId}`}>\n                            View Load\n                        </Link>\n                    </div>\n                }\n                \n            </div>\n        )\n    }\n}\n\nexport default DriverCard;","import React, { Component } from 'react';\nimport './IdleDriversBox.css';\nimport AppContext from '../../Contexts/AppContext';\nimport DriverCard from '../DriverCard/DriverCard';\n\nclass IdleDriversBox extends Component {\n    \n    static contextType = AppContext;\n\n    renderIdleDriversList = () => {\n        const {idleDrivers} = this.context\n        return idleDrivers.map((iDriver) => {\n            return <li key={iDriver.id}><DriverCard driver={iDriver} /></li>\n        })\n    }\n\n    render() { \n        return (\n            <div className='IdleDriversBox'>\n                <h3 className='blue-back white-text'>Idle Drivers</h3>\n                <ul>\n                    {this.renderIdleDriversList()}\n                </ul>\n            </div>\n        );\n    }\n}\n \nexport default IdleDriversBox;","import React, { Component } from 'react';\nimport './DashboardPage.css';\nimport {Link} from 'react-router-dom';\nimport config from '../../config';\nimport LoadListBox from '../../Components/LoadListBox/LoadListBox';\nimport IdleDriversBox from '../../Components/IdleDriversBox/IdleDriversBox';\n\nclass DashboardPage extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {  }\n    }\n\n    render() { \n\n        const secondBoxLoadStatus = [\n            'in transit',\n            'loading',\n            'dispatched',\n            'unloading',\n        ]\n\n        return (  \n            <section className='DashboardPage width-wrapper'>\n                <div className='add-links'>\n                    <Link className='add-load app-button' to={`${config.BASEPATH}/load/new`}>\n                        Add Load\n                    </Link>\n                    <Link className='add-load app-button' to={`${config.BASEPATH}/driver/new`}>\n                        Add Driver\n                    </Link>\n                    <Link className='add-load app-button' to={`${config.BASEPATH}/equipment/new`}>\n                        Add Equipment\n                    </Link>\n                </div>\n                <LoadListBox \n                    oldLoadStatus='un-assigned' \n                    loadStatus={['un-assigned']}\n                    boxHeader='Un Assigned Loads'\n                />\n                <LoadListBox \n                    oldLoadStatus='dispatched' \n                    loadStatus={secondBoxLoadStatus} \n                    boxHeader='Loads in progress'\n                />\n                <IdleDriversBox />\n\n            </section>\n        );\n    }\n}\n \nexport default DashboardPage;","import TokenService from './TokenService';\nimport config from '../config';\n\nconst CarrierService = {\n    getCarrierData(){\n        return fetch(`${config.API_ENDPOINT}/carrier`, {\n            method: 'GET',\n            headers: {\n                \"content-type\": \"application/json\",\n                \"Authorization\": `bearer ${TokenService.getAuthToken()}`\n            }\n        })\n        .then(res => res.json())\n        .then(carrierData => {\n            return carrierData;\n        })\n        .catch(err => {\n            console.log(err);\n        })\n    },\n    getCarrierInfo(){\n        return fetch(`${config.API_ENDPOINT}/carrier-info`, {\n            method: 'GET',\n            headers: {\n                \"content-type\": \"application/json\",\n                \"Authorization\" : `bearer ${TokenService.getAuthToken()}`\n            }\n        })\n        .then(res => res.json())\n        .then(carrierInfo =>  {\n            return carrierInfo;\n        })\n        .catch(err => {\n            console.log(err);\n        })\n    }\n}\n\nexport default CarrierService;","import React, {Component} from 'react';\nimport AppContext from '../../Contexts/AppContext';\nimport './Logout.css';\nimport TokenService from '../../Services/TokenService';\nimport CarrierServices from '../../Services/CarrierServices';\n\nclass Logout extends Component {\n\n    static contextType = AppContext;\n\n    getCarrierInfoInComponent = async () => {\n        const carrier = await CarrierServices.getCarrierInfo()\n            .then(res => {\n                this.context.setLoggedInCarrier(res);\n                return res;\n            })\n            .catch(error => error);\n        this.setState({\n            carrier: carrier[0]\n        })\n    }\n\n    constructor(props){\n        super(props);\n        this.state = {\n            carrier: {}\n        }\n        this.getCarrierInfoInComponent()\n    }\n\n    state = {\n        carrier: {}\n    }\n\n    handleLogout = () => {\n        this.context.setLoggedIn(false);\n        TokenService.clearAuthToken();\n        this.props.history.push('/');\n    }\n\n    \n\n    render(){\n        return (\n            <div className='Logout width-wrapper'>\n                Welcome, <span className='carrier-name red-text'>\n                    {this.state.carrier.full_name}\n                </span>, <button className='app-link' onClick={() => {this.handleLogout()}}>Logout</button>\n            </div>\n        )\n    }\n}\n\nexport default Logout;","import TokenService from \"./TokenService\";\nimport config from \"../config\";\n\nconst EquipmentService = {\n  getEquipments() {\n    return fetch(`${config.API_ENDPOINT}/equips`, {\n      method: \"GET\",\n      headers: {\n        \"content-type\": \"application/json\",\n        Authorization: `bearer ${TokenService.getAuthToken()}`\n      }\n    })\n      .then(response => response.json())\n      .then(equipments => equipments)\n      .catch(error => {\n        console.log(error);\n      });\n  },\n\n  addNewEquipment(unit_num){\n    return fetch(`${config.API_ENDPOINT}/equips`, {\n      method: \"POST\",\n      headers: {\n        \"content-type\": \"application/json\",\n        Authorization: `bearer ${TokenService.getAuthToken()}`\n      },\n      body: JSON.stringify({\n        unit_num,\n      })\n    })\n      .then(response => response.json())\n      .then(equipments => equipments)\n      .catch(error => {\n        console.log(error);\n      });\n  },\n\n  updateEquipment(unit_num, status, id){\n    return fetch(`${config.API_ENDPOINT}/equips/${id}`, {\n      method: \"PATCH\",\n      headers: {\n        \"content-type\": \"application/json\",\n        Authorization: `bearer ${TokenService.getAuthToken()}`\n      },\n      body: JSON.stringify({\n        unit_num,\n        status,\n      })\n    })\n      .then(response => response.json())\n      .then(equipments => equipments)\n      .catch(error => {\n        console.log(error);\n      });\n  }\n};\n\nexport default EquipmentService;\n","import React, {Component} from 'react';\nimport './LoadsPage.css';\nimport LoadListBox from '../../Components/LoadListBox/LoadListBox';\n\nclass LoadsPage extends Component {\n\n    render(){\n        return (\n            <section className='LoadsPage width-wrapper'>\n                <div className='filters-div'>\n                    {/* Add filters and then change the loads page accordingly */}\n                </div>\n                <LoadListBox loadStatus='all' />\n            </section>\n        )\n    }\n}\n\nexport default LoadsPage;","import React, { Component } from 'react';\nimport './EquipmentCard.css';\nimport { Link } from 'react-router-dom';\nimport config from '../../config';\nimport AppContext from '../../Contexts/AppContext';\nimport {\n    arrayIsEmpty, objectIsEmpty\n} from '../../HelperFunctions/HelperFunctions';\nimport DriversService from '../../Services/DriversService';\nimport EquipmentsService from '../../Services/EquipmentsService';\n\nclass EquipmentCard extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            editingMode: false\n        }\n    }\n\n    static contextType = AppContext\n\n    handleDeleteEquipment = (id) => {\n\n        let { equipments } = this.context\n        const { drivers, idleDrivers } = this.context\n        equipments = equipments.map((equipment) => {\n            if(equipment.id === id){\n                EquipmentsService.updateEquipment(equipment.unit_num, 'inactive', equipment.id)\n                equipment.status = 'inactive'\n            }\n            return equipment\n        })\n\n        drivers.map(driver => {\n            if (driver.equipment.id === id) {\n                DriversService.updateEquipment(driver.id, null)\n                driver.equipment = {}\n            }\n            return driver\n        })\n        idleDrivers.map(driver => {\n            if (driver.equipment.id === id) {\n                driver.equipment = {}\n            }\n            return driver\n        })\n\n        this.context.setEquipments(equipments);\n        this.context.setDrivers(drivers);\n        this.context.setIdleDrivers(idleDrivers);\n\n    }\n\n    render() {\n\n        const { equipment } = this.props;\n        const { idleEquipments, shipments } = this.context;\n        const busyEquipment = arrayIsEmpty(idleEquipments.filter((idleEquipment) => idleEquipment.id === equipment.id))\n        let shipmentId = -1;\n        if(busyEquipment && equipment.driver.hasOwnProperty('id')){\n            shipmentId = shipments.filter((shipment) => shipment.equipment.id === equipment.id)[0].id;\n        }\n        \n        return (\n            <div className='EquipmentCard grey-back blue-text'>\n\n                <div className='flex-row'>\n                    <div className='equip-num'>\n                        <h6>Unit Num</h6>\n                        <p>{equipment.unit_num}</p>\n                    </div>\n                    {\n                        !objectIsEmpty(equipment.driver) &&\n                        <div className='equip-driver'>\n                            <h6>Driver</h6>\n                            <p className={equipment.driver.full_name ? '' : 'no-driver'}\n                            >{equipment.driver.full_name ? equipment.driver.full_name : 'No Driver Assigned'}</p>\n                        </div>\n                    }\n                </div>\n                {\n                    shipmentId === -1 \n                    ?\n                    <div className='equipment-buttons'>\n                        <Link className='app-button' to={`${config.BASEPATH}/equipment/edit/${equipment.id}`}>\n                            Edit\n                        </Link>\n                        <button className='app-button' onClick={() => { this.handleDeleteEquipment(equipment.id) }}>\n                            Delete\n                        </button>\n                    </div>\n                    :\n                    <div className='equipment-buttons'>\n                        <span>\n                            Equipment Busy\n                        </span>\n                        <Link className='app-button' to={`${config.BASEPATH}/load/${shipmentId}`}>\n                            View Load\n                        </Link>\n                    </div>\n                }\n\n\n\n            </div>\n        )\n    }\n}\n\nexport default EquipmentCard;","import React, { Component } from 'react';\nimport './EquipmentsPage.css';\nimport AppContext from '../../Contexts/AppContext';\nimport EquipmentCard from '../../Components/EquipmentCard/EquipmentCard';\n\nclass EquipmentsPage extends Component {\n\n    static contextType = AppContext;\n\n    handleAddEquipment = (e) => {\n        e.preventDefault();\n        console.log(`Equipment Add Submitted`);\n    }\n\n    renderEquipmentList = () => {\n\n        let { equipments } = this.context;\n        equipments = equipments.filter((equipment) => equipment.status === 'active')\n\n        return equipments.map(equip => {\n            return (\n                <li key={equip.id}>\n                    <EquipmentCard equipment={equip} />\n                </li>\n            )\n        })\n    }\n\n    render() {\n        return (\n            <section className='EquipmentPage width-wrapper'>\n                <div className='box'>\n                    <h3 className='box-header blue-back white-text'>Equipment List</h3>\n                    <ul className='equipment-list'>\n                        {this.renderEquipmentList()}\n                    </ul>\n                </div>\n            </section>\n        )\n    }\n}\n\n\nexport default EquipmentsPage;","import React, { Component } from 'react';\nimport './DriversPage.css';\nimport AppContext from '../../Contexts/AppContext';\nimport DriverCard from '../../Components/DriverCard/DriverCard';\n\nclass DriversPage extends Component {\n\n    static contextType = AppContext\n\n\n    renderDrivers = (drivers) => {\n        \n        return drivers.map((driver) => {\n            if(driver.status === 'active'){\n                return (\n                    <li key={driver.id}>\n                        <DriverCard driver={driver} />\n                    </li>\n                )\n            }\n            else{\n                return ''\n            }\n        })\n    }\n\n    render() {\n\n        const { drivers } = this.context\n        \n        // to change background color if viewing specific driver\n        // const { id } = !objectIsEmpty(this.props.match.params) ? this.props.match.params : -1\n\n        return (\n            <section className='DriversPage width-wrapper'>\n                <h4 className='blue-back white-text'>\n                    Drivers List\n                </h4>\n                <ul className='drivers-list'>\n                    {this.renderDrivers(drivers)}\n                </ul>\n            </section>\n        )\n    }\n}\n\n\nexport default DriversPage;","import React, { Component } from 'react';\nimport './DriversDropDown.css'\n\nclass DriversDropDown extends Component {\n    \n    constructor(props){\n        super(props)\n        this.state = {\n            optionsValue: props.defaultValue\n        }\n    }\n    \n    static defaultProps = {\n        drivers: [],\n        defaultValue: 0,\n        className: 'select-css',\n        name: 'driver',\n        id: 'driver'\n    }\n\n    handleChange = (e) => {\n        this.setState({\n            optionsValue: e.target.value\n        }, () => {\n            if(this.props.hasOwnProperty('handleChange')){\n                this.props.handleChange(this.state.optionsValue)\n            }\n        })\n    }\n\n    renderDriverOptions = (drivers) => {\n        if(drivers !== []){\n            return drivers.map((driver, i) => {\n                return (\n                    <option \n                        value={driver.id}\n                        key={i}\n                        defaultValue={true}\n                    >\n                        {driver.full_name}\n                    </option>\n                )\n            })\n        }   \n    }\n\n    render() {\n\n        const { \n            className = 'select-css', \n            drivers = [], \n            name='driver', \n            id='driver'\n        } = this.props;\n\n\n        return (\n            <div className='DriversDropDown'>\n                <select className={className}\n                    name={name}\n                    id={id} \n                    value={this.state.optionsValue} \n                    onChange={(e) => {this.handleChange(e)}}>\n                    <option value='-1'>No Driver</option>\n                    {this.renderDriverOptions(drivers)}    \n                </select>\n            </div>\n        );\n    }\n}\n\nexport default DriversDropDown;","import React, { Component } from 'react';\nimport './EquipmentEditPage.css';\nimport DriversDropDown from '../../Components/DriversDropDown/DriversDropDown';\nimport AppContext from '../../Contexts/AppContext';\nimport {\n    handleGoBack,\n    objectIsEmpty,\n    arrayIsEmpty,\n    removeEquipmentDriver,\n} from '../../HelperFunctions/HelperFunctions';\nimport EquipmentService from '../../Services/EquipmentsService';\nimport DriversService from '../../Services/DriversService';\n// import EquipmentService from '../../Services/EquipmentsService';\n// import DriversService from '../../Services/DriversService';\n\nclass EquipmentEditPage extends Component {\n\n    static defaultProps = {\n        equipments: {},\n        idleDrivers: {},\n        rprops: {},\n    }\n\n    constructor(props) {\n        super(props);\n\n        // setting state so that edit equipment page\n        // already has values in it for the selected equipment to edit\n        // if not done this way , then another Get request had to be made for\n        // getting equipment by id \n        const { equipments, idleDrivers } = props;\n        const { id } = this.props.rprops.match.params;\n        const equipment = equipments.filter(equipment => equipment.id === parseInt(id, 10));\n        let driver = {};\n        let availableDrivers = idleDrivers.filter(driver => objectIsEmpty(driver.equipment))\n        let unitNum = '';\n        let currentDriver = -1;\n        let inIdleQueue = true;\n        if (equipment[0] !== undefined) {\n            driver = equipment[0].driver;\n            unitNum = equipment[0].unit_num;\n\n            // The server after adding serialization is sending in full_name and driver\n            // properties with empty strings so to solve and empty driver populating\n            // in the select statement the below line is as is, if there is a driver.id then\n            // set one else leave it to current driver which is -1\n            currentDriver = driver.id ? driver.id : currentDriver;\n            if (currentDriver !== -1) {\n                availableDrivers.unshift(driver);\n                inIdleQueue = !arrayIsEmpty(idleDrivers.filter((idleDr) => driver.id === idleDr.id));\n            }\n        }\n\n        this.state = {\n            error: '',\n            unitNumError: false,\n            unitNum,\n            equipment,\n            availableDrivers,\n            currentDriver,\n            inIdleQueue,\n        }\n    }\n\n    static contextType = AppContext\n\n    giveEquipment = (driver, equipment) => {\n        DriversService.updateEquipment(driver.id, equipment.id);\n        driver.equipment = {\n            id: equipment.id,\n            unit_num: equipment.unit_num,\n            status: 'active'\n        }\n        return driver;\n    }\n\n    takeAwayEquipment = (driver) => {\n        DriversService.updateEquipment(driver.id, null)\n        driver.equipment = {}\n        return driver;        \n    }\n\n    setDriverForEquipment = (equipment, driver) => {\n        equipment.driver = driver\n        return equipment;\n    }\n\n    removeDriverFromEquipment = (equipment) => {\n        equipment.driver = {}\n        return equipment;\n    }\n\n    changeEquipmentForDriver = (idleDrivers, driver, newDriverId, oldDriverId, equipment) => {\n        if(driver.id === newDriverId && newDriverId !== -1){\n            driver = this.giveEquipment(driver, equipment);\n            idleDrivers.map((oldDriver) => {\n                if(oldDriverId === oldDriver.id){\n                    oldDriver = this.takeAwayEquipment(oldDriver)\n                }\n                return oldDriver;\n            })\n        } else if (driver.id === oldDriverId){ \n            driver = this.takeAwayEquipment(driver)\n        }\n        return driver;\n    }\n\n    // Updates the changes in state and in the database\n    handleEquipmentEdit = (e, equipmentArray) => {\n\n        e.preventDefault();\n        const equipment = equipmentArray[0];\n        const oldDriverId = equipment.driver.id === undefined ? -1 : equipment.driver.id;\n        const newDriverId = this.state.inIdleQueue ? parseInt(e.target['driver'].value, 10) : oldDriverId;\n        const unit_num = e.target['unit-num'].value;\n        const { equipments, idleDrivers, drivers } = this.props\n\n        // Enter changing driver only when they change driver selection\n        if(newDriverId !== oldDriverId){\n            \n            idleDrivers.map((driver) => {\n                driver = this.changeEquipmentForDriver(idleDrivers, driver, newDriverId, oldDriverId, equipment);\n                return driver;\n            })\n\n            drivers.map((driver) => {\n                driver = this.changeEquipmentForDriver(drivers, driver, newDriverId, oldDriverId, equipment);\n                return driver;\n            })\n\n            let removeExecuted = false;\n            equipments.map((changeEquipemnt) => {\n                if(oldDriverId === -1){\n                    changeEquipemnt = this.setDriverForEquipment(equipment, idleDrivers.filter(driver => driver.id === newDriverId)[0])\n                }else {\n\n                    if((newDriverId === changeEquipemnt.driver.id || newDriverId === -1) && !removeExecuted) {\n                        if(changeEquipemnt.id === equipment.id){\n                            changeEquipemnt = removeEquipmentDriver(changeEquipemnt)\n                            removeExecuted = true;\n                        }\n                    }\n                    if(changeEquipemnt.id === equipment.id && newDriverId !== -1){\n                        changeEquipemnt = this.setDriverForEquipment(equipment, idleDrivers.filter(driver => driver.id === newDriverId)[0]);\n                    } \n                }\n                return changeEquipemnt\n            })\n        }\n\n        if (unit_num !== equipment.unit_num) {\n            equipments.map((changeEquipment) => {\n                if (changeEquipment.id === equipment.id) {\n                    changeEquipment.unit_num = unit_num\n                }\n                return changeEquipment\n            });\n\n            idleDrivers.map((driver) => {\n                if(driver.equipment.id === equipment.id){\n                    driver.equipment.unit_num = unit_num\n                }\n                return driver;\n            });\n\n            drivers.map((driver) => {\n                if(driver.equipment.id === equipment.id){\n                    driver.equipment.unit_num = unit_num\n                }\n                return driver;\n            });\n            \n            // call service to update the database\n            EquipmentService.updateEquipment(unit_num, 'active', equipment.id);\n        }\n\n        \n        this.context.setIdleDrivers(idleDrivers);\n        this.context.setEquipments(equipments);\n        this.context.setDrivers(drivers);\n\n        handleGoBack(this.props.rprops.history);\n\n    }\n\n    validateUnitNum = (e) => {\n        const unitNum = e.target.value;\n        this.setState({\n            unitNum\n        })\n        if (unitNum.trim() === '') {\n            this.setState({\n                error: 'Invalid Unit Num',\n                unitNumError: true\n            })\n        } else {\n            this.setState({\n                error: '',\n                unitNumError: false\n            })\n        }\n    }\n\n    render() {\n\n        const { unitNum, equipment, availableDrivers, currentDriver } = this.state\n\n        return (\n            <section className='EquipmentEditPage width-wrapper'>\n\n                <form className='edit-equip' onSubmit={(e) => { this.handleEquipmentEdit(e, equipment) }}>\n                    <fieldset>\n                        <legend className='blue-back white-text'>\n                            <button type='button' className='app-button go-back' onClick={(e) => { handleGoBack(this.props.rprops.history) }}>\n                                Go Back\n                            </button>\n                            <span>Edit Equipment</span>\n                        </legend>\n                        <div className='flex'>\n                            <label htmlFor='unit-num'>\n                                <span className='input-title'>Unit Num:</span>\n                                <input\n                                    type='text'\n                                    id='unit-num'\n                                    name='unit-num'\n                                    required\n                                    value={unitNum}\n                                    onChange={(e) => { this.validateUnitNum(e) }}\n                                />\n                                {\n                                    this.state.unitNumError &&\n                                    <span className='error'>{this.state.error}</span>\n                                }\n                            </label>\n                            {\n                               this.state.inIdleQueue && \n                               <label htmlFor='driver'>\n                                    <span className='input-title'>Available Drivers</span>\n                                    {\n                                        equipment[0] !== undefined &&\n                                        <DriversDropDown\n                                            name={'driver'}\n                                            id={'driver'}\n                                            drivers={availableDrivers}\n                                            className={'select-css'}\n                                            defaultValue={currentDriver} />\n                                    }\n\n                                </label>\n                            }\n                            <button\n                                className='app-button'\n                                type='submit'\n                            >\n                                Save Changes\n                                </button>\n                        </div>\n                    </fieldset>\n                </form>\n            </section>\n        );\n    }\n}\n\nexport default EquipmentEditPage;","export function emptySpaces(word){\n    if(word.trim() === '')\n        return true;\n\n    return false;\n}\n\nexport function notValidState(state){\n    if(state.trim().length < 2)\n        return `Invalid state code, Eg. TX`\n}\n\nexport function notValidDate(date){\n    const date_regex = /^(0?[1-9]|1[0-2])\\/(0?[1-9]|1\\d|2\\d|3[01])\\/(15|18|17|16|19|20|21|23|24|25)\\d{2}$/ ;\n    return date.length < 8 || !date_regex.test(date);\n}\n\nexport function isNotValidDriverName(name){\n    if(name.trim() === ''){\n        return `Driver is required and cannot be just empty spaces`\n    }\n\n    return false;\n}\n\nexport function isNotValidPay(pay){\n    if(pay.trim() === ''){\n        return `Pay cannot be empty spaces`\n    }\n\n    if(isNaN(pay)){\n        return `Pay can only be numeric, cannot contain characters other than 0-9 and only one '.'`;\n    }\n\n    if(pay < 0){\n        return `Pay cannot be negative`;\n    }\n\n    return false;\n}","import TokenService from \"./TokenService\";\nimport config from \"../config\";\n\nconst ShipmentsSerivce = {\n    insertShipment(shipment){\n        return fetch(`${config.API_ENDPOINT}/shipments`, {\n            method: \"POST\",\n            headers: {\n              \"content-type\": \"application/json\",\n              Authorization: `bearer ${TokenService.getAuthToken()}`\n            },\n            body: JSON.stringify({\n                rate: shipment.rate || 0.0, \n                status: shipment.status, \n                miles: shipment.miles || 0, \n                driver_id: shipment.driver_id || null, \n                broker: shipment.broker || null,\n                pickup_date: shipment.pickup_date,\n                delivery_date: shipment.delivery_date,\n                pickup_city: shipment.pickup_city,\n                pickup_state: shipment.pickup_state,\n                pickup_zipcode: shipment.pickup_zipcode,\n                delivery_city: shipment.delivery_city,\n                delivery_state: shipment.delivery_state,\n                delivery_zipcode: shipment.delivery_zipcode\n            })\n          })\n            .then(response => response.json())\n            .then(shipment => shipment)\n            .catch(error => {\n              console.log(error);\n            });\n    },\n\n    updateShipment(shipment){\n      return fetch(`${config.API_ENDPOINT}/shipments/${shipment.id}`, {\n        method: \"PATCH\",\n        headers: {\n          \"content-type\": \"application/json\",\n          Authorization: `bearer ${TokenService.getAuthToken()}`\n        },\n        body: JSON.stringify({\n            rate: shipment.rate, \n            status: shipment.status, \n            miles: shipment.miles, \n            driver_id: shipment.driver_id, \n            broker: shipment.broker,\n            pickup_date: shipment.pickup_date,\n            delivery_date: shipment.delivery_date,\n            pickup_city: shipment.pickup_city,\n            pickup_state: shipment.pickup_state,\n            pickup_zipcode: shipment.pickup_zipcode,\n            delivery_city: shipment.delivery_city,\n            delivery_state: shipment.delivery_state,\n            delivery_zipcode: shipment.delivery_zipcode\n        })\n      })\n        .then(response => response.json())\n        .then(shipment => shipment)\n        .catch(error => {\n          console.log(error);\n        });\n    },\n\n    deleteShipment(id){\n      return fetch(`${config.API_ENDPOINT}/shipments/${id}`, {\n        method: \"DELETE\",\n        headers: {\n          \"content-type\": \"application/json\",\n          Authorization: `bearer ${TokenService.getAuthToken()}`\n        }\n      })\n        .then(response => response.json())\n        .then(shipment => shipment)\n        .catch(error => {\n          console.log(error);\n        });\n    }\n}\n\nexport default ShipmentsSerivce;","import React, { Component } from 'react';\nimport './AddLoadPage.css';\nimport {\n    handleGoBack,\n    routeUserTo,\n    formatDate,\n    getAvailableDrivers,\n} from '../../HelperFunctions/HelperFunctions';\nimport {\n    notValidDate,\n    emptySpaces,\n} from '../../HelperFunctions/InputFieldValidations';\nimport DriversDropDown from '../../Components/DriversDropDown/DriversDropDown';\nimport AppContext from '../../Contexts/AppContext';\nimport config from '../../config';\nimport ShipmentsSerivce from '../../Services/ShipmentsService';\n\nclass AddLoadPage extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            hasError: false,\n            availableDrivers: [],\n            error: {\n                dateError: 'Enter Date in correct format \"MM/DD/YYYY\"',\n                pickupDate: false,\n                deliveryDate: false,\n                cityError: 'City is required',\n                pickupCity: false,\n                deliveryCity: false,\n                stateError: 'State is required and must be two characters, Eg. for New York - NY',\n                pickupState: false,\n                deliveryState: false,\n                zipcodeError: 'Zipcode is required',\n                pickupZipcode: false,\n                deliveryZipcode: false,\n            },\n            pickupDate: formatDate(new Date()),\n            deliveryDate: formatDate(new Date()),\n            pickupCity: '',\n            deliveryCity: '',\n            pickupState: '',\n            deliveryState: '',\n            pickupZipcode: '',\n            deliveryZipcode: '',\n            miles: '',\n            rate: '',\n            broker: '',\n        }\n    }\n\n    static contextType = AppContext\n\n    // validation of date, Validates both pickup date and delivery date\n    // *** THIS FUNCTION IS DEPENDENT ON THE NAME PROPERTY OF THE INPUT BOXES ***\n    validateInputDate = (e) => {\n        const date = e.target.value;\n        const { name } = e.target;\n\n        name === 'pickup-date'\n            ? this.setState({ pickupDate: date })\n            : this.setState({ deliveryDate: date });\n\n        if (notValidDate(date)) {\n            name === 'pickup-date'\n                ? this.setState({\n                    error: {\n                        ...this.state.error,\n                        pickupDate: true,\n                    }\n                })\n                : this.setState({\n                    error: {\n                        ...this.state.error,\n                        deliveryDate: true,\n                    }\n                });\n        } else {\n            name === 'pickup-date'\n                ? this.setState({\n                    error: {\n                        ...this.state.error,\n                        pickupDate: false,\n                    }\n                })\n                : this.setState({\n                    error: {\n                        ...this.state.error,\n                        deliveryDate: false,\n                    }\n                });\n        }\n    }\n\n    validateCityInput = (e) => {\n        const city = e.target.value;\n        const { name } = e.target;\n\n        name === 'pickup-city'\n            ? this.setState({ pickupCity: city })\n            : this.setState({ deliveryCity: city });\n\n\n        if (emptySpaces(city)) {\n            name === 'pickup-city'\n                ? this.setState({\n                    error: {\n                        ...this.state.error,\n                        pickupCity: true,\n                    }\n                })\n                : this.setState({\n                    error: {\n                        ...this.state.error,\n                        deliveryCity: true,\n                    }\n                });\n        } else {\n            name === 'pickup-city'\n                ? this.setState({\n                    error: {\n                        ...this.state.error,\n                        pickupCity: false,\n                    }\n                })\n                : this.setState({\n                    error: {\n                        ...this.state.error,\n                        deliveryCity: false,\n                    }\n                });\n        }\n    }\n\n    validateStateInput = (e) => {\n        const state = e.target.value;\n        const { name } = e.target;\n\n        name === 'pickup-state'\n            ? this.setState({ pickupState: state })\n            : this.setState({ deliveryState: state });\n\n\n        if (emptySpaces(state) || state.trim().length !== 2) {\n            name === 'pickup-state'\n                ? this.setState({\n                    error: {\n                        ...this.state.error,\n                        pickupState: true,\n                    }\n                })\n                : this.setState({\n                    error: {\n                        ...this.state.error,\n                        deliveryState: true,\n                    }\n                });\n        } else {\n            name === 'pickup-state'\n                ? this.setState({\n                    error: {\n                        ...this.state.error,\n                        pickupState: false,\n                    }\n                })\n                : this.setState({\n                    error: {\n                        ...this.state.error,\n                        deliveryState: false,\n                    }\n                });\n        }\n    }\n\n    validateZipcodeInput = (e) => {\n        const zipcode = e.target.value;\n        const { name } = e.target;\n\n        name === 'pickup-zipcode'\n            ? this.setState({ pickupZipcode: zipcode })\n            : this.setState({ deliveryZipcode: zipcode });\n\n\n        if (emptySpaces(zipcode)) {\n            name === 'pickup-zipcode'\n                ? this.setState({\n                    error: {\n                        ...this.state.error,\n                        pickupZipcode: true,\n                    }\n                })\n                : this.setState({\n                    error: {\n                        ...this.state.error,\n                        deliveryZipcode: true,\n                    }\n                });\n        } else {\n            name === 'pickup-zipcode'\n                ? this.setState({\n                    error: {\n                        ...this.state.error,\n                        pickupZipcode: false,\n                    }\n                })\n                : this.setState({\n                    error: {\n                        ...this.state.error,\n                        deliveryZipcode: false,\n                    }\n                });\n        }\n    }\n\n    updateIdleDriverQueue = (driverId) => {\n        let { idleDrivers } = this.context;\n        idleDrivers = idleDrivers.filter(driver => driver.id !== driverId);\n        this.context.setIdleDrivers(idleDrivers)\n    }\n\n    handleAddLoad = async (e) => {\n\n        e.preventDefault();\n\n        const broker = e.target['broker'].value.trim() || '';\n        const delivery_warehouse = {\n            city: e.target['delivery-city'].value.trim(),\n            state: e.target['delivery-state'].value.toUpperCase(),\n            zipcode: e.target['delivery-zipcode'].value.trim()\n        };\n        const pickup_warehouse = {\n            city: e.target['pickup-city'].value.trim(),\n            state: e.target['pickup-state'].value.toUpperCase(),\n            zipcode: e.target['pickup-zipcode'].value.trim()\n        };\n        const miles = e.target['miles'].value.trim() || 0;\n        const rate = e.target['rate'].value.trim() || 0;\n        const driverId = parseInt(e.target['driver'].value, 10);\n\n        // getting driver and equipment from drivers array in context\n        let driver = {}\n        let equipment = {}\n        let status = 'un-assigned';\n        if (driverId !== -1) {\n            this.context.drivers.map(contextDriver => {\n                if (contextDriver.id === driverId) {\n                    driver = {\n                        id: driverId,\n                        full_name: contextDriver.full_name,\n                        pay_rate: contextDriver.pay_rate,\n                        status: contextDriver.status\n                    }\n                    equipment = {\n                        id: contextDriver.equipment.id,\n                        status: contextDriver.equipment.status,\n                        unit_num: contextDriver.equipment.unit_num\n                    }\n                }\n                return contextDriver\n            });\n            this.updateIdleDriverQueue(driverId);\n            status = 'dispatched'\n        }\n\n        const pickup_date = e.target['pickup-date'].value;\n        const delivery_date = e.target['delivery-date'].value;\n\n        // the shipment to store in the database\n        let shipmentInDB = {\n            rate,\n            status,\n            miles,\n            driver_id: driverId !== -1 ? driverId : null,\n            broker,\n            pickup_date,\n            delivery_date,\n            pickup_city: pickup_warehouse.city,\n            pickup_state: pickup_warehouse.state,\n            pickup_zipcode: pickup_warehouse.zipcode,\n            delivery_city: delivery_warehouse.city,\n            delivery_state: delivery_warehouse.state,\n            delivery_zipcode: delivery_warehouse.zipcode\n        }\n        // add and get the new shipment with the id\n        shipmentInDB = await ShipmentsSerivce.insertShipment(shipmentInDB)\n\n        // shipment in the format for the front end to display it correctly\n        // and keep all arrays in order.\n        const newShipment = {\n            id: shipmentInDB.id,\n            pickup_date,\n            delivery_date,\n            broker,\n            delivery_warehouse,\n            pickup_warehouse,\n            miles,\n            driver,\n            equipment,\n            rate,\n            status,\n        }\n\n        this.context.setShipments([\n            ...this.context.shipments,\n            newShipment\n        ])\n\n        // handleGoBack(this.props.history);\n        routeUserTo(this.props.history, `${config.BASEPATH}/load/${newShipment.id}`)\n\n    }\n\n    render() {\n        const availableDrivers = getAvailableDrivers(this.context.idleDrivers)\n        const { error } = this.state\n\n        return (\n            <section className='AddLoadPage width-wrapper'>\n                <form className='add-load-form' onSubmit={(e) => { this.handleAddLoad(e) }}>\n                    <fieldset>\n                        <legend className='blue-back white-text'>\n                            <button type='button' className='app-button go-back' onClick={(e) => { handleGoBack(this.props.history) }}>\n                                Go Back\n                            </button>\n                            <span>Add Load</span>\n                        </legend>\n                        <div className='flex'>\n                            <h4 className='fieldset-sub-title blue-text'>\n                                Pick Up Info\n                            </h4>\n                            <label htmlFor='pickup-date'>\n                                <span className='input-title'>* Date</span>\n                                <input\n                                    type='text'\n                                    id='pickup-date'\n                                    name='pickup-date'\n                                    maxLength='10'\n                                    value={this.state.pickupDate}\n                                    onChange={(e) => { this.validateInputDate(e) }}\n                                    onBlur={(e) => {\n                                        if (e.target.value === '') {\n                                            this.setState({\n                                                pickupDate: formatDate(new Date()),\n                                                error: {\n                                                    ...this.state.error,\n                                                    pickupDate: false\n                                                }\n                                            })\n                                        }\n                                    }}\n                                />\n                                {\n                                    error.pickupDate &&\n                                    <span className='error'>{error.dateError}</span>\n                                }\n                            </label>\n                            <label htmlFor='pickup-city'>\n                                <span className='input-title'>* City</span>\n                                <input\n                                    type='text'\n                                    id='pickup-city'\n                                    name='pickup-city'\n                                    placeholder='Eg. Dallas'\n                                    required\n                                    value={this.state.pickupCity}\n                                    onChange={(e) => { this.validateCityInput(e) }}\n                                />\n                                {\n                                    error.pickupCity &&\n                                    <span className='error'>{error.cityError}</span>\n                                }\n                            </label>\n                            <label htmlFor='pickup-state'>\n                                <span className='input-title'>* State</span>\n                                <input\n                                    type='text'\n                                    placeholder='Eg. TX'\n                                    maxLength='2'\n                                    id='pickup-state'\n                                    name='pickup-state'\n                                    required\n                                    value={this.state.pickupState}\n                                    onChange={(e) => { this.validateStateInput(e) }}\n                                />\n                                {\n                                    this.state.error.pickupState &&\n                                    <span className='error'>{this.state.error.stateError}</span>\n                                }\n                            </label>\n                            <label htmlFor='pickup-zipcode'>\n                                <span className='input-title'>* Zipcode</span>\n                                <input\n                                    type='text'\n                                    id='pickup-zipcode'\n                                    maxLength='10'\n                                    name='pickup-zipcode'\n                                    placeholder='Eg. 75001'\n                                    required\n                                    value={this.state.pickupZipcode}\n                                    onChange={(e) => { this.validateZipcodeInput(e) }}\n                                />\n                                {\n                                    this.state.error.pickupZipcode &&\n                                    <span className='error'>{this.state.error.zipcodeError}</span>\n                                }\n                            </label>\n                            <h4 className='fieldset-sub-title blue-text'>\n                                Delivery Info\n                            </h4>\n                            <label htmlFor='delivery-date'>\n                                <span className='input-title'>* Date</span>\n                                <input\n                                    type='text'\n                                    id='delivery-date'\n                                    name='delivery-date'\n                                    maxLength='10'\n                                    value={this.state.deliveryDate}\n                                    onChange={(e) => { this.validateInputDate(e) }}\n                                    onBlur={(e) => {\n                                        if (e.target.value === '') {\n                                            this.setState({\n                                                deliveryDate: formatDate(new Date()),\n                                                error: {\n                                                    ...this.state.error,\n                                                    deliveryDate: false\n                                                }\n                                            })\n                                        }\n                                    }}\n                                />\n                                {\n                                    this.state.error.deliveryDate &&\n                                    <span className='error'>{this.state.error.dateError}</span>\n                                }\n                            </label>\n                            <label htmlFor='delivery-city'>\n                                <span className='input-title'>* City</span>\n                                <input\n                                    type='text'\n                                    id='delivery-city'\n                                    name='delivery-city'\n                                    placeholder='Eg. Indianapolis'\n                                    required\n                                    value={this.state.deliveryCity}\n                                    onChange={(e) => { this.validateCityInput(e) }}\n                                />\n                                {\n                                    this.state.error.deliveryCity &&\n                                    <span className='error'>{this.state.error.cityError}</span>\n                                }\n                            </label>\n                            <label htmlFor='delivery-state'>\n                                <span className='input-title'>* State</span>\n                                <input\n                                    type='text'\n                                    placeholder='Eg. IN'\n                                    maxLength='2'\n                                    id='delivery-state'\n                                    name='delivery-state'\n                                    required\n                                    value={this.state.deliveryState}\n                                    onChange={(e) => { this.validateStateInput(e) }}\n                                />\n                                {\n                                    this.state.error.deliveryState &&\n                                    <span className='error'>{this.state.error.stateError}</span>\n                                }\n                            </label>\n                            <label htmlFor='delivery-zipcode'>\n                                <span className='input-title'>* Zipcode</span>\n                                <input\n                                    type='text'\n                                    id='delivery-zipcode'\n                                    name='delivery-zipcode'\n                                    maxLength='10'\n                                    placeholder='Eg. 46225'\n                                    required\n                                    value={this.state.deliveryZipcode}\n                                    onChange={(e) => { this.validateZipcodeInput(e) }}\n                                />\n                                {\n                                    this.state.error.deliveryZipcode &&\n                                    <span className='error'>{this.state.error.zipcodeError}</span>\n                                }\n                            </label>\n                            <h4 className='fieldset-sub-title blue-text'>\n                                Additional Info\n                            </h4>\n                            <label htmlFor='miles'>\n                                <span className='input-title'>Miles</span>\n                                <input\n                                    type='number'\n                                    min='0'\n                                    id='miles'\n                                    name='miles'\n                                />\n                                {\n                                    // this.state.unitNumError &&\n                                    // <span className='error'>{this.state.error}</span>\n                                }\n                            </label>\n                            <label htmlFor='rate'>\n                                <span className='input-title'>Rate</span>\n                                <input\n                                    type='number'\n                                    min='0'\n                                    id='rate'\n                                    name='rate'\n                                />\n                                {\n                                    // this.state.unitNumError &&\n                                    // <span className='error'>{this.state.error}</span>\n                                }\n                            </label>\n                            <label htmlFor='broker'>\n                                <span className='input-title'>Broker</span>\n                                <input\n                                    type='text'\n                                    id='broker'\n                                    name='broker'\n                                />\n                            </label>\n                            <label htmlFor='driver'>\n                                <span className='input-title'>Assign Driver</span>\n                                <DriversDropDown name='driver' id='driver' drivers={availableDrivers} className='select-css' />\n                                {\n                                    // incorrectPassword &&\n                                    // <span className='error'>{error}</span>\n                                }\n                            </label>\n                            {\n                                !(\n                                    error.pickupCity ||\n                                    error.deliveryCity ||\n                                    error.pickupDate ||\n                                    error.deliveryDate ||\n                                    error.pickupState ||\n                                    error.deliveryState ||\n                                    error.pickupZipcode ||\n                                    error.deliveryZipcode\n                                )\n                                    ?\n                                    <button\n                                        className='app-button'\n                                        type='submit'\n                                    >\n                                        Add New Load\n                                    </button>\n                                    :\n                                    <button\n                                        className='app-button'\n                                        type='submit'\n                                        disabled\n                                    >\n                                        Add New Load\n                                    </button>\n                            }\n\n                        </div>\n                    </fieldset>\n                </form>\n            </section>\n        );\n    }\n}\n\nexport default AddLoadPage;","import React, { Component } from 'react';\nimport './LoadByIdPage.css';\nimport AppContext from '../../Contexts/AppContext';\nimport {\n    arrayIsEmpty,\n    objectIsEmpty,\n    renderLoadStatusOptions,\n    formatCurrency,\n    getAvailableDrivers,\n    isNotUndefined,\n    routeUserTo,\n    handleGoBack\n} from '../../HelperFunctions/HelperFunctions';\nimport DriversDropDown from '../../Components/DriversDropDown/DriversDropDown';\nimport config from '../../config';\nimport {Link} from 'react-router-dom';\nimport ShipmentsService from '../../Services/ShipmentsService';\n\nclass LoadByIdPage extends Component {\n\n    static defaultProps = {\n        rprops: {},\n        shipments: [],\n        idleDrivers: []\n    }\n\n    static contextType = AppContext\n\n    constructor(props) {\n        super(props);\n\n        const id = parseInt(props.rprops.match.params.id, 10)\n        const { shipments } = props;\n        let shipment = {};\n        let status = '';\n        let avaialableDrivers = [];\n        let driverAssigned = -1;\n        if (!arrayIsEmpty(shipments)) {\n            shipment = shipments.filter(shipment => shipment.id === id)[0];\n            status = shipment.status\n            if (shipment.status === 'un-assigned') {\n                avaialableDrivers = getAvailableDrivers(props.idleDrivers)\n                driverAssigned = isNotUndefined(avaialableDrivers[0]) ? avaialableDrivers[0].id : -1\n            }\n        }\n        this.state = {\n            shipment,\n            status,\n            avaialableDrivers,\n            driverAssigned\n        }\n    }\n\n    // remove drivers when status is changed to un-assigned\n    removeDriverAndEquipmentFromShipment = (shipment) => {\n\n        let { idleDrivers } = this.context\n        const driver = {\n            ...shipment.driver,\n            pay_rate: shipment.driver.pay_rate.toString(), // converting to string to make sure all objects are of the same data type\n            equipment: shipment.equipment\n        }\n\n        this.context.setIdleDrivers([\n            ...idleDrivers,\n            driver\n        ])\n\n        shipment.driver = {}\n        shipment.equipment = {}\n\n        return shipment;\n    }\n\n    handleChangeLoadStatus = (e) => {\n        e.preventDefault();\n\n        const { status } = this.state;\n        this.setState({\n            shipment: {\n                ...this.state.shipment,\n                status\n            }\n        }, () => {\n            const { shipment } = this.state;\n            let { shipments } = this.props;\n\n            ShipmentsService.updateShipment({id: shipment.id, status})\n            shipments = shipments.map((propShipment) => {\n                if (propShipment.id === shipment.id) {\n                    propShipment.status = status\n                    if (status === 'un-assigned') {\n                        propShipment = this.removeDriverAndEquipmentFromShipment(propShipment);\n                        // update shipment by settin driver_id to null and status to un-assigned\n                        ShipmentsService.updateShipment({id: shipment.id, driver_id: null})\n                    }\n                    if(status === 'completed'){\n                        \n                    }\n                }\n                return propShipment\n            })\n            this.context.setShipments(shipments);\n        })\n\n    }\n\n    handleAssignDriver = (e) => {\n        e.preventDefault();\n        let { shipment, driverAssigned } = this.state;\n        let { idleDrivers, shipments } = this.props;\n\n        let driver = {};\n        let equipment = {};\n\n        idleDrivers = idleDrivers.map((idleDriver) => {\n            if (idleDriver.id === driverAssigned) {\n                driver = {\n                    id: driverAssigned,\n                    full_name: idleDriver.full_name,\n                    pay_rate: idleDriver.pay_rate,\n                    status: idleDriver.status\n                }\n                equipment = {\n                    id: idleDriver.equipment.id,\n                    status: idleDriver.equipment.status,\n                    unit_num: idleDriver.equipment.unit_num\n                }\n            }\n            return idleDriver;\n        })\n        idleDrivers = idleDrivers.filter((idleDriver) => idleDriver.id !== driverAssigned);\n\n        shipments = shipments.map((propShipment) => {\n            if (propShipment.id === shipment.id) {\n                propShipment = {\n                    ...propShipment,\n                    driver,\n                    equipment,\n                    status: 'dispatched'\n                }\n            }\n            return propShipment\n        })\n\n        // update shipment in the database\n        ShipmentsService.updateShipment({id: shipment.id ,driver_id: driverAssigned, status: 'dispatched'})\n\n        this.setState({\n            shipment: {\n                ...this.state.shipment,\n                status: 'dispatched'\n            },\n            status: 'dispatched',\n            avaialableDrivers: idleDrivers,\n            driverAssigned: -1\n        })\n\n        this.context.setIdleDrivers(idleDrivers);\n        this.context.setShipments(shipments);\n\n    }\n\n    onDriverDropDownChange = (id) => {\n        this.setState({\n            driverAssigned: parseInt(id, 10)\n        })\n    }\n\n    handleShipmentDelete = (shipmentId) => {\n        \n        let {shipments, idleDrivers} = this.context\n        // if shipment has driver, send him to idle driver queue\n        const shipmentToDelete = shipments.filter((shipment) => shipment.id === shipmentId)[0];\n\n        let driver = {};\n        if(!objectIsEmpty(shipmentToDelete.driver)){\n            driver = {\n                ...shipmentToDelete.driver,\n                equipment: {\n                    ...shipmentToDelete.equipment,\n                }\n            }\n\n            idleDrivers = [\n                ...idleDrivers,\n                driver\n            ]            \n        }\n\n        shipments = shipments.filter((shipment) => shipment.id !== shipmentId);\n\n        // remove shipment from the database\n        ShipmentsService.deleteShipment(shipmentId);\n\n        this.context.setIdleDrivers(idleDrivers);\n        this.context.setShipments(shipments);\n        routeUserTo(this.props.rprops.history, '/');\n\n    }\n\n    \n\n    render() {\n\n        const { shipment } = this.state\n        let driverPayout = 0;\n        if (!objectIsEmpty(shipment)) {\n            driverPayout = shipment.driver.pay_rate * shipment.miles;\n        }\n\n        return (\n            !objectIsEmpty(shipment) ?\n                <section className='LoadByIdPage width-wrapper'>\n                    <div className='load-header'>\n                        <button className='app-button' onClick={() => {handleGoBack(this.props.rprops.history)}}>\n                            Go Back\n                        </button>\n                        <Link className='app-button edit-button' to={`${config.BASEPATH}/load/edit/${shipment.id}`}>\n                            Edit\n                        </Link>\n                        <button className='app-button' onClick={() => {this.handleShipmentDelete(shipment.id)}}>\n                            Delete\n                        </button>\n                    </div>\n                    <div className='flex-row'>\n                        <div className='pick-up-info box-style'>\n                            <h3>Pick Up Info</h3>\n                            <div className='pickup info-wrapper'>\n                                <div className='pickup info date'>\n                                    <h6>Date</h6>\n                                    <p>{shipment.pickup_date}</p>\n                                </div>\n                                <div className='pickup info city'>\n                                    <h6>City, ST</h6>\n                                    <p>{shipment.pickup_warehouse.city}, {shipment.pickup_warehouse.state}</p>\n                                </div>\n                                <div className='pickup info state'>\n                                    <h6>Zipcode</h6>\n                                    <p>{shipment.pickup_warehouse.zipcode}</p>\n                                </div>\n                            </div>\n                        </div>\n                        <div className='delivery-info box-style'>\n                            <h3>Delivery Info</h3>\n                            <div className='delivery info-wrapper'>\n                                <div className='delivery info'>\n                                    <h6>Delivery Date</h6>\n                                    <p>{shipment.delivery_date}</p>\n                                </div>\n                                <div className='delivery info city'>\n                                    <h6>City, ST</h6>\n                                    <p>{shipment.delivery_warehouse.city}, {shipment.delivery_warehouse.state}</p>\n                                </div>\n                                <div className='delivery info state'>\n                                    <h6>Zipcode</h6>\n                                    <p>{shipment.delivery_warehouse.zipcode}</p>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    <div className='additional-info box-style'>\n                        <h3>Additional Info</h3>\n                        <div className='flex-row'>\n                            <div className='additional-info info-wrapper'>\n                                <div className='additional-info info'>\n                                    <h6>Miles</h6>\n                                    <p>{shipment.miles}</p>\n                                </div>\n                                <div className='additional-info info city'>\n                                    <h6>Rate</h6>\n                                    <p className='red-text'>{formatCurrency(shipment.rate)}</p>\n                                </div>\n                                <div className='additional-info info state'>\n                                    <h6>Broker</h6>\n                                    <p>{shipment.broker}</p>\n                                </div>\n                            </div>\n                            <div className='additional-info change-status'>\n                                <div className='additional-info info'>\n                                    <form onSubmit={(e) => { this.handleChangeLoadStatus(e) }}>\n                                        <fieldset>\n                                            <legend><h6><label htmlFor='status'>Status</label></h6></legend>\n                                            {\n                                                shipment.status !== 'un-assigned'\n                                                    ?\n                                                    <select\n                                                        className='select-css'\n                                                        name='status'\n                                                        id='status'\n                                                        value={this.state.status}\n                                                        onChange={(e) => { this.setState({ status: e.target.value }) }}>\n                                                        {\n                                                            renderLoadStatusOptions(this.context.loadStatus)\n                                                        }\n                                                    </select>\n                                                    :\n                                                    <select\n                                                        className='select-css'\n                                                        name='status'\n                                                        id='status'\n                                                        disabled\n                                                        defaultValue={this.state.status}\n                                                    >\n                                                        {\n                                                            renderLoadStatusOptions(this.context.loadStatus)\n                                                        }\n                                                    </select>\n                                            }\n                                            {\n                                                this.state.status !== shipment.status\n                                                    ?\n                                                    <button type='submit' className='app-button'>\n                                                        Change Status\n                                                    </button>\n                                                    :\n                                                    <button className='app-button' disabled>\n                                                        Change Status\n                                                    </button>\n                                            }\n                                        </fieldset>\n                                    </form>\n\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    {\n                        shipment.status !== 'un-assigned'\n                            ?\n                            <div className='driver-info box-style'>\n                                <h3>Driver Info</h3>\n                                <div className='flex-row'>\n\n                                    <div className='additional-info info-wrapper'>\n                                        <div className='additional-info info'>\n                                            <h6>Driver</h6>\n                                            <p>{shipment.driver.full_name}</p>\n                                        </div>\n                                        <div className='additional-info info city'>\n                                            <h6>Pay per Mile</h6>\n                                            <p>{formatCurrency(shipment.driver.pay_rate)}</p>\n                                        </div>\n                                        <div className='additional-info info'>\n                                            <h6>Equipment #</h6>\n                                            <p>{shipment.equipment.unit_num}</p>\n                                        </div>\n                                    </div>\n                                    <div className='additional-info info-wrapper'>\n                                        <div className='additional-info info state'>\n                                            <h6>Drvier Payout</h6>\n                                            <p className='red-text'>{formatCurrency(driverPayout)}</p>\n                                        </div>\n                                        <div className='additional-info info'>\n                                            <h6>Load Balance Amount <br />\n                                                ( rate - driver payout )\n                                            </h6>\n                                            <p className='green-text'>{formatCurrency(shipment.rate - driverPayout)}</p>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                            :\n                            <div className='driver-info box-style'>\n                                <h3>Assign Driver</h3>\n                                <div className='assign-driver'>\n                                    <form className='assign-driver-form' onSubmit={(e) => { this.handleAssignDriver(e) }}>\n                                        <fieldset>\n                                            <div className='assign-driver-fields blue-text'>\n                                                <h6>Available Drivers</h6>\n                                                <DriversDropDown\n                                                    drivers={this.state.avaialableDrivers}\n                                                    defaultValue={this.state.driverAssigned}\n                                                    handleChange={(id) => { this.onDriverDropDownChange(id) }}\n                                                />\n                                                {\n                                                    this.state.driverAssigned === -1\n                                                        ?\n                                                        <button className='app-button' type='submit' disabled>Assign</button>\n                                                        :\n                                                        <button className='app-button' type='submit'>Assign</button>\n                                                }\n\n                                            </div>\n                                        </fieldset>\n                                    </form>\n                                </div>\n                            </div>\n                    }\n                </section>\n                :\n                <></>\n        );\n    }\n}\n\nexport default LoadByIdPage;","import React, { Component } from 'react';\nimport './AddDriverPage.css';\nimport {\n    handleGoBack,\n    routeUserTo,\n    renderEquipmentOptions,\n} from '../../HelperFunctions/HelperFunctions';\nimport AppContext from '../../Contexts/AppContext';\nimport config from '../../config';\nimport { isNotValidDriverName, isNotValidPay } from '../../HelperFunctions/InputFieldValidations';\nimport DriversService from '../../Services/DriversService';\n\nclass AddDriverPage extends Component {\n\n    static defaultProps = {\n        rprops: {},\n        equipments: [],\n    }\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            hasError: false,\n            availableEquipments: [],\n            error: {\n                driverNameError: 'Driver name is required',\n                driverName: false,\n                driverPayError: 'Driver pay cannot have characters in it',\n                driverPay: false,\n            },\n            full_name: '',\n            pay_rate: 0.0,\n            equipment_id: -1,\n        }\n    }\n\n    static contextType = AppContext\n\n    validateDriverName = (full_name) => {\n        const isNotValid = isNotValidDriverName(full_name)\n        this.setState({\n            full_name\n        })\n        if(isNotValid){\n            this.setState({\n                error: {\n                    ...this.state.error,\n                    driverName: true,\n                    driverNameError: isNotValid\n                }\n            })\n        }else{\n            this.setState({\n                error: {\n                    ...this.state.error,\n                    driverName: false,\n                    driverNameError: ''\n                }\n            })\n        }\n    }\n\n    validatePayRate = (pay_rate) => {\n        const isNotValid = isNotValidPay(pay_rate)\n        this.setState({\n            pay_rate\n        })\n        if(isNotValid){\n            this.setState({\n                error: {\n                    ...this.state.error,\n                    driverPay: true,\n                    driverPayError: isNotValid\n                }\n            })\n        }else{\n            this.setState({\n                error: {\n                    ...this.state.error,\n                    driverPay: false,\n                    driverPayError: ''\n                }\n            })\n        }\n    }\n\n    updateIdleDriverQueue = (driver) => {\n        let { idleDrivers } = this.context;\n        idleDrivers = [\n            ...idleDrivers,\n            driver\n        ]\n        this.context.setIdleDrivers(idleDrivers)\n    }\n\n    handleAddDriver = async (e) => {\n\n        e.preventDefault();\n        const full_name = e.target['full_name'].value;\n        const pay_rate = e.target['pay_rate'].value;\n        let equipment_id = parseInt(e.target['equipment_id'].value, 10);\n\n        let dbDriver = {\n            full_name,\n            pay_rate,\n            equipment_id: equipment_id !== -1 ? equipment_id : null\n        }\n\n        dbDriver = await DriversService.addDriver(dbDriver)\n\n        let {drivers, idleDrivers, equipments} = this.context\n\n        let driver = {\n            id: dbDriver.id,\n            full_name,\n            pay_rate,\n            status: 'active'\n        }\n        \n        let equipment = {}\n        if(equipment_id !== -1){\n\n            equipments = equipments.map((contextEquipment) => {\n                if(contextEquipment.id === equipment_id){\n                    contextEquipment.driver = driver\n                    equipment = {\n                        id: contextEquipment.id,\n                        unit_num: contextEquipment.unit_num,\n                        status: contextEquipment.status\n                    }\n                }\n                return contextEquipment\n            });\n        }\n\n        driver = {\n            ...driver,\n            equipment\n        }\n\n        // add new driver to all the drivers\n        drivers = [\n            ...drivers,\n            driver\n        ]\n\n        // adding new driver to the idle driver queue\n        idleDrivers = [\n            ...idleDrivers,\n            driver\n        ]\n\n        this.context.setDrivers(drivers);\n        this.context.setIdleDrivers(idleDrivers);\n        this.context.setEquipments(equipments);\n\n        routeUserTo(this.props.rprops.history, `${config.BASEPATH}/drivers`)\n    }\n\n    render() {\n\n        const { error } = this.state\n        const availableEquipments = this.props.equipments.filter((equipment) => !equipment.driver.hasOwnProperty('id') && equipment.status === 'active')\n\n        return (\n            <section className='AddDriverPage width-wrapper'>\n                <form className='add-load-form' onSubmit={(e) => { this.handleAddDriver(e) }}>\n                    <fieldset>\n                        <legend className='blue-back white-text'>\n                            <button type='button' className='app-button go-back' onClick={(e) => { handleGoBack(this.props.rprops.history) }}>\n                                Go Back\n                            </button>\n                            <span>Add Driver</span>\n                        </legend>\n                        <div className='flex'>\n                            <label htmlFor='full_name'>\n                                <span className='input-title'>* driver name</span>\n                                <input\n                                    type='text'\n                                    id='full_name'\n                                    name='full_name'\n                                    placeholder='Eg. John Doe'\n                                    value={this.state.full_name}\n                                    onChange={(e) => { this.validateDriverName(e.target.value) }}\n                                    required\n                                />\n                                {\n                                    error.driverName &&\n                                    <span className='error'>{error.driverNameError}</span>\n                                }\n                            </label>\n                            <label htmlFor='pay_rate'>\n                                <span className='input-title'>salary Per mile</span>\n                                <input\n                                    type='text'\n                                    id='pay_rate'\n                                    name='pay_rate'\n                                    min='0'\n                                    placeholder='Eg. 0.43'\n                                    value={this.state.pay_rate}\n                                    onChange={(e) => { this.validatePayRate(e.target.value) }}\n                                    onBlur={(e) => {\n                                        if(e.target.value.trim() === ''){\n                                            this.setState({\n                                                pay_rate: 0.0,\n                                                error: {\n                                                    ...this.state.error,\n                                                    driverPay: false,\n                                                    driverPayError: ''\n                                                }\n                                            })\n                                        }\n                                    }}\n                                />\n                                {\n                                    error.driverPay &&\n                                    <span className='error'>{error.driverPayError}</span>\n                                }\n                            </label>\n                            <label htmlFor='delivery-zipcode'>\n                                <span className='input-title'>Available Equipments</span>\n                                <select className='select-css' \n                                    name='equipment_id' \n                                    id='equipment_id'\n                                    value={this.state.equipment_id}\n                                    onChange={(e) => {this.setState({equipment_id: e.target.value})}}\n                                >\n                                    <option value='-1'>No Equipment</option>\n                                    {renderEquipmentOptions(availableEquipments)}\n                                </select>\n                                {\n                                    this.state.error.deliveryZipcode &&\n                                    <span className='error'>{this.state.error.zipcodeError}</span>\n                                }\n                            </label>\n                            {\n                                !(\n                                    error.driverName ||\n                                    error.driverPay\n                                )\n                                    ?\n                                    <button\n                                        className='app-button'\n                                        type='submit'\n                                    >\n                                        Add New Driver\n                                    </button>\n                                    :\n                                    <button\n                                        className='app-button'\n                                        type='submit'\n                                        disabled\n                                    >\n                                        Add New Driver\n                                    </button>\n                            }\n\n                        </div>\n                    </fieldset>\n                </form>\n            </section>\n        );\n    }\n}\n\nexport default AddDriverPage;","import React, { Component } from 'react';\nimport './AddEquipmentPage.css';\nimport {\n    handleGoBack,\n    routeUserTo,\n    renderDriverOptions,\n    objectIsEmpty,\n} from '../../HelperFunctions/HelperFunctions';\nimport AppContext from '../../Contexts/AppContext';\nimport config from '../../config';\nimport { emptySpaces } from '../../HelperFunctions/InputFieldValidations';\nimport EquipmentService from '../../Services/EquipmentsService';\nimport DriversService from '../../Services/DriversService';\n\nclass AddEquipmentPage extends Component {\n\n    static defaultProps = {\n        rprops: {},\n        drivers: [],\n    }\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            availableDrivers: [],\n            error: {\n                equipmentNumError: 'Equipment number is required',\n                equipmentNum: false,\n            },\n            unit_num: '',\n            driver_id: -1,\n        }\n    }\n\n    static contextType = AppContext\n\n    validateUnitNumField = (unit_num) => {\n        this.setState({\n            unit_num\n        })\n        if(emptySpaces(unit_num)){\n            this.setState({\n                hasError: true,\n                error: {\n                    equipmentNumError: 'Equipment number is required',\n                    equipmentNum: true,\n                }\n            })\n        }else{\n            this.setState({\n                hasError: false,\n                error: {\n                    equipmentNumError: '',\n                    equipmentNum: false,\n                }\n            })\n        }\n    }\n\n    updateIdleDriverQueue = (driver) => {\n        let { idleDrivers } = this.context;\n        idleDrivers = [\n            ...idleDrivers,\n            driver\n        ]\n        this.context.setIdleDrivers(idleDrivers)\n    }\n\n    handleAddEquipment = async (e) => {\n\n        e.preventDefault();\n\n        const unit_num = e.target['unit_num'].value;\n        const driver_id = parseInt(e.target['driver_id'].value,10);\n\n        // Add Equipment to the db\n        const dbEquipment = await EquipmentService.addNewEquipment(unit_num);        \n\n        let equipment = {\n            unit_num: dbEquipment.unit_num,\n            id: dbEquipment.id,\n            status: 'active'\n        }\n\n        let driver = {}\n        let {equipments, drivers, idleDrivers} = this.context\n\n        if(driver_id !== -1){\n\n            // update driver to reference equipment in the db\n            DriversService.updateEquipment(driver_id, equipment.id);\n\n            drivers = drivers.map((contextDriver) => {\n                if(contextDriver.id === driver_id){\n                    contextDriver.equipment = equipment\n                    driver = {\n                        id: contextDriver.id,\n                        full_name: contextDriver.full_name,\n                        pay_rate: contextDriver.pay_rate,\n                        status: 'active',\n                    }\n                }\n                return contextDriver;\n            })\n            \n            idleDrivers = idleDrivers.map((idleDriver) => {\n                if(idleDriver.id === driver_id){\n                    idleDriver.equipment = equipment\n                }\n                return idleDriver;\n            })\n        } else {\n            driver = {\n                full_name: '',\n                pay_rate: ''\n            }\n        }\n\n        // adding driver to the equipment \n        equipment = {\n            ...equipment,\n            driver,\n        }\n\n        // adding new equipment to all equipments array\n        equipments = [\n            ...equipments,\n            equipment\n        ]\n        \n        this.context.setDrivers(drivers);\n        this.context.setIdleDrivers(idleDrivers);\n        this.context.setEquipments(equipments);\n        routeUserTo(this.props.rprops.history, `${config.BASEPATH}/equipments`)\n    }\n\n    render() {\n\n        const { error } = this.state\n        const availableDrivers = this.props.drivers.filter((driver) => objectIsEmpty(driver.equipment) && driver.status === 'active')\n\n        return (\n            <section className='AddEquipmentPage width-wrapper'>\n                <form className='add-load-form' onSubmit={(e) => { this.handleAddEquipment(e) }}>\n                    <fieldset>\n                        <legend className='blue-back white-text'>\n                            <button type='button' className='app-button go-back' onClick={(e) => { handleGoBack(this.props.rprops.history) }}>\n                                Go Back\n                            </button>\n                            <span>Add Equipment</span>\n                        </legend>\n                        <div className='flex'>\n                            <label htmlFor='unit_num'>\n                                <span className='input-title'>* Equipment Number</span>\n                                <input\n                                    type='text'\n                                    id='unit_num'\n                                    name='unit_num'\n                                    placeholder='Eg. A 101'\n                                    value={this.state.unit_num}\n                                    onChange={(e) => { this.validateUnitNumField(e.target.value) }}\n                                    required\n                                />\n                                {\n                                    error.equipmentNum &&\n                                    <span className='error'>{error.equipmentNumError}</span>\n                                }\n                            </label>\n                            <label htmlFor='driver_id'>\n                                <span className='input-title'>Available Drivers</span>\n                                <select className='select-css' \n                                    name='driver_id' \n                                    id='driver_id'\n                                    value={this.state.driver_id}\n                                    onChange={(e) => {this.setState({driver_id: e.target.value})}}\n                                >\n                                    <option value='-1'>No Driver</option>\n                                    {renderDriverOptions(availableDrivers)}\n                                </select>\n                                \n                            </label>\n                            {\n                                !error.equipmentNum\n                                    ?\n                                    <button\n                                        className='app-button'\n                                        type='submit'\n                                    >\n                                        Add New Equipment\n                                    </button>\n                                    :\n                                    <button\n                                        className='app-button'\n                                        type='submit'\n                                        disabled\n                                    >\n                                        Add New Equipment\n                                    </button>\n                            }\n\n                        </div>\n                    </fieldset>\n                </form>\n            </section>\n        );\n    }\n}\n\nexport default AddEquipmentPage;","import React, { Component } from 'react';\nimport './DriverEditPage.css';\nimport AppContext from '../../Contexts/AppContext';\nimport {\n    handleGoBack,\n    objectIsEmpty,\n    renderEquipmentOptions,\n    routeUserTo,\n} from '../../HelperFunctions/HelperFunctions';\nimport { isNotValidDriverName, isNotValidPay } from '../../HelperFunctions/InputFieldValidations';\nimport config from '../../config';\nimport DriversSerivce from '../../Services/DriversService';\n\nclass DriverEditPage extends Component {\n\n    static defaultProps = {\n        equipments: {},\n        idleDrivers: {},\n        rprops: {},\n    }\n\n    constructor(props) {\n        super(props);\n\n        // setting state so that edit equipment page\n        // already has values in it for the selected equipment to edit\n        // if not done this way , then another Get request had to be made for\n        // getting equipment by id \n        let full_name = '';\n        let pay_rate= '';\n        let equipment_id = -1;\n        const driver_id = parseInt(this.props.rprops.match.params.id, 10)\n        let driver = this.props.drivers.filter((driver) => driver.id === driver_id)[0] || {};\n        \n        if(!objectIsEmpty(driver)){\n            full_name = driver.full_name;\n            pay_rate = driver.pay_rate;\n            equipment_id = !objectIsEmpty(driver.equipment) ? driver.equipment.id : -1;\n        }\n\n        let availableEquipments = [];\n        availableEquipments = this.props.equipments.filter((equipment) => !equipment.driver.hasOwnProperty('id') && equipment.status === 'active')\n        if(equipment_id !== -1){\n            const currentEquipment = this.props.equipments.filter((propsEquipment) => propsEquipment.id === equipment_id)[0]\n            availableEquipments = [\n                currentEquipment,\n                ...availableEquipments\n            ]\n            // console.log(currentEquipment);\n        }\n\n        this.state = {\n            error: {\n                driverNameError: '',\n                driverName: false,\n                driverPayError: '',\n                driverPay: false,\n            },\n            availableEquipments,\n            driver,\n            full_name,\n            pay_rate,\n            equipment_id,\n        }\n    }\n\n    static contextType = AppContext\n\n    validateDriverName = (full_name) => {\n        const isNotValid = isNotValidDriverName(full_name)\n        this.setState({\n            full_name\n        })\n        if(isNotValid){\n            this.setState({\n                error: {\n                    ...this.state.error,\n                    driverName: true,\n                    driverNameError: isNotValid\n                }\n            })\n        }else{\n            this.setState({\n                error: {\n                    ...this.state.error,\n                    driverName: false,\n                    driverNameError: ''\n                }\n            })\n        }\n    }\n\n    validatePayRate = (pay_rate) => {\n        const isNotValid = isNotValidPay(pay_rate)\n        this.setState({\n            pay_rate\n        })\n        if(isNotValid){\n            this.setState({\n                error: {\n                    ...this.state.error,\n                    driverPay: true,\n                    driverPayError: isNotValid\n                }\n            })\n        }else{\n            this.setState({\n                error: {\n                    ...this.state.error,\n                    driverPay: false,\n                    driverPayError: ''\n                }\n            })\n        }\n    }\n\n    changeEquipment = (drivers, driverToChange, equipment) => {\n        const driversArray = drivers.map((driver) => {\n            if(driver.id === driverToChange.id){\n                driver.equipment = equipment\n            }\n            return driver\n        }) \n        return driversArray;\n    }\n\n    makeDriverChanges = (drivers, driverToChange, changes) => {\n        const driversArray = drivers.map((driver) => {\n            if(driver.id === driverToChange.id){\n                driver = {\n                    ...driver,\n                    full_name: changes.full_name,\n                    pay_rate: changes.pay_rate\n                }\n            }\n            return driver;\n        })\n        return driversArray;\n    }\n\n    handleEditDriver = (e, changeDriver) => {\n\n        e.preventDefault();\n\n        const full_name = e.target['full_name'].value\n        const pay_rate = e.target['pay_rate'].value\n        const newEquipmentId = parseInt(e.target['equipment_id'].value)\n        const oldEquipmentId = !objectIsEmpty(changeDriver.equipment) ? changeDriver.equipment.id : -1;\n\n        let {drivers, idleDrivers, equipments} = this.context\n        let newEquipment= {};\n\n        if(newEquipmentId !== oldEquipmentId){\n\n            newEquipment = newEquipmentId !== -1 ? equipments.filter((equipment) => equipment.id === newEquipmentId)[0] : {};\n            newEquipment = !objectIsEmpty(newEquipment) \n                ?\n                {\n                    id: newEquipment.id,\n                    unit_num: newEquipment.unit_num,\n                    status: 'active'\n                } \n                : {}\n\n            drivers = this.changeEquipment(drivers, changeDriver, newEquipment)\n            idleDrivers = this.changeEquipment(idleDrivers, changeDriver, newEquipment)\n\n            // remove driver from old equipment if id not -1\n            if(oldEquipmentId !== -1){\n                equipments = equipments.map((equipment) => {\n                    if(equipment.id === oldEquipmentId){\n                        equipment.driver = {}\n                    }\n                    return equipment\n                })\n            }\n\n            equipments = equipments.map((equipment) => {\n                if(equipment.id === newEquipmentId){\n                    equipment.driver = {\n                        id: changeDriver.id,\n                        full_name,\n                        pay_rate,\n                        status: 'active'\n                    }\n                }\n                return equipment\n            })\n\n        }\n        \n        const changes = {\n            full_name,\n            pay_rate\n        }\n        // make changes to the changed driver in all drivers array\n        drivers = this.makeDriverChanges(drivers, changeDriver, changes)\n        idleDrivers = this.makeDriverChanges(idleDrivers, changeDriver, changes)\n\n        const updateDriverInDB = {\n            id: changeDriver.id,\n            full_name,\n            pay_rate,\n            equipment_id: newEquipmentId === -1 ? null : newEquipmentId\n        }\n\n        DriversSerivce.updateDriver(updateDriverInDB);\n\n        this.context.setDrivers(drivers);\n        this.context.setEquipments(equipments);\n        this.context.setIdleDrivers(idleDrivers);\n\n        routeUserTo(this.props.rprops.history, `${config.BASEPATH}/drivers`);\n    }\n\n    render() {\n\n        \n        const {full_name, pay_rate, equipment_id, driver, availableEquipments, error} = this.state;\n        \n\n        return (\n            <section className='DriverEditPage width-wrapper'>\n\n                <form className='edit-equip' onSubmit={(e) => { this.handleEditDriver(e, driver) }}>\n                    <fieldset>\n                        <legend className='blue-back white-text'>\n                            <button type='button' className='app-button go-back' onClick={(e) => { handleGoBack(this.props.rprops.history) }}>\n                                Go Back\n                            </button>\n                            <span>Edit Driver</span>\n                        </legend>\n                        <div className='flex'>\n                            <label htmlFor='full_name'>\n                                <span className='input-title'>Name</span>\n                                <input\n                                    type='text'\n                                    id='full_name'\n                                    name='full_name'\n                                    required\n                                    value={full_name}\n                                    onChange={(e) => { this.validateDriverName(e.target.value)}}\n                                />\n                                {\n                                    error.driverName &&\n                                    <span className='error'>{error.driverNameError}</span>\n                                }\n                            </label>\n                            <label htmlFor='pay_rate'>\n                                <span className='input-title'>Pay Rate</span>\n                                <input\n                                    type='text'\n                                    id='pay_rate'\n                                    name='pay_rate'\n                                    required\n                                    value={pay_rate}\n                                    onChange={(e) => { this.validatePayRate(e.target.value) }}\n                                    onBlur={(e) => {\n                                        if(e.target.value.trim() === ''){\n                                            this.setState({\n                                                pay_rate: 0.0,\n                                                error: {\n                                                    ...this.state.error,\n                                                    driverPay: false,\n                                                    driverPayError: ''\n                                                }\n                                            })\n                                        }\n                                    }}\n                                />\n                                {\n                                    error.driverPay &&\n                                    <span className='error'>{error.driverPayError}</span>\n                                }\n                            </label>\n                            <label htmlFor='driver'>\n                                <span className='input-title'>Available Equipment</span>\n                                <select \n                                    className='select-css' \n                                    value={equipment_id}\n                                    name='equipmen_id'\n                                    id='equipment_id'\n                                    onChange={(e) => {this.setState({equipment_id: e.target.value})}}>\n                                        <option value='-1'>No Equipment</option>\n                                        {renderEquipmentOptions(availableEquipments)}\n                                </select>\n                            </label>\n                            {\n                                error.driverPay ||\n                                error.driverName\n                                    ?\n                                    <button\n                                        className='app-button'\n                                        type='submit'\n                                        disabled\n                                    >\n                                        Save Changes\n                                    </button>\n                                    :\n                                    <button\n                                        className='app-button'\n                                        type='submit'\n                                    >\n                                        Save Changes\n                                    </button>\n                            }\n                        </div>\n                    </fieldset>\n                </form>\n            </section>\n        );\n    }\n}\n\nexport default DriverEditPage;","import React, { Component } from 'react';\nimport './EditLoadPage.css';\nimport {\n    handleGoBack,\n    routeUserTo,\n    formatDate,\n    arrayIsEmpty,\n} from '../../HelperFunctions/HelperFunctions';\nimport {\n    notValidDate,\n    emptySpaces,\n} from '../../HelperFunctions/InputFieldValidations';\nimport AppContext from '../../Contexts/AppContext';\nimport config from '../../config';\nimport ShipmentsSerivce from '../../Services/ShipmentsService';\n\nclass EditLoadPage extends Component {\n\n    constructor(props) {\n        super(props);\n\n        const id = parseInt(props.rprops.match.params.id, 10);\n        const {shipments} = this.props;\n        let shipment = {};\n        let pickup_warehouse = {};\n        let delivery_warehouse = {};\n        let driver = {};\n        if(!arrayIsEmpty(shipments)){\n            shipment = props.shipments.filter((shipment) => shipment.id === id)[0];\n            pickup_warehouse = shipment.pickup_warehouse;\n            delivery_warehouse = shipment.delivery_warehouse;\n            driver = shipment.driver\n        }\n\n\n\n        this.state = {\n            shipmentId: id,\n            availableDrivers: [],\n            error: {\n                dateError: 'Enter Date in correct format \"MM/DD/YYYY\"',\n                pickupDate: false,\n                deliveryDate: false,\n                cityError: 'City is required',\n                pickupCity: false,\n                deliveryCity: false,\n                stateError: 'State is required and must be two characters, Eg. New York will be NY',\n                pickupState: false,\n                deliveryState: false,\n                zipcodeError: 'Zipcode is required',\n                pickupZipcode: false,\n                deliveryZipcode: false,\n            },\n            pickupDate: formatDate(shipment.pickup_date),\n            deliveryDate: formatDate(shipment.delivery_date),\n            pickupCity: pickup_warehouse.city,\n            deliveryCity: delivery_warehouse.city,\n            pickupState: pickup_warehouse.state,\n            deliveryState: delivery_warehouse.state,\n            pickupZipcode: pickup_warehouse.zipcode,\n            deliveryZipcode: delivery_warehouse.zipcode,\n            miles: shipment.miles,\n            rate: shipment.rate,\n            broker: shipment.broker || '',\n            driverId: driver.id\n        }\n    }\n\n    static contextType = AppContext\n\n    // validation of date, Validates both pickup date and delivery date\n    // *** THIS FUNCTION IS DEPENDENT ON THE NAME PROPERTY OF THE INPUT BOXES ***\n    validateInputDate = (e) => {\n        const date = e.target.value;\n        const { name } = e.target;\n\n        name === 'pickup-date'\n            ? this.setState({ pickupDate: date })\n            : this.setState({ deliveryDate: date });\n\n        if (notValidDate(date)) {\n            name === 'pickup-date'\n                ? this.setState({\n                    error: {\n                        ...this.state.error,\n                        pickupDate: true,\n                    }\n                })\n                : this.setState({\n                    error: {\n                        ...this.state.error,\n                        deliveryDate: true,\n                    }\n                });\n        } else {\n            \n            name === 'pickup-date'\n                ? this.setState({\n                    error: {\n                        ...this.state.error,\n                        pickupDate: false,\n                    }\n                })\n                : this.setState({\n                    error: {\n                        ...this.state.error,\n                        deliveryDate: false,\n                    }\n                });\n        }\n    }\n\n    validateCityInput = (e) => {\n        const city = e.target.value;\n        const { name } = e.target;\n\n        name === 'pickup-city'\n            ? this.setState({ pickupCity: city })\n            : this.setState({ deliveryCity: city });\n\n\n        if (emptySpaces(city)) {\n            name === 'pickup-city'\n                ? this.setState({\n                    error: {\n                        ...this.state.error,\n                        pickupCity: true,\n                    }\n                })\n                : this.setState({\n                    error: {\n                        ...this.state.error,\n                        deliveryCity: true,\n                    }\n                });\n        } else {\n            name === 'pickup-city'\n                ? this.setState({\n                    error: {\n                        ...this.state.error,\n                        pickupCity: false,\n                    }\n                })\n                : this.setState({\n                    error: {\n                        ...this.state.error,\n                        deliveryCity: false,\n                    }\n                });\n        }\n    }\n\n    validateStateInput = (e) => {\n        const stateCode = e.target.value;\n        const { name } = e.target;\n\n        name === 'pickup-state'\n            ? this.setState({ pickupState: stateCode })\n            : this.setState({ deliveryState: stateCode });\n\n\n        if (emptySpaces(stateCode) || stateCode.trim().length !== 2) {\n            name === 'pickup-state'\n                ? this.setState({\n                    error: {\n                        ...this.state.error,\n                        pickupState: true,\n                    }\n                })\n                : this.setState({\n                    error: {\n                        ...this.state.error,\n                        deliveryState: true,\n                    }\n                });\n        } else {\n            name === 'pickup-state'\n                ? this.setState({\n                    error: {\n                        ...this.state.error,\n                        pickupState: false,\n                    }\n                })\n                : this.setState({\n                    error: {\n                        ...this.state.error,\n                        deliveryState: false,\n                    }\n                });\n        }\n    }\n\n    validateZipcodeInput = (e) => {\n        const zipcode = e.target.value;\n        const { name } = e.target;\n\n        name === 'pickup-zipcode'\n            ? this.setState({ pickupZipcode: zipcode })\n            : this.setState({ deliveryZipcode: zipcode });\n\n\n        if (emptySpaces(zipcode)) {\n            name === 'pickup-zipcode'\n                ? this.setState({\n                    error: {\n                        ...this.state.error,\n                        pickupZipcode: true,\n                    }\n                })\n                : this.setState({\n                    error: {\n                        ...this.state.error,\n                        deliveryZipcode: true,\n                    }\n                });\n        } else {\n            name === 'pickup-zipcode'\n                ? this.setState({\n                    error: {\n                        ...this.state.error,\n                        pickupZipcode: false,\n                    }\n                })\n                : this.setState({\n                    error: {\n                        ...this.state.error,\n                        deliveryZipcode: false,\n                    }\n                });\n        }\n    }\n\n    handleEditLoad = (e) => {\n\n        e.preventDefault();\n\n        const { shipmentId } = this.state;\n        const broker = e.target['broker'].value.trim() || '';\n        const delivery_warehouse = {\n            city: e.target['delivery-city'].value.trim(),\n            state: e.target['delivery-state'].value,\n            zipcode: e.target['delivery-zipcode'].value.trim()\n        };\n        const pickup_warehouse = {\n            city: e.target['pickup-city'].value.trim(),\n            state: e.target['pickup-state'].value,\n            zipcode: e.target['pickup-zipcode'].value.trim()\n        };\n        const miles = e.target['miles'].value.trim() || '0';\n        const rate = e.target['rate'].value.trim() || '0'\n        const pickup_date = e.target['pickup-date'].value;\n        const delivery_date = e.target['delivery-date'].value;\n\n        const newShipmentFields = {\n            pickup_date,\n            pickup_warehouse,\n            delivery_date,\n            delivery_warehouse,\n            miles,\n            rate,\n            broker\n        }\n\n        const updateShipmentInDB = {\n            id: shipmentId,\n            pickup_date,\n            delivery_date,\n            rate,\n            miles,\n            broker,\n            pickup_city: pickup_warehouse.city,\n            pickup_state: pickup_warehouse.state,\n            pickup_zipcode: pickup_warehouse.zipcode,\n            delivery_city: delivery_warehouse.city,\n            delivery_state: delivery_warehouse.state,\n            delivery_zipcode: delivery_warehouse.zipcode\n        }\n\n        // update the fields in the database.\n        ShipmentsSerivce.updateShipment(updateShipmentInDB)\n\n        let {shipments} = this.context\n        shipments = shipments.map((shipment) => {\n            if(shipment.id === shipmentId){\n                shipment = {\n                    ...shipment,\n                    ...newShipmentFields,\n                }\n            }\n            return shipment;\n        })\n\n        this.context.setShipments(shipments);\n        routeUserTo(this.props.rprops.history, `${config.BASEPATH}/load/${shipmentId}`)\n\n    }\n\n    render() {        \n        const { error } = this.state\n\n        return (\n            <section className='EditLoadPage width-wrapper'>\n                <form className='add-load-form' onSubmit={(e) => { this.handleEditLoad(e) }}>\n                    <fieldset>\n                        <legend className='blue-back white-text'>\n                            <button type='button' className='app-button go-back' onClick={(e) => { handleGoBack(this.props.rprops.history) }}>\n                                Go Back\n                            </button>\n                            <span>Edit Equipment</span>\n                        </legend>\n                        <div className='flex'>\n                            <h4 className='fieldset-sub-title blue-text'>\n                                Pick Up Info\n                            </h4>\n                            <label htmlFor='pickup-date'>\n                                <span className='input-title'>* Date</span>\n                                <input\n                                    type='text'\n                                    id='pickup-date'\n                                    name='pickup-date'\n                                    maxLength='10'\n                                    value={this.state.pickupDate}\n                                    onChange={(e) => { this.validateInputDate(e) }}\n                                    onBlur={(e) => {\n                                        if (e.target.value === '') {\n                                            this.setState({\n                                                pickupDate: formatDate(new Date()),\n                                                error: {\n                                                    ...this.state.error,\n                                                    pickupDate: false\n                                                }\n                                            })\n                                        }\n                                    }}\n                                />\n                                {\n                                    error.pickupDate &&\n                                    <span className='error'>{error.dateError}</span>\n                                }\n                            </label>\n                            <label htmlFor='pickup-city'>\n                                <span className='input-title'>* City</span>\n                                <input\n                                    type='text'\n                                    id='pickup-city'\n                                    name='pickup-city'\n                                    placeholder='Eg. Dallas'\n                                    required\n                                    value={this.state.pickupCity}\n                                    onChange={(e) => { this.validateCityInput(e) }}\n                                />\n                                {\n                                    error.pickupCity &&\n                                    <span className='error'>{error.cityError}</span>\n                                }\n                            </label>\n                            <label htmlFor='pickup-state'>\n                                <span className='input-title'>* State</span>\n                                <input\n                                    type='text'\n                                    placeholder='Eg. TX'\n                                    maxLength='2'\n                                    id='pickup-state'\n                                    name='pickup-state'\n                                    required\n                                    value={this.state.pickupState}\n                                    onChange={(e) => { this.validateStateInput(e) }}\n                                />\n                                {\n                                    this.state.error.pickupState &&\n                                    <span className='error'>{this.state.error.stateError}</span>\n                                }\n                            </label>\n                            <label htmlFor='pickup-zipcode'>\n                                <span className='input-title'>* Zipcode</span>\n                                <input\n                                    type='text'\n                                    id='pickup-zipcode'\n                                    maxLength='10'\n                                    name='pickup-zipcode'\n                                    placeholder='Eg. 75001'\n                                    required\n                                    value={this.state.pickupZipcode}\n                                    onChange={(e) => { this.validateZipcodeInput(e) }}\n                                />\n                                {\n                                    this.state.error.pickupZipcode &&\n                                    <span className='error'>{this.state.error.zipcodeError}</span>\n                                }\n                            </label>\n                            <h4 className='fieldset-sub-title blue-text'>\n                                Delivery Info\n                            </h4>\n                            <label htmlFor='delivery-date'>\n                                <span className='input-title'>* Date</span>\n                                <input\n                                    type='text'\n                                    id='delivery-date'\n                                    name='delivery-date'\n                                    maxLength='10'\n                                    value={this.state.deliveryDate}\n                                    onChange={(e) => { this.validateInputDate(e) }}\n                                    onBlur={(e) => {\n                                        if (e.target.value === '') {\n                                            this.setState({\n                                                deliveryDate: formatDate(new Date()),\n                                                error: {\n                                                    ...this.state.error,\n                                                    deliveryDate: false\n                                                }\n                                            })\n                                        }\n                                    }}\n                                />\n                                {\n                                    this.state.error.deliveryDate &&\n                                    <span className='error'>{this.state.error.dateError}</span>\n                                }\n                            </label>\n                            <label htmlFor='delivery-city'>\n                                <span className='input-title'>* City</span>\n                                <input\n                                    type='text'\n                                    id='delivery-city'\n                                    name='delivery-city'\n                                    placeholder='Eg. Indianapolis'\n                                    required\n                                    value={this.state.deliveryCity}\n                                    onChange={(e) => { this.validateCityInput(e) }}\n                                />\n                                {\n                                    this.state.error.deliveryCity &&\n                                    <span className='error'>{this.state.error.cityError}</span>\n                                }\n                            </label>\n                            <label htmlFor='delivery-state'>\n                                <span className='input-title'>* State</span>\n                                <input\n                                    type='text'\n                                    placeholder='Eg. IN'\n                                    maxLength='2'\n                                    id='delivery-state'\n                                    name='delivery-state'\n                                    required\n                                    value={this.state.deliveryState}\n                                    onChange={(e) => { this.validateStateInput(e) }}\n                                />\n                                {\n                                    this.state.error.deliveryState &&\n                                    <span className='error'>{this.state.error.stateError}</span>\n                                }\n                            </label>\n                            <label htmlFor='delivery-zipcode'>\n                                <span className='input-title'>* Zipcode</span>\n                                <input\n                                    type='text'\n                                    id='delivery-zipcode'\n                                    name='delivery-zipcode'\n                                    maxLength='10'\n                                    placeholder='Eg. 46225'\n                                    required\n                                    value={this.state.deliveryZipcode}\n                                    onChange={(e) => { this.validateZipcodeInput(e) }}\n                                />\n                                {\n                                    this.state.error.deliveryZipcode &&\n                                    <span className='error'>{this.state.error.zipcodeError}</span>\n                                }\n                            </label>\n                            <h4 className='fieldset-sub-title blue-text'>\n                                Additional Info\n                            </h4>\n                            <label htmlFor='miles'>\n                                <span className='input-title'>Miles</span>\n                                <input\n                                    type='number'\n                                    min='0'\n                                    id='miles'\n                                    name='miles'\n                                    value={this.state.miles}\n                                    onChange={(e) => {this.setState({miles: e.target.value})}}\n                                />\n                                {\n                                    // this.state.unitNumError &&\n                                    // <span className='error'>{this.state.error}</span>\n                                }\n                            </label>\n                            <label htmlFor='rate'>\n                                <span className='input-title'>Rate</span>\n                                <input\n                                    type='number'\n                                    min='0'\n                                    id='rate'\n                                    name='rate'\n                                    value={this.state.rate}\n                                    onChange={(e) => {this.setState({rate: e.target.value})}}\n                                />\n                                {\n                                    // this.state.unitNumError &&\n                                    // <span className='error'>{this.state.error}</span>\n                                }\n                            </label>\n                            <label htmlFor='broker'>\n                                <span className='input-title'>Broker</span>\n                                <input\n                                    type='text'\n                                    id='broker'\n                                    name='broker'\n                                    value={this.state.broker}\n                                    onChange={(e) => {this.setState({broker: e.target.value})}}\n                                />\n                            </label>\n                            {\n                                !(\n                                    error.pickupCity ||\n                                    error.deliveryCity ||\n                                    error.pickupDate ||\n                                    error.deliveryDate ||\n                                    error.pickupState ||\n                                    error.deliveryState ||\n                                    error.pickupZipcode ||\n                                    error.deliveryZipcode\n                                )\n                                    ?\n                                    <button\n                                        className='app-button'\n                                        type='submit'\n                                    >\n                                        Edit Load\n                                    </button>\n                                    :\n                                    <button\n                                        className='app-button'\n                                        type='submit'\n                                        disabled\n                                    >\n                                        Edit Load\n                                    </button>\n                            }\n\n                        </div>\n                    </fieldset>\n                </form>\n            </section>\n        );\n    }\n}\n\nexport default EditLoadPage;","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { Switch, Route, Redirect } from \"react-router-dom\";\nimport Header from \"../Header/Header\";\nimport HomePage from \"../../Routes/HomePage/HomePage\";\nimport AppContext from \"../../Contexts/AppContext\";\nimport CreateAccountPage from \"../../Routes/CreateAccountPage/CreateAccountPage\";\nimport LoginPage from \"../../Routes/LoginPage/LoginPage\";\nimport TokenService from \"../../Services/TokenService\";\nimport DashboardPage from \"../../Routes/DashboardPage/DashboardPage\";\nimport Logout from \"../Logout/Logout\";\nimport CarrierService from \"../../Services/CarrierServices\";\nimport DriversService from \"../../Services/DriversService\";\nimport EquipmentService from \"../../Services/EquipmentsService\";\nimport LoadsPage from \"../../Routes/LoadsPage/LoadsPage\";\nimport EquipmentsPage from \"../../Routes/EquipmentsPage/EquipmentsPage\";\nimport DriversPage from \"../../Routes/DriversPage/DriversPage\";\nimport EquipmentEditPage from \"../../Routes/EquipmentEditPaage/EquipmentEditPage\";\nimport AddLoadPage from \"../../Routes/AddLoadPage/AddLoadPage\";\nimport { objectIsEmpty } from '../../HelperFunctions/HelperFunctions';\nimport LoadByIdPage from \"../../Routes/LoadByIdPage/LoadByIdPage\";\nimport AddDriverPage from \"../../Routes/AddDriverPage/AddDriverPage\";\nimport AddEquipmentPage from \"../../Routes/AddEquipmentPage/AddEquipmentPage\";\nimport DriverEditPage from \"../../Routes/DriverEditPage/DriverEditPage\";\nimport EditLoadPage from \"../../Routes/EditLoadPage/EditLoadPage\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      basePath: \"/dispatch-office-client\",\n      loggedIn: false,\n      newUser: false,\n      shipments: [],\n      drivers: [],\n      idleDrivers: [],\n      idleEquipments: [],\n      equipments: [],\n      loggedInCarrier: {\n        full_name: \"\",\n        company_name: \"\",\n        mc_num: \"\"\n      }\n    };\n  }\n\n  // gets all the shipments\n  getShipments = async () => {\n    return CarrierService.getCarrierData()\n      .then(data => data)\n      .catch(err => console.log(err));\n  };\n\n  getDrivers = async () => {\n    return DriversService.getDriversData()\n      .then(data => data)\n      .catch(err => console.log(err))\n  }\n\n  // gets all idleDrivers for dashboard\n  getIdleDrivers = async () => {\n    return DriversService.getIdleDrivers()\n      .then(data => {\n        data.map((driver) => {\n          if (!objectIsEmpty(driver.equipment)) {\n            this.setState({\n              idleEquipments: [\n                ...this.state.idleEquipments,\n                driver.equipment\n              ]\n            })\n          }\n          return driver\n        })\n        return data\n      })\n      .catch(err => console.log(err));\n  };\n\n  getEquipments = async () => {\n    return EquipmentService.getEquipments()\n      .then(data => data)\n      .catch(err => console.log(err));\n  }\n\n  // only one function used in context now to be used in login page\n  getAllData = async () => {\n    if (TokenService.hasAuthToken()) {\n      await Promise.all([\n        this.getShipments(),\n        this.getDrivers(),\n        this.getEquipments(),\n        this.getIdleDrivers()\n      ])\n        .then(([\n          shipments,\n          drivers,\n          equipments,\n          idleDrivers\n        ]) => {\n          this.setState({\n            shipments,\n            drivers,\n            equipments,\n            idleDrivers\n          })\n        })\n        .catch((err) => console.log(err));\n    }\n  }\n\n  componentDidMount = () => {\n    this.setState({\n      loggedIn: TokenService.hasAuthToken()\n    });\n    this.getAllData();\n  };\n\n  setLoggedIn = loggedIn => {\n    this.setState({\n      loggedIn\n    });\n  };\n\n  setLoggedInCarrier = loggedInCarrier => {\n    this.setState({\n      loggedInCarrier\n    });\n  };\n\n  setShipments = shipments => {\n    this.setState({\n      shipments\n    });\n  };\n\n  setEquipments = equipments => {\n    this.setState({\n      equipments\n    })\n  }\n\n  setDrivers = drivers => {\n    this.setState({\n      drivers\n    })\n  }\n\n  setIdleDrivers = idleDrivers => {\n    const idleEquipments = [];\n    this.setState({\n      idleEquipments\n    })\n    idleDrivers.map(driver => {\n      if (!objectIsEmpty(driver.equipment)) {\n        idleEquipments.push(driver.equipment)\n        this.setState({\n          idleEquipments\n        })\n      }\n      return driver\n    })\n    this.setState({\n      idleDrivers\n    })\n  }\n\n  setNewUser = newUser => {\n    this.setState({\n      newUser\n    });\n  };\n\n  render() {\n    const value = {\n      basePath: this.state.basePath,\n      loggedIn: this.state.loggedIn,\n      newUser: this.state.newUser,\n      setLoggedIn: this.setLoggedIn,\n      setNewUser: this.setNewUser,\n      setShipments: this.setShipments,\n      setEquipments: this.setEquipments,\n      setIdleDrivers: this.setIdleDrivers,\n      setDrivers: this.setDrivers,\n      setLoggedInCarrier: this.setLoggedInCarrier,\n      loggedInCarrier: this.state.loggedInCarrier,\n      shipments: this.state.shipments,\n      idleDrivers: this.state.idleDrivers,\n      equipments: this.state.equipments,\n      drivers: this.state.drivers,\n      idleEquipments: this.state.idleEquipments,\n      getAllData: this.getAllData,\n      loadStatus: [\n        'un-assigned',\n        'dispatched',\n        'loading',\n        'in transit',\n        'unloading',\n        'completed'\n      ]\n    };\n\n    return (\n      <AppContext.Provider value={value}>\n        <div className=\"App\">\n          <Header />\n          {this.state.loggedIn && <Route path=\"/\" component={Logout} />}\n          <Switch>\n            {/* Begin the app with the /app endpoint */}\n\n            <Route exact path=\"/\">\n              <Redirect to={value.basePath} />\n            </Route>\n\n            <Route exact path={value.basePath} component={HomePage} />\n\n            <Route\n              exact\n              path={`${value.basePath}/create-account`}\n              component={CreateAccountPage}\n            />\n\n            <Route\n              exact\n              path={`${value.basePath}/login`}\n              component={LoginPage}\n            />\n\n            <Route\n              exact\n              path={`${value.basePath}/dashboard`}\n              component={DashboardPage}\n            />\n\n            <Route\n              exact\n              path={`${value.basePath}/loads`}\n              component={LoadsPage}\n            />\n\n            <Route\n              exact\n              path={`${value.basePath}/equipments`}\n              component={EquipmentsPage}\n            />\n\n            <Route\n              exact\n              path={`${value.basePath}/drivers`}\n              component={DriversPage}\n            />\n\n            <Route\n              exact\n              path={`${value.basePath}/equipment/edit/:id`}\n              component={(rprops) => {\n                return <EquipmentEditPage\n                  rprops={rprops}\n                  equipments={this.state.equipments}\n                  idleDrivers={this.state.idleDrivers}\n                  drivers={this.state.drivers} />\n              }}\n            />\n\n            <Route\n              exact\n              path={`${value.basePath}/load/new`}\n              component={AddLoadPage}\n            />\n\n            <Route\n              exact\n              path={`${value.basePath}/driver/new`}\n              component={(rprops) => {\n                return <AddDriverPage\n                  rprops={rprops}\n                  equipments={this.state.equipments} />\n              }}\n            />\n\n            <Route\n              exact\n              path={`${value.basePath}/equipment/new`}\n              component={(rprops) => {\n                return <AddEquipmentPage\n                  rprops={rprops}\n                  drivers={this.state.drivers} />\n              }}\n            />\n\n            <Route\n              exact\n              path={`${value.basePath}/driver/edit/:id`}\n              component={(rprops) => {\n                return <DriverEditPage\n                  rprops={rprops}\n                  equipments={this.state.equipments}\n                  idleDrivers={this.state.idleDrivers}\n                  drivers={this.state.drivers} />\n              }}\n            />\n\n            <Route\n              exact\n              path={`${value.basePath}/load/:id`}\n              component={(rprops) => {\n                return <LoadByIdPage\n                  rprops={rprops}\n                  shipments={this.state.shipments}\n                  idleDrivers={this.state.idleDrivers}\n                />\n              }}\n            />\n\n            <Route\n              exact\n              path={`${value.basePath}/load/edit/:id`}\n              component={(rprops) => {\n                return <EditLoadPage \n                  rprops={rprops}\n                  shipments={this.state.shipments}\n                  drivers={this.state.drivers}\n                  idleDrivers={this.state.idleDrivers}\n                />\n              }}\n            />\n\n          </Switch>\n        </div>\n      </AppContext.Provider>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>\n    , \n    document.getElementById('root'));\n"],"sourceRoot":""}