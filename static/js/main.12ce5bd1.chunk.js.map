{"version":3,"sources":["Contexts/AppContext.js","config.js","Components/DesktopMenu/DesktopMenu.js","Components/Backdrop/Backdrop.js","Components/MobileMenu/MobileMenu.js","Components/Header/Header.js","Components/HomePageSection/HomePageSection.js","Routes/HomePage/HomePage.js","Services/TokenService.js","Services/AuthApiService.js","Components/LoginForm/LoginForm.js","Routes/LoginPage/LoginPage.js","HelperFunctions/HelperFunctions.js","Components/Utils/Utils.js","Components/LoadListBox/LoadListBox.js","Services/DriversService.js","Components/DriverCard/DriverCard.js","Components/IdleDriversBox/IdleDriversBox.js","Routes/DashboardPage/DashboardPage.js","Services/CarrierServices.js","Components/Logout/Logout.js","Services/EquipmentsService.js","HelperFunctions/LoadsPageHelperFunctions.js","Routes/LoadsPage/LoadsPage.js","Components/EquipmentCard/EquipmentCard.js","Routes/EquipmentsPage/EquipmentsPage.js","Routes/DriversPage/DriversPage.js","Components/DriversDropDown/DriversDropDown.js","Routes/EquipmentEditPaage/EquipmentEditPage.js","HelperFunctions/InputFieldValidations.js","Services/ShipmentsService.js","Routes/AddLoadPage/AddLoadPage.js","Routes/LoadByIdPage/LoadByIdPage.js","Routes/AddDriverPage/AddDriverPage.js","Routes/AddEquipmentPage/AddEquipmentPage.js","Routes/DriverEditPage/DriverEditPage.js","Routes/EditLoadPage/EditLoadPage.js","Components/App/App.js","index.js"],"names":["React","createContext","basePath","loggedIn","newUser","setLoggedIn","setNewUser","setShipments","setEquipments","setIdleDrivers","setDrivers","getAllData","loggedInCarrier","shipments","setLoggedInCarrier","idleDrivers","idleEquipments","equipments","drivers","loadStatus","API_ENDPOINT","process","TOKEN_KEY","BASEPATH","DesktopMenu","config","aria-label","className","to","tabIndex","Component","Backdrop","MobileMenu","props","changeMenuOpenState","setState","menuOpen","state","closeMenuIfOpen","e","console","log","closeMenuWhenLargerScreen","window","innerWidth","componentDidMount","addEventListener","componentWillUnMount","removeEventListener","this","context","onClick","icon","faBars","faTimes","contextType","AppContext","Header","HomePageSection","HomePage","TokenService","saveAuthToken","token","localStorage","setItem","getAuthToken","getItem","clearAuthToken","removeItem","hasAuthToken","AuthApiService","postLogin","credentials","fetch","method","headers","body","JSON","stringify","then","res","ok","json","Error","error","message","catch","postCarrier","carrier","err","LoginForm","incorrectUsername","incorrectPassword","handleSubmitLoginForm","preventDefault","target","username","password","value","focus","authToken","loggedInUser","onLoginSuccess","onSubmit","htmlFor","type","id","name","required","defaultProps","LoginPage","a","history","push","handleGoBack","goBack","routeUserTo","route","objectIsEmpty","obj","Object","entries","length","constructor","arrayIsEmpty","arr","formatCurrency","amount","parseFloat","toFixed","toString","replace","formatDate","dbDate","date","Date","day","getDate","month","getMonth","year","getFullYear","renderEquipmentOptions","map","equipment","key","unit_num","getAvailableDrivers","filter","driver","removeEquipmentDriver","full_name","pay_rate","GoBackButton","join","faArrowLeft","EditButton","faEdit","DeleteButton","faTrashAlt","ViewLoadButton","faArrowRight","FilterButton","faFilter","UpdateViewButton","status","faBoxes","LoadListBox","renderShipments","shipment","pickup_warehouse","city","pickup_date","faTruck","delivery_warehouse","delivery_date","boxHeader","DriversService","getDriversData","response","driversData","getIdleDrivers","updateEquipment","equipment_id","Authorization","updateDriver","addDriver","DriverCard","handleDeleteDriver","driverToRemove","driverId","updateDriverInDB","shipmentId","idleDriver","IdleDriversBox","renderIdleDriversList","iDriver","DashboardPage","unAssignedShipments","includes","getShipmentWithStatus","shipmentsInProgress","getAllShipmentsInProgress","oldLoadStatus","CarrierService","getCarrierData","carrierData","getCarrierInfo","carrierInfo","Logout","getCarrierInfoInComponent","CarrierServices","handleLogout","EquipmentService","getEquipments","addNewEquipment","getShipmentsWithDriverId","parseInt","LoadsPage","handleOpeningFilterMenu","filterMenu","selectedDriver","onChange","i","selectedOption","Array","from","getElementsByTagName","getAttribute","data-id","data-name","renderAllDriverOptions","EquipmentCard","handleDeleteEquipment","EquipmentsService","editingMode","idleEquipment","hasOwnProperty","EquipmentsPage","handleAddEquipment","renderEquipmentList","equip","DriversPage","renderDrivers","DriversDropDown","handleChange","optionsValue","renderDriverOptions","defaultValue","EquipmentEditPage","giveEquipment","takeAwayEquipment","setDriverForEquipment","removeDriverFromEquipment","changeEquipmentForDriver","newDriverId","oldDriverId","oldDriver","handleEquipmentEdit","equipmentArray","undefined","inIdleQueue","removeExecuted","changeEquipemnt","changeEquipment","rprops","validateUnitNum","unitNum","trim","unitNumError","match","params","availableDrivers","currentDriver","unshift","idleDr","emptySpaces","word","notValidDate","test","isNotValidDriverName","isNotValidPay","pay","isNaN","ShipmentsSerivce","insertShipment","rate","miles","driver_id","broker","pickup_city","pickup_state","pickup_zipcode","delivery_city","delivery_state","delivery_zipcode","updateShipment","deleteShipment","AddLoadPage","validateInputDate","pickupDate","deliveryDate","validateCityInput","pickupCity","deliveryCity","validateStateInput","pickupState","deliveryState","validateZipcodeInput","zipcode","pickupZipcode","deliveryZipcode","updateIdleDriverQueue","handleAddLoad","toUpperCase","contextDriver","shipmentInDB","newShipment","hasError","dateError","cityError","stateError","zipcodeError","maxLength","onBlur","placeholder","min","disabled","LoadByIdPage","removeDriverAndEquipmentFromShipment","sendDriverToIdleDrivers","handleChangeLoadStatus","ShipmentsService","propShipment","completedShipment","handleAssignDriver","driverAssigned","avaialableDrivers","onDriverDropDownChange","handleShipmentDelete","shipmentToDelete","renderUpdateLoadStatusBox","driverPayout","AddDriverPage","validateDriverName","isNotValid","driverName","driverNameError","validatePayRate","driverPay","driverPayError","handleAddDriver","dbDriver","contextEquipment","availableEquipments","AddEquipmentPage","validateUnitNumField","equipmentNumError","equipmentNum","dbEquipment","DriverEditPage","driverToChange","makeDriverChanges","changes","handleEditDriver","changeDriver","newEquipmentId","oldEquipmentId","newEquipment","DriversSerivce","propsEquipment","EditLoadPage","stateCode","handleEditLoad","newShipmentFields","updateShipmentInDB","App","getShipments","data","getDrivers","Promise","all","company_name","mc_num","Provider","path","component","exact","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.12ce5bd1.chunk.js","sourcesContent":["import React from 'react';\n\nexport default React.createContext({\n    basePath: '',\n    loggedIn: () => {},\n    newUser: () => {},\n    setLoggedIn: () => {},\n    setNewUser: () => {},\n    setShipments: () => {},\n    setEquipments: () => {},\n    setIdleDrivers: () => {},\n    setDrivers: () => {},\n    getAllData: () => {},\n    loggedInCarrier: {},\n    shipments: [],\n    setLoggedInCarrier: () => {},\n    idleDrivers: [],\n    idleEquipments: [],\n    equipments: [],\n    drivers: [],\n    loadStatus: []\n});","// const path = 'http://localhost:8000/api';\nconst path = 'https://rocky-waters-07125.herokuapp.com/api';\n\nexport default {\n    API_ENDPOINT: process.env.API_ENDPOINT || path,\n    TOKEN_KEY: process.env.TOKEN_KEY || '9e7d73be-f7f1-11e9-8f0b-362b9e155667',\n    BASEPATH: '/dispatch-office-client',\n}","import React, { Component } from 'react';\nimport './DesktopMenu.css';\nimport { Link } from 'react-router-dom';\nimport config from '../../config';\n\nclass DesktopMenu extends Component {\n\n    render() {\n\n        const basePath = config.BASEPATH;\n\n        return (\n            <nav\n                aria-label=\"Main Navigation\"\n                className='DesktopMenu'>\n                <ul>\n                    <li>\n                        <Link to={basePath}>\n                            Dashboard\n                        </Link>\n                    </li>\n                    <li className=\"has-submenu\" tabIndex=\"0\">\n                        <span>\n                            Loads\n                        </span>\n                        <ul>\n                            <li>\n                                <Link to={`${basePath}/load/new`}>Add Load</Link>\n                            </li>\n                            <li tabIndex=\"0\">\n                                <Link to={`${basePath}/loads`}>View Loads</Link>\n                            </li>\n                        </ul>\n                    </li>\n                    <li className=\"has-submenu\" tabIndex=\"0\">\n                        <span>\n                            Equipments\n                        </span>\n                        <ul>\n                            <li tabIndex=\"0\">\n                                <Link to={`${basePath}/equipment/new`}>Add Equipment</Link>\n                            </li>\n                            <li tabIndex=\"0\">\n                                <Link to={`${basePath}/equipments`}>View Equipments</Link>\n                            </li>\n                        </ul>\n                    </li>\n                    <li className=\"has-submenu\" tabIndex=\"0\">\n                        <span>\n                            Drivers\n                        </span>\n                        <ul>\n                            <li tabIndex=\"0\">\n                                <Link to={`${basePath}/driver/new`}>Add Driver</Link>\n                            </li>\n                            <li tabIndex=\"0\">\n                                <Link to={`${basePath}/drivers`}>View Drivers</Link>\n                            </li>\n                        </ul>\n                    </li>\n                </ul>\n            </nav>\n        );\n    }\n}\n\n\nexport default DesktopMenu","import React, { Component } from 'react';\nimport './Backdrop.css';\n\nclass Backdrop extends Component {\n    \n    render() { \n        return (\n            <div className='Backdrop'>\n            </div>\n        );\n    }\n}\n \nexport default Backdrop;","import React, { Component } from 'react';\nimport './MobileMenu.css';\nimport AppContext from '../../Contexts/AppContext';\nimport { Link } from 'react-router-dom';\nimport Backdrop from '../Backdrop/Backdrop';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTimes, faBars } from '@fortawesome/free-solid-svg-icons';\n\nclass MobileMenu extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            menuOpen: false\n        }\n    }\n\n    static contextType = AppContext;\n\n    changeMenuOpenState = () => {\n        this.setState({\n            menuOpen: !this.state.menuOpen\n        })\n    }\n\n    closeMenuIfOpen = (e) => {\n        console.log(`backdrop clicked`);\n        if (this.state.menuOpen) {\n            this.setState({\n                menuOpen: false\n            })\n        }\n    }\n\n    // closes menu \n    // When it is open on mobile and resized to larger screen\n    // and the menu for larger screen pops up and this closes\n    closeMenuWhenLargerScreen = (e) => {\n        if (window.innerWidth > 1050) {\n            this.setState({\n                menuOpen: false\n            })\n        }\n    }\n\n    componentDidMount = () => {\n        window.addEventListener('resize', this.closeMenuWhenLargerScreen);\n    }\n\n    componentWillUnMount = () => {\n        window.removeEventListener('resize', this.closeMenuWhenLargerScreen);\n    }\n\n\n    render() {\n\n        const { basePath } = this.context;\n\n        return (\n            <nav className='MobileMenu'>\n                <button className='menu-button' onClick={this.changeMenuOpenState}>\n                    <FontAwesomeIcon icon={faBars} />\n                </button>\n                {\n                    this.state.menuOpen &&\n                    <>\n                        <Backdrop />\n                        <ul className='menu-list'>\n                            <button\n                                className='close-button'\n                                onClick={this.changeMenuOpenState}>\n                                <FontAwesomeIcon icon={faTimes} />\n                            </button>\n                            <li className='menu-item'>\n                                <Link\n                                    to={`${basePath}/dashboard`}\n                                    onClick={this.changeMenuOpenState}>\n                                    Dashboard\n                                </Link>\n                            </li>\n                            <li className='menu-item'>\n                                <hr />\n                                <Link \n                                    to={`${basePath}/load/new`}\n                                    onClick={this.changeMenuOpenState}>\n                                    Add Load\n                                </Link>\n                            </li>\n                            <li className='menu-item'>\n                                <Link \n                                    to={`${basePath}/loads`}\n                                    onClick={this.changeMenuOpenState}>\n                                    View Loads\n                                </Link>\n                            </li>\n\n                            <li className='menu-item'>\n                                <hr />\n                                <Link \n                                    to={`${basePath}/equipment/new`}\n                                    onClick={this.changeMenuOpenState}>\n                                    Add Equipments\n                                </Link>\n                            </li>\n                            <li className='menu-item'>\n                                <Link\n                                    to={`${basePath}/equipments`}\n                                    onClick={this.changeMenuOpenState}>\n                                    View Equipments\n                                </Link>\n                            </li>\n                            <li className='menu-item'>\n                                <hr />\n                                <Link \n                                    to={`${basePath}/driver/new`}\n                                    onClick={this.changeMenuOpenState}>\n                                    Add Driver\n                                </Link>\n                            </li>\n                            <li className='menu-item'>\n                                <Link \n                                    to={`${basePath}/drivers`}\n                                    onClick={this.changeMenuOpenState}>\n                                    View Drivers\n                                </Link>\n                            </li>\n                        </ul>\n                    </>\n                }\n            </nav>\n        );\n    }\n}\n\nexport default MobileMenu;","import React, { Component } from 'react';\nimport './Header.css';\nimport { Link } from 'react-router-dom';\nimport AppContext from '../../Contexts/AppContext';\nimport DesktopMenu from '../DesktopMenu/DesktopMenu';\nimport MobileMenu from '../MobileMenu/MobileMenu';\n\nclass Header extends Component {\n\n    static contextType = AppContext;\n\n    render() {\n\n        const {loggedIn} = this.context;\n\n        return (\n            <header className='Header blue-back white-text'>\n                <div className='width-wrapper'>\n                    <Link to='/'>\n                        <div className='logo'>\n                            <span>Dispatch</span>\n                            <span>Office</span>\n                        </div>\n                    </Link>\n                    {\n                        loggedIn &&\n                        <>\n                            <DesktopMenu />\n                            <MobileMenu />\n                        </>\n                    }\n                </div>\n            </header>\n        );\n    }\n}\n\nexport default Header;","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport AppContext from '../../Contexts/AppContext';\nimport './HomePageSection.css';\n\nclass HomePageSection extends Component {\n\n    static contextType = AppContext;\n\n    render() {\n\n        const { basePath } = this.context;\n\n        return (\n            <div className='HomePageSection width-wrapper'>\n                {/* Make descrtiption so that audience gets involved */}\n                <p>\n                    Welcome to <span className='span-title red-text'>Dispatch Office</span>. \n                    This transportation management system will have everything right \n                    at your fingertips. The one stop app that \n                    assists in driver assignment, while also keeping track \n                    of all shipments and equipment. \n                </p>\n                <p className='user-info'>\n                    Dummy User Info <br />\n                    Username: <span>dundermifflin</span>\n                </p>\n                <p className='user-info'>\n                    Password: <span>password</span>\n                </p>\n                <Link to={`${basePath}/login`} className='app-link'>\n                    Login\n                </Link>\n            </div>\n        );\n    }\n}\n\nexport default HomePageSection;","import React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport './HomePage.css';\nimport AppContext from '../../Contexts/AppContext';\nimport HomePageSection from '../../Components/HomePageSection/HomePageSection';\n\nclass HomePage extends Component {\n\n    static contextType = AppContext;\n\n    render() {\n        const { basePath, loggedIn, newUser } = this.context;\n        return (\n            !loggedIn\n                ?   <section className='HomePage blue-text'>\n                        <HomePageSection />\n                    </section>\n                :   !newUser\n                    ? <Redirect to={`${basePath}/dashboard`} />\n                    : <Redirect to={`${basePath}/newuser`} />\n        );\n    }\n}\n\nexport default HomePage;","import config from '../config';\n\nconst TokenService = {\n  saveAuthToken(token) {\n    window.localStorage.setItem(config.TOKEN_KEY, token)\n  },\n  getAuthToken() {\n    return window.localStorage.getItem(config.TOKEN_KEY)\n  },\n  clearAuthToken() {\n    window.localStorage.removeItem(config.TOKEN_KEY)\n  },\n  hasAuthToken() {\n    return !!TokenService.getAuthToken()\n  },\n}\n\nexport default TokenService","import config from '../config';\n\nconst AuthApiService = {\n    // login authorization\n    postLogin(credentials){\n        return fetch(`${config.API_ENDPOINT}/auth/login`, {\n            method: \"POST\",\n            headers: {\n                \"content-type\": \"application/json\"\n            },\n            body: JSON.stringify(credentials)\n        })\n        .then(res => {\n            if(!res.ok) {\n                return res.json().then(e => {\n                    throw new Error(e.error.message)\n                })\n            }\n            \n            return res.json();\n        })\n        .then(res => res)\n        .catch(error => error)\n    },\n\n    // creating a user\n    postCarrier(carrier){\n        return fetch(`${config.API_ENDPOINT}/user`, {\n            method: \"POST\",\n            headers: {\n                \"content-type\": \"application/json\"\n            },\n            body: JSON.stringify(carrier)\n        })\n        .then(res => {\n            if(!res.ok){\n                return res.json().then(e => {\n                    throw new Error(e.error.message)\n                })\n            }\n\n            return res.json();\n        })\n        .then(res => res)\n        .catch(err => err);\n    }\n}\n\nexport default AuthApiService;","import React, { Component } from 'react';\nimport './LoginForm.css';\nimport TokenService from '../../Services/TokenService';\nimport AuthApiService from '../../Services/AuthApiService';\nimport AppContext from '../../Contexts/AppContext';\n\nclass LoginForm extends Component {\n\n    state = {\n        error: null,\n        incorrectUsername: false,\n        incorrectPassword: false,\n    }\n\n    static contextType = AppContext;\n\n    static defaultProps = {\n        onLoginSuccess: () => {},\n    }\n\n    handleSubmitLoginForm = (e) => {\n        e.preventDefault();\n\n        this.setState({\n            error: null,\n            incorrectUsername: false,\n            incorrectPassword: false,\n        })\n\n        const { username, password } = e.target;\n\n        AuthApiService.postLogin({\n            username: username.value,\n            password: password.value\n        })\n            .then((res) => {\n                if(res.message === 'Incorrect Username'){\n                    this.setState({\n                        incorrectUsername: true,\n                        error: res.message\n                    })\n                    username.value = '';\n                    password.value = '';\n                    username.focus();\n                }\n                if(res.message === 'Incorrect Password'){\n                    this.setState({\n                        incorrectPassword: true,\n                        error: res.message\n                    })\n                    password.value = '';\n                }\n                \n                if(!this.state.incorrectPassword && !this.state.incorrectUsername){\n                    TokenService.saveAuthToken(res.authToken);\n                    this.context.setLoggedInCarrier(res.loggedInUser);\n                    this.props.onLoginSuccess();\n                    username.value = '';\n                    password.value = '';\n                }\n            })\n            .catch((res) => {\n                this.setState({\n                    error: res.error\n                })\n            })\n    }\n\n    render() {\n\n\n        const { incorrectPassword, incorrectUsername, error } = this.state;\n\n\n        return (\n\n            <form className='LoginForm width-wrapper' onSubmit={(e) => { this.handleSubmitLoginForm(e) }}>\n                <fieldset>\n                    <legend className='blue-back white-text'>\n                        Login\n                        </legend>\n                    <div className='flex'>\n                        <label htmlFor='username'>\n                            <span className='input-title'>* Username:</span>\n                            <input\n                                type='text'\n                                id='username'\n                                name='username'\n                                required\n                            />\n                            {\n                                incorrectUsername &&\n                                <span className='error'>{error}</span>\n                            }\n                        </label>\n                        \n                        <label htmlFor='password'>\n                            <span className='input-title'>* Password:</span>\n                            <input\n                                type='password'\n                                id='password'\n                                name='password'\n                                required\n                            />\n                            {\n                                incorrectPassword &&\n                                <span className='error'>{error}</span>\n                            }\n                        </label>\n                        <button\n                            className='app-button'\n                            type='submit'\n                        >\n                            Login\n                        </button>\n                    </div>\n                </fieldset>\n            </form>\n        );\n    }\n}\n\nexport default LoginForm;","import React, { Component } from \"react\";\nimport \"./LoginPage.css\";\nimport AppContext from \"../../Contexts/AppContext\";\nimport LoginForm from \"../../Components/LoginForm/LoginForm\";\nimport { Redirect } from \"react-router-dom\";\n\nclass LoginPage extends Component {\n  static contextType = AppContext;\n\n  // using async await so app proceeds only once complete data for carrier is received\n  onLoginSuccess = async () => {\n    this.props.history.push(\"/\");\n    this.context.setLoggedIn(true);\n    this.context.getAllData();\n  };\n\n  render() {\n    const { basePath, loggedIn, newUser } = this.context;\n\n    return !loggedIn ? (\n      <section className=\"LoginPage\">\n        <LoginForm\n          onLoginSuccess={() => {\n            this.onLoginSuccess();\n          }}\n        />\n      </section>\n    ) : !newUser ? (\n      <Redirect to={`${basePath}/dashboard`} />\n    ) : (\n      <Redirect to={`${basePath}/newuser`} />\n    );\n  }\n}\n\nexport default LoginPage;\n","import React from 'react';\n\n// takes user back to the previous page in history\nexport function handleGoBack(history) {\n    return history.goBack();\n}\n\nexport function routeUserTo(history, route) {\n    return history.push(route);\n}\n\n// Returns true if the object is empty\nexport function objectIsEmpty(obj) {\n    return (Object.entries(obj).length === 0 && obj.constructor === Object);\n}\n\n// Return true is value passed in not undefined\nexport function isNotUndefined(value){\n    return value !== undefined;\n}\n\n// Returns true if array is empty\nexport function arrayIsEmpty(arr) {\n    return (arr.length === 0);\n}\n\nexport function formatCurrency(amount) {\n    amount = parseFloat(amount).toFixed(2);\n    return `$${amount.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}`;\n}\n\n// Returns date in a formatted manner\nexport function formatDate(dbDate) {\n    const date = new Date(dbDate);\n    const day = date.getDate();\n    const month = date.getMonth();\n    const year = date.getFullYear();\n    return `${month + 1}/${day}/${year}`;\n};\n\nexport function sortShipments(shipments, property) {\n    return shipments.sort((a, b) => (a[property] < b[property] ? 1 : -1));\n};\n\nexport function renderLoadStatusOptions(statusArray) {\n    return statusArray.map((status, i) => {\n        return (\n            <option\n                key={i}\n                value={status}\n            >\n                {status}\n            </option>\n        )\n    })\n}\n\nexport function renderEquipmentOptions(equipments) {\n    return equipments.map((equipment) => {\n        return (\n            <option\n                key={equipment.id}\n                value={equipment.id}\n            >\n                {equipment.unit_num}\n            </option>\n        )\n    })\n}\n\nexport function renderDriverOptions(drivers) {\n    return drivers.map((driver) => {\n        return (\n            <option\n                key={driver.id}\n                value={driver.id}\n            >\n                {driver.full_name}\n            </option>\n        )\n    })\n}\n\n// to populate the drivers drop down list\n// with only those drivers that are idle and \n// have an equipment avialable to be assigned\nexport function getAvailableDrivers(idleDrivers) {\n    const availableDrivers = idleDrivers.filter((driver) => !(Object.entries(driver.equipment).length === 0 && driver.equipment.constructor === Object));\n    return availableDrivers;\n}\n\nexport function removeEquipmentDriver(equipment){\n    equipment.driver = {\n        full_name: '',\n        pay_rate: '',\n    }\n    return equipment;\n}\n\nexport function pickupAfterDelivery(pickup, delivery){\n    const pickupYear = new Date(pickup).getFullYear();\n\n    console.log(pickupYear);\n    \n    return false;\n}\n\nexport function getUnAssignedShipments(shipments){\n    if(!arrayIsEmpty(shipments)){\n        return shipments.filter(shipment => shipment.status === 'un-assigned')\n    }\n    return [];\n}\n\n// This function can take in either one string \n// which will be either one status or take in an\n// array of status and return shipments that have that status\nexport function getShipmentWithStatus(shipments, status){\n    if(typeof status === 'string'){\n        status = [status];\n    }\n    if(!arrayIsEmpty(shipments)){\n        return shipments.filter(shipment => status.includes(shipment.status));\n    }\n}\n\n// return all shipments except un-assigned or completed\n// because those are the only two shipments that are not in progress\n// as un-assigned has no driver and completed is already over\nexport function getAllShipmentsInProgress(shipments){\n    if(!arrayIsEmpty(shipments)){\n        return shipments.filter(shipment => !['un-assigned', 'completed'].includes(shipment.status))\n    }\n    return shipments;\n}","import React from 'react';\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\nimport {\n    faEdit,\n    faTrashAlt,\n    faArrowLeft,\n    faFilter,\n    faArrowRight,\n    faBoxes,\n} from '@fortawesome/free-solid-svg-icons'\nimport './Utils.css';\nimport {Link} from 'react-router-dom';\n\n\nexport function GoBackButton({ className, ...props }) {\n    return (\n        <button type='button' className={['GoBack icon-button', className].join(' ')} {...props}>\n            <FontAwesomeIcon icon={faArrowLeft} className='back-icon' />\n            <span>Back</span>\n        </button>\n    )\n}\n\nexport function EditButton({className, to, ...props}){\n    return (\n        <Link type='button' className={['EditButton icon-button', className].join(' ')} {...props} to={to}>\n            <FontAwesomeIcon icon={faEdit} className='edit-icon' />\n            <span>Edit</span>\n        </Link>\n    )\n}\n\nexport function DeleteButton({className, to, ...props}){\n    return (\n        <button className={['DeleteButton icon-button', className].join(' ')} {...props} to={to}>\n            <FontAwesomeIcon icon={faTrashAlt} className='delete-icon' />\n            <span>Delete</span>\n        </button>\n    )\n}\n\nexport function ViewLoadButton({className, to , ...props}){\n    return (\n        <Link type='button' className={['ViewLoadButton icon-button', className].join(' ')} {...props} to={to}>\n            <span>View Load</span>\n            <FontAwesomeIcon icon={faArrowRight} className='delete-icon' />\n        </Link>\n    )\n}\n\nexport function FilterButton({className, ...props}){\n    return (\n        <button className={['FilterButton ', className].join(' ')} {...props}>\n            <FontAwesomeIcon icon={faFilter} className='filter-icon' />\n            <span>Filter</span>\n        </button>\n    )\n}\n\nexport function UpdateViewButton({className, status, ...props}){\n    return (\n        <Link className={['UpdateViewButton ', className].join(' ')} {...props}>\n            <FontAwesomeIcon icon={faBoxes} className='boxes-icon' />\n            <span>{status}</span>\n        </Link>\n    )\n}","import React, { Component } from \"react\";\nimport \"./LoadListBox.css\";\nimport AppContext from \"../../Contexts/AppContext\";\nimport {\n  formatDate,\n  arrayIsEmpty\n} from '../../HelperFunctions/HelperFunctions'\nimport config from \"../../config\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faTruck } from '@fortawesome/free-solid-svg-icons'\nimport { UpdateViewButton, EditButton } from \"../Utils/Utils\";\n\nclass LoadListBox extends Component {\n\n  static contextType = AppContext;\n\n  static defaultProps = {\n    loadStatus: [],\n    boxHeader: 'Loads',\n    shipments: [],\n  };\n\n  // return the list of shipments\n  renderShipments = (shipments) => {\n\n    if (arrayIsEmpty(shipments)) {\n      return (\n        <li className='no-shipments'>\n          <div>\n            No Shipments Found\n          </div>\n        </li>\n      )\n    }\n\n    return shipments.map(shipment => {\n      return (\n        <li className=\"load\" key={shipment.id}>\n          <div className=\"pick-up\">\n            <h6>Pick-up</h6>\n            <br />\n            <span className=\"red-bold\">\n              {shipment.pickup_warehouse.city},{\" \"}\n              {shipment.pickup_warehouse.state}\n              <br />\n              Date: {formatDate(shipment.pickup_date)}\n            </span>\n          </div>\n          <div className=\"status-line-wrapper\">\n            <div className=\"rate-broker\">\n              <div className=\"driver\">\n                <h6>Driver</h6>\n                <br />\n                {shipment.driver.full_name ? shipment.driver.full_name : 'No Driver Assigned'}\n              </div>\n            </div>\n            <div className=\"status-line\">\n              <FontAwesomeIcon icon={faTruck} className={`truck ${shipment.status}`}/>\n              <div className={`circle green ${shipment.status}`}></div>\n              <div className={`line increase green ${shipment.status}`}></div>\n              <div className=\"line red\"></div>\n              <div className=\"circle red\"></div>\n            </div>\n            <div className=\"rate-broker\">\n              <div className=\"status\">\n                <h6>Equipment #</h6>\n                <br />\n                <span className=\"\">{shipment.equipment.unit_num ? shipment.equipment.unit_num : `No Equipment Assigned`}</span>\n              </div>\n            </div>\n          </div>\n          <div className=\"delivery\">\n            <h6>Delivery</h6>\n            <br />\n            <span className=\"red-bold\">\n              {shipment.delivery_warehouse.city},{\" \"}\n              {shipment.delivery_warehouse.state} <br />\n              Date: {formatDate(shipment.delivery_date)}\n            </span>\n          </div>\n          <div className=\"load-buttons\">\n            <UpdateViewButton to={`${config.BASEPATH}/load/${shipment.id}`}\n              className='responsive' \n              status={shipment.status === 'completed' ? 'View Load' : 'Update Load'}\n            />\n            <EditButton to={`${config.BASEPATH}/load/edit/${shipment.id}`}  className='responsive' />\n          </div>\n        </li>\n      );\n    });\n  }\n\n  render() {\n\n    const { shipments } = this.props;\n\n    return (\n      <div className=\"LoadListBox blue-text\">\n        <h3 className=\"blue-back white-text\">{this.props.boxHeader}</h3>\n        <ul className=\"un-assigned-loads\">\n          {this.renderShipments(shipments)}\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default LoadListBox;\n","import TokenService from './TokenService';\nimport config from '../config';\n\nconst DriversService = {\n    getDriversData() {\n        return fetch(`${config.API_ENDPOINT}/drivers`, {\n            method: 'GET',\n            headers: {\n                \"content-type\": \"application/json\",\n                \"Authorization\": `bearer ${TokenService.getAuthToken()}`\n            }\n        })\n            .then(response => response.json())\n            .then(driversData => driversData)\n            .catch((error) => {\n                console.log(error);\n            })\n    },\n\n    getIdleDrivers() {\n        return fetch(`${config.API_ENDPOINT}/drivers/idle`, {\n            method: 'GET',\n            headers: {\n                \"content-type\": \"application/json\",\n                \"Authorization\": `bearer ${TokenService.getAuthToken()}`\n            }\n        })\n            .then(response => response.json())\n            .then(idleDrivers => idleDrivers)\n            .catch((error) => {\n                console.log(error);\n            })\n    },\n\n    updateEquipment(id, equipment_id) {\n        return fetch(`${config.API_ENDPOINT}/drivers/${id}`, {\n            method: \"PATCH\",\n            headers: {\n                \"content-type\": \"application/json\",\n                Authorization: `bearer ${TokenService.getAuthToken()}`\n            },\n            body: JSON.stringify({\n                equipment_id\n            })\n        })\n            .then(response => response.json())\n            .then(driver => driver)\n            .catch((error) => {\n                console.log(error);\n            })\n    },\n\n    updateDriver(driver){\n        return fetch(`${config.API_ENDPOINT}/drivers/${driver.id}`, {\n            method: \"PATCH\",\n            headers: {\n                \"content-type\": \"application/json\",\n                Authorization: `bearer ${TokenService.getAuthToken()}`\n            },\n            body: JSON.stringify({\n                full_name: driver.full_name,\n                pay_rate: driver.pay_rate,\n                equipment_id: driver.equipment_id,\n                status: driver.status\n            })\n        })\n            .then(response => response.json())\n            .then(driver => driver)\n            .catch((error) => {\n                console.log(error);\n            })\n    },\n\n    addDriver(driver){\n        return fetch(`${config.API_ENDPOINT}/drivers`, {\n            method: \"POST\",\n            headers: {\n                \"content-type\": \"application/json\",\n                Authorization: `bearer ${TokenService.getAuthToken()}`\n            },\n            body: JSON.stringify({\n                full_name: driver.full_name,\n                pay_rate: driver.pay_rate,\n                equipment_id: driver.equipment_id,\n            })\n        })\n            .then(response => response.json())\n            .then(driver => driver)\n            .catch((error) => {\n                console.log(error);\n            })\n    }\n}\n\nexport default DriversService;","import React, {Component} from 'react';\nimport './DriverCard.css';\nimport config from '../../config';\nimport AppContext from '../../Contexts/AppContext';\nimport { arrayIsEmpty, objectIsEmpty, removeEquipmentDriver } from '../../HelperFunctions/HelperFunctions';\nimport DriversService from '../../Services/DriversService';\nimport { DeleteButton, EditButton, ViewLoadButton } from '../Utils/Utils';\n\n\nclass DriverCard extends Component{\n    \n    static defaultProps = {\n        driver: {}\n    }\n\n    static contextType = AppContext\n\n    handleDeleteDriver = (driverToRemove) => {\n\n        let {drivers, idleDrivers, equipments} = this.context\n        const driverId = driverToRemove.id\n\n        // if driver had equipment remove driver from equipment\n        if(!objectIsEmpty(driverToRemove.equipment)){\n            equipments = equipments.map((equipment) => {\n                if(equipment.driver.id === driverId){\n                    removeEquipmentDriver(equipment)\n                }\n                return equipment;\n            })\n        }\n\n        // change driver status to inactive in all drivers array\n        drivers = drivers.map((driver)=>{\n\n            if(driver.id === driverId){\n                driver.status = 'inactive'\n            }\n            return driver\n        })\n\n        const updateDriverInDB = {\n            id: driverToRemove.id,\n            full_name: driverToRemove.full_name,\n            pay_rate: driverToRemove.pay_rate,\n            equipment_id: null,\n            status: 'inactive'\n        }\n        DriversService.updateDriver(updateDriverInDB);\n\n        // remove driver for idle driver array\n        idleDrivers = idleDrivers.filter((driver) => driver.id !== driverId)\n\n        this.context.setDrivers(drivers);\n        this.context.setIdleDrivers(idleDrivers);\n        this.context.setEquipments(equipments);\n    }\n\n    render(){\n\n        const {driver} = this.props;\n        const {idleDrivers, shipments} = this.context;\n        let shipmentId = -1;\n        const busyDriver = arrayIsEmpty(idleDrivers.filter(idleDriver => idleDriver.id === driver.id));\n        if(busyDriver){\n            shipmentId = shipments.filter((shipment) => (shipment.driver.id === driver.id && shipment.status !== 'completed'))[0].id;\n        }\n\n        return(\n            <div className='DriverCard grey-back blue-text'>\n                <div className='flex-row'>\n                    <div className='card-div'>\n                        <h6>Driver</h6>\n                        <p>{driver.full_name}</p>\n                    </div>\n                    <div className='card-div'>\n                        <h6>Pay Rate</h6>\n                        <p>${driver.pay_rate}</p>\n                    </div>\n                    <div className='card-div'>\n                        <h6 className='small-header'>Equipment #</h6>\n                        <p>{driver.equipment.unit_num ? driver.equipment.unit_num : 'No Equipment'}</p>\n                    </div>\n                </div>\n                {\n                    shipmentId === -1 \n                    ?\n                    <div className='driver-buttons flex-row'>\n                        <EditButton to={`${config.BASEPATH}/driver/edit/${driver.id}`} className='responsive'/>\n                        <DeleteButton onClick={() => {this.handleDeleteDriver(driver)}} className='responsive'/>\n                    </div>\n                    :\n                    <div className='driver-buttons flex-row'>\n                        <span>\n                            Driver Busy\n                        </span>\n                        <ViewLoadButton to={`${config.BASEPATH}/load/${shipmentId}`} \n                            className='responsive'\n                        />\n                    </div>\n                }\n                \n            </div>\n        )\n    }\n}\n\nexport default DriverCard;","import React, { Component } from 'react';\nimport './IdleDriversBox.css';\nimport AppContext from '../../Contexts/AppContext';\nimport DriverCard from '../DriverCard/DriverCard';\nimport { arrayIsEmpty } from '../../HelperFunctions/HelperFunctions';\n\nclass IdleDriversBox extends Component {\n    \n    static contextType = AppContext;\n\n    renderIdleDriversList = () => {\n        let {idleDrivers} = this.context\n        idleDrivers = idleDrivers.filter(idleDriver => idleDriver.status === 'active');\n        if(!arrayIsEmpty(idleDrivers)){\n            return idleDrivers.map((iDriver) => {\n                return <li key={iDriver.id}><DriverCard driver={iDriver} /></li>\n            })\n        }else{\n            return (\n                <li className='no-idle-drivers'>\n                    No drivers idle at this time\n                </li>\n            )\n        }\n\n    }\n\n    render() { \n        return (\n            <div className='IdleDriversBox'>\n                <h3 className='blue-back white-text'>Idle Drivers</h3>\n                <ul>\n                    {this.renderIdleDriversList()}\n                </ul>\n            </div>\n        );\n    }\n}\n \nexport default IdleDriversBox;","import React, { Component } from 'react';\nimport './DashboardPage.css';\nimport LoadListBox from '../../Components/LoadListBox/LoadListBox';\nimport IdleDriversBox from '../../Components/IdleDriversBox/IdleDriversBox';\nimport AppContext from '../../Contexts/AppContext';\nimport { getShipmentWithStatus, getAllShipmentsInProgress } from '../../HelperFunctions/HelperFunctions';\n\nclass DashboardPage extends Component {\n\n    static contextType = AppContext\n\n    render() { \n\n        const {shipments} = this.context;\n        const unAssignedShipments = getShipmentWithStatus(shipments, 'un-assigned');\n        const shipmentsInProgress = getAllShipmentsInProgress(shipments);\n\n        return (  \n            <section className='DashboardPage width-wrapper'>\n                <LoadListBox \n                    oldLoadStatus='un-assigned' \n                    shipments={unAssignedShipments}\n                    boxHeader='Un Assigned Loads'\n                />\n                <LoadListBox \n                    oldLoadStatus='dispatched' \n                    shipments={shipmentsInProgress}\n                    boxHeader='Loads in progress'\n                />\n                <IdleDriversBox />\n\n            </section>\n        );\n    }\n}\n \nexport default DashboardPage;","import TokenService from './TokenService';\nimport config from '../config';\n\nconst CarrierService = {\n    getCarrierData(){\n        return fetch(`${config.API_ENDPOINT}/carrier`, {\n            method: 'GET',\n            headers: {\n                \"content-type\": \"application/json\",\n                \"Authorization\": `bearer ${TokenService.getAuthToken()}`\n            }\n        })\n        .then(res => res.json())\n        .then(carrierData => {\n            return carrierData;\n        })\n        .catch(err => {\n            console.log(err);\n        })\n    },\n    getCarrierInfo(){\n        return fetch(`${config.API_ENDPOINT}/carrier-info`, {\n            method: 'GET',\n            headers: {\n                \"content-type\": \"application/json\",\n                \"Authorization\" : `bearer ${TokenService.getAuthToken()}`\n            }\n        })\n        .then(res => res.json())\n        .then(carrierInfo =>  {\n            return carrierInfo;\n        })\n        .catch(err => {\n            console.log(err);\n        })\n    }\n}\n\nexport default CarrierService;","import React, {Component} from 'react';\nimport AppContext from '../../Contexts/AppContext';\nimport './Logout.css';\nimport TokenService from '../../Services/TokenService';\nimport CarrierServices from '../../Services/CarrierServices';\n\nclass Logout extends Component {\n\n    static contextType = AppContext;\n\n    getCarrierInfoInComponent = async () => {\n        const carrier = await CarrierServices.getCarrierInfo()\n            .then(res => {\n                this.context.setLoggedInCarrier(res);\n                return res;\n            })\n            .catch(error => error);\n        this.setState({\n            carrier: carrier[0]\n        })\n    }\n\n    constructor(props){\n        super(props);\n        this.state = {\n            carrier: {}\n        }\n        this.getCarrierInfoInComponent()\n    }\n\n    state = {\n        carrier: {}\n    }\n\n    handleLogout = () => {\n        this.context.setLoggedIn(false);\n        TokenService.clearAuthToken();\n        this.props.history.push('/');\n    }\n\n    \n\n    render(){\n        return (\n            <div className='Logout width-wrapper'>\n                Welcome, <span className='carrier-name red-text'>\n                    {this.state.carrier.full_name}\n                </span>, <button className='app-link' onClick={() => {this.handleLogout()}}>Logout</button>\n            </div>\n        )\n    }\n}\n\nexport default Logout;","import TokenService from \"./TokenService\";\nimport config from \"../config\";\n\nconst EquipmentService = {\n  getEquipments() {\n    return fetch(`${config.API_ENDPOINT}/equips`, {\n      method: \"GET\",\n      headers: {\n        \"content-type\": \"application/json\",\n        Authorization: `bearer ${TokenService.getAuthToken()}`\n      }\n    })\n      .then(response => response.json())\n      .then(equipments => equipments)\n      .catch(error => {\n        console.log(error);\n      });\n  },\n\n  addNewEquipment(unit_num){\n    return fetch(`${config.API_ENDPOINT}/equips`, {\n      method: \"POST\",\n      headers: {\n        \"content-type\": \"application/json\",\n        Authorization: `bearer ${TokenService.getAuthToken()}`\n      },\n      body: JSON.stringify({\n        unit_num,\n      })\n    })\n      .then(response => response.json())\n      .then(equipments => equipments)\n      .catch(error => {\n        console.log(error);\n      });\n  },\n\n  updateEquipment(unit_num, status, id){\n    return fetch(`${config.API_ENDPOINT}/equips/${id}`, {\n      method: \"PATCH\",\n      headers: {\n        \"content-type\": \"application/json\",\n        Authorization: `bearer ${TokenService.getAuthToken()}`\n      },\n      body: JSON.stringify({\n        unit_num,\n        status,\n      })\n    })\n      .then(response => response.json())\n      .then(equipments => equipments)\n      .catch(error => {\n        console.log(error);\n      });\n  }\n};\n\nexport default EquipmentService;\n","import React from 'react';\nimport { arrayIsEmpty } from './HelperFunctions';\n\nexport function renderAllDriverOptions(drivers){\n    if(!arrayIsEmpty(drivers)){\n        return drivers.map((driver, i) => (\n            <option\n                key={driver.id}\n                value={i}\n                data-id={driver.id}\n                data-name={driver.full_name}\n            >\n                {driver.full_name}\n                {\n                    driver.status === 'inactive' && ` (Inactive Driver)`\n                }\n            </option>\n        ))\n    }\n    return drivers;\n}\n\nexport function getShipmentsWithDriverId(shipments, driverId){\n    // making sure we are mathcing an integer\n    driverId = parseInt(driverId, 10);\n    if(!arrayIsEmpty(shipments) && driverId !== -1){\n        return shipments.filter((shipment) => shipment.driver.id === driverId)\n    }\n    return shipments\n}","import React, {Component} from 'react';\nimport './LoadsPage.css';\nimport LoadListBox from '../../Components/LoadListBox/LoadListBox';\nimport AppContext from '../../Contexts/AppContext';\nimport {\n    renderAllDriverOptions, getShipmentsWithDriverId,\n} from '../../HelperFunctions/LoadsPageHelperFunctions';\nimport Backdrop from '../../Components/Backdrop/Backdrop';\nimport { FilterButton } from '../../Components/Utils/Utils';\n\nclass LoadsPage extends Component {\n\n    static defaultProps = {\n        shipments: [],\n        boxHeader: 'Loads'\n    }\n\n    constructor(props){\n        super(props);\n\n        this.state = {\n            shipments: props.shipments,\n            boxHeader: props.boxHeader,\n            filterMenu: false,\n            selectedDriver: -1\n        }\n    }\n\n    static contextType = AppContext\n\n    handleOpeningFilterMenu = () => {\n        this.setState({\n            filterMenu: !this.state.filterMenu\n        })\n    }\n\n    render(){\n\n        const {shipments} = this.props;\n        const {drivers} = this.context;\n        \n        return (\n            <section className='LoadsPage width-wrapper'>\n                <div className='filters-div'>\n                    <FilterButton onClick={() => {this.handleOpeningFilterMenu()}} />\n                    {\n                        this.state.filterMenu &&\n                        <>\n                            <Backdrop />\n                            <div className='filter-menu'>\n                                <div className='filter'>\n                                    <span className='field-label'>Driver</span>\n                                    <select \n                                        className='select-css'\n                                        value={this.state.selectedDriver}\n                                        onChange={(e) => {\n                                            const i = parseInt(e.target.value, 10)+1;\n                                            const selectedOption = Array.from(e.target.getElementsByTagName('option'))[i];\n                                            const driverId = parseInt(selectedOption.getAttribute('data-id'),10);\n                                            this.setState({\n                                                shipments: getShipmentsWithDriverId(shipments, driverId),\n                                                filterMenu: false,\n                                                boxHeader: `${selectedOption.getAttribute('data-name')} Loads`,\n                                                selectedDriver: e.target.value\n                                            })\n                                        }}\n                                    >\n                                        <option value='-1' data-id='-1' data-name='All'>All Drivers</option>\n                                        {renderAllDriverOptions(drivers)}\n                                    </select>\n                                </div>\n                            </div>\n                        </>\n                    }\n                </div>\n                <LoadListBox \n                    shipments={this.state.shipments} \n                    boxHeader={this.state.boxHeader}\n                />\n            </section>\n        )\n    }\n}\n\nexport default LoadsPage;","import React, { Component } from 'react';\nimport './EquipmentCard.css';\nimport config from '../../config';\nimport AppContext from '../../Contexts/AppContext';\nimport {\n    arrayIsEmpty, objectIsEmpty\n} from '../../HelperFunctions/HelperFunctions';\nimport DriversService from '../../Services/DriversService';\nimport EquipmentsService from '../../Services/EquipmentsService';\nimport {\n    EditButton, DeleteButton, ViewLoadButton\n} from '../../Components/Utils/Utils';\n \nclass EquipmentCard extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            editingMode: false\n        }\n    }\n\n    static contextType = AppContext\n\n    handleDeleteEquipment = (id) => {\n\n        let { equipments } = this.context\n        const { drivers, idleDrivers } = this.context\n        equipments = equipments.map((equipment) => {\n            if(equipment.id === id){\n                EquipmentsService.updateEquipment(equipment.unit_num, 'inactive', equipment.id)\n                equipment.status = 'inactive'\n            }\n            return equipment\n        })\n\n        drivers.map(driver => {\n            if (driver.equipment.id === id) {\n                DriversService.updateEquipment(driver.id, null)\n                driver.equipment = {}\n            }\n            return driver\n        })\n        idleDrivers.map(driver => {\n            if (driver.equipment.id === id) {\n                driver.equipment = {}\n            }\n            return driver\n        })\n\n        this.context.setEquipments(equipments);\n        this.context.setDrivers(drivers);\n        this.context.setIdleDrivers(idleDrivers);\n\n    }\n\n    render() {\n\n        const { equipment } = this.props;\n        const { idleEquipments, shipments } = this.context;\n        const busyEquipment = arrayIsEmpty(idleEquipments.filter((idleEquipment) => idleEquipment.id === equipment.id))\n        let shipmentId = -1;\n        if(busyEquipment && equipment.driver.hasOwnProperty('id')){\n            shipmentId = shipments.filter((shipment) => shipment.equipment.id === equipment.id)[0].id;\n        }\n        \n        return (\n            <div className='EquipmentCard grey-back blue-text'>\n\n                <div className='flex-row'>\n                    <div className='equip-num'>\n                        <h6>Unit Num</h6>\n                        <p>{equipment.unit_num}</p>\n                    </div>\n                    {\n                        !objectIsEmpty(equipment.driver) &&\n                        <div className='equip-driver'>\n                            <h6>Driver</h6>\n                            <p className={equipment.driver.full_name ? '' : 'no-driver'}\n                            >{equipment.driver.full_name ? equipment.driver.full_name : 'No Driver Assigned'}</p>\n                        </div>\n                    }\n                </div>\n                {\n                    shipmentId === -1 \n                    ?\n                    <div className='equipment-buttons flex-row'>\n                        <EditButton to={`${config.BASEPATH}/equipment/edit/${equipment.id}`} className='responsive'/>\n                        <DeleteButton onClick={() => { this.handleDeleteEquipment(equipment.id) }} className='responsive'/>\n                    </div>\n                    :\n                    <div className='equipment-buttons flex-row'>\n                        <span>\n                            Equipment Busy\n                        </span>\n                        <ViewLoadButton to={`${config.BASEPATH}/load/${shipmentId}`} className='responsive'/>\n                    </div>\n                }\n\n\n\n            </div>\n        )\n    }\n}\n\nexport default EquipmentCard;","import React, { Component } from 'react';\nimport './EquipmentsPage.css';\nimport AppContext from '../../Contexts/AppContext';\nimport EquipmentCard from '../../Components/EquipmentCard/EquipmentCard';\n\nclass EquipmentsPage extends Component {\n\n    static contextType = AppContext;\n\n    handleAddEquipment = (e) => {\n        e.preventDefault();\n        console.log(`Equipment Add Submitted`);\n    }\n\n    renderEquipmentList = () => {\n\n        let { equipments } = this.context;\n        equipments = equipments.filter((equipment) => equipment.status === 'active')\n\n        return equipments.map(equip => {\n            return (\n                <li key={equip.id}>\n                    <EquipmentCard equipment={equip} />\n                </li>\n            )\n        })\n    }\n\n    render() {\n        return (\n            <section className='EquipmentPage width-wrapper'>\n                <div className='box'>\n                    <h3 className='box-header blue-back white-text'>Equipment List</h3>\n                    <ul className='equipment-list'>\n                        {this.renderEquipmentList()}\n                    </ul>\n                </div>\n            </section>\n        )\n    }\n}\n\n\nexport default EquipmentsPage;","import React, { Component } from 'react';\nimport './DriversPage.css';\nimport AppContext from '../../Contexts/AppContext';\nimport DriverCard from '../../Components/DriverCard/DriverCard';\n\nclass DriversPage extends Component {\n\n    static contextType = AppContext\n\n\n    renderDrivers = (drivers) => {\n        \n        return drivers.map((driver) => {\n            if(driver.status === 'active'){\n                return (\n                    <li key={driver.id}>\n                        <DriverCard driver={driver} />\n                    </li>\n                )\n            }\n            else{\n                return ''\n            }\n        })\n    }\n\n    render() {\n\n        const { drivers } = this.context\n        \n        // to change background color if viewing specific driver\n        // const { id } = !objectIsEmpty(this.props.match.params) ? this.props.match.params : -1\n\n        return (\n            <section className='DriversPage width-wrapper'>\n                <h4 className='blue-back white-text'>\n                    Drivers List\n                </h4>\n                <ul className='drivers-list'>\n                    {this.renderDrivers(drivers)}\n                </ul>\n            </section>\n        )\n    }\n}\n\n\nexport default DriversPage;","import React, { Component } from 'react';\nimport './DriversDropDown.css'\n\nclass DriversDropDown extends Component {\n    \n    constructor(props){\n        super(props)\n        this.state = {\n            optionsValue: props.defaultValue\n        }\n    }\n    \n    static defaultProps = {\n        drivers: [],\n        defaultValue: 0,\n        className: 'select-css',\n        name: 'driver',\n        id: 'driver'\n    }\n\n    handleChange = (e) => {\n        this.setState({\n            optionsValue: e.target.value\n        }, () => {\n            if(this.props.hasOwnProperty('handleChange')){\n                this.props.handleChange(this.state.optionsValue)\n            }\n        })\n    }\n\n    renderDriverOptions = (drivers) => {\n        if(drivers !== []){\n            return drivers.map((driver, i) => {\n                return (\n                    <option \n                        value={driver.id}\n                        key={i}\n                        defaultValue={true}\n                    >\n                        {driver.full_name}\n                    </option>\n                )\n            })\n        }   \n    }\n\n    render() {\n\n        const { \n            className = 'select-css', \n            drivers = [], \n            name='driver', \n            id='driver'\n        } = this.props;\n\n\n        return (\n            <div className='DriversDropDown'>\n                <select className={className}\n                    name={name}\n                    id={id} \n                    value={this.state.optionsValue} \n                    onChange={(e) => {this.handleChange(e)}}>\n                    <option value='-1'>No Driver</option>\n                    {this.renderDriverOptions(drivers)}    \n                </select>\n            </div>\n        );\n    }\n}\n\nexport default DriversDropDown;","import React, { Component } from 'react';\nimport './EquipmentEditPage.css';\nimport DriversDropDown from '../../Components/DriversDropDown/DriversDropDown';\nimport AppContext from '../../Contexts/AppContext';\nimport {\n    handleGoBack,\n    objectIsEmpty,\n    arrayIsEmpty,\n    removeEquipmentDriver,\n} from '../../HelperFunctions/HelperFunctions';\nimport EquipmentService from '../../Services/EquipmentsService';\nimport DriversService from '../../Services/DriversService';\nimport { GoBackButton } from '../../Components/Utils/Utils';\n\nclass EquipmentEditPage extends Component {\n\n    static defaultProps = {\n        equipments: {},\n        idleDrivers: {},\n        rprops: {},\n    }\n\n    constructor(props) {\n        super(props);\n\n        // setting state so that edit equipment page\n        // already has values in it for the selected equipment to edit\n        // if not done this way , then another Get request had to be made for\n        // getting equipment by id \n        const { equipments, idleDrivers } = props;\n        const { id } = this.props.rprops.match.params;\n        const equipment = equipments.filter(equipment => equipment.id === parseInt(id, 10));\n        let driver = {};\n        let availableDrivers = idleDrivers.filter(driver => objectIsEmpty(driver.equipment))\n        let unitNum = '';\n        let currentDriver = -1;\n        let inIdleQueue = true;\n        if (equipment[0] !== undefined) {\n            driver = equipment[0].driver;\n            unitNum = equipment[0].unit_num;\n\n            // The server after adding serialization is sending in full_name and driver\n            // properties with empty strings so to solve and empty driver populating\n            // in the select statement the below line is as is, if there is a driver.id then\n            // set one else leave it to current driver which is -1\n            currentDriver = driver.id ? driver.id : currentDriver;\n            if (currentDriver !== -1) {\n                availableDrivers.unshift(driver);\n                inIdleQueue = !arrayIsEmpty(idleDrivers.filter((idleDr) => driver.id === idleDr.id));\n            }\n        }\n\n        this.state = {\n            error: '',\n            unitNumError: false,\n            unitNum,\n            equipment,\n            availableDrivers,\n            currentDriver,\n            inIdleQueue,\n        }\n    }\n\n    static contextType = AppContext\n\n    giveEquipment = (driver, equipment) => {\n        DriversService.updateEquipment(driver.id, equipment.id);\n        driver.equipment = {\n            id: equipment.id,\n            unit_num: equipment.unit_num,\n            status: 'active'\n        }\n        return driver;\n    }\n\n    takeAwayEquipment = (driver) => {\n        DriversService.updateEquipment(driver.id, null)\n        driver.equipment = {}\n        return driver;        \n    }\n\n    setDriverForEquipment = (equipment, driver) => {\n        equipment.driver = driver\n        return equipment;\n    }\n\n    removeDriverFromEquipment = (equipment) => {\n        equipment.driver = {}\n        return equipment;\n    }\n\n    changeEquipmentForDriver = (idleDrivers, driver, newDriverId, oldDriverId, equipment) => {\n        if(driver.id === newDriverId && newDriverId !== -1){\n            driver = this.giveEquipment(driver, equipment);\n            idleDrivers.map((oldDriver) => {\n                if(oldDriverId === oldDriver.id){\n                    oldDriver = this.takeAwayEquipment(oldDriver)\n                }\n                return oldDriver;\n            })\n        } else if (driver.id === oldDriverId){ \n            driver = this.takeAwayEquipment(driver)\n        }\n        return driver;\n    }\n\n    // Updates the changes in state and in the database\n    handleEquipmentEdit = (e, equipmentArray) => {\n\n        e.preventDefault();\n        const equipment = equipmentArray[0];\n        const oldDriverId = equipment.driver.id === undefined ? -1 : equipment.driver.id;\n        const newDriverId = this.state.inIdleQueue ? parseInt(e.target['driver'].value, 10) : oldDriverId;\n        const unit_num = e.target['unit-num'].value;\n        const { equipments, idleDrivers, drivers } = this.props\n\n        // Enter changing driver only when they change driver selection\n        if(newDriverId !== oldDriverId){\n            \n            idleDrivers.map((driver) => {\n                driver = this.changeEquipmentForDriver(idleDrivers, driver, newDriverId, oldDriverId, equipment);\n                return driver;\n            })\n\n            drivers.map((driver) => {\n                driver = this.changeEquipmentForDriver(drivers, driver, newDriverId, oldDriverId, equipment);\n                return driver;\n            })\n\n            let removeExecuted = false;\n            equipments.map((changeEquipemnt) => {\n                if(oldDriverId === -1){\n                    changeEquipemnt = this.setDriverForEquipment(equipment, idleDrivers.filter(driver => driver.id === newDriverId)[0])\n                }else {\n\n                    if((newDriverId === changeEquipemnt.driver.id || newDriverId === -1) && !removeExecuted) {\n                        if(changeEquipemnt.id === equipment.id){\n                            changeEquipemnt = removeEquipmentDriver(changeEquipemnt)\n                            removeExecuted = true;\n                        }\n                    }\n                    if(changeEquipemnt.id === equipment.id && newDriverId !== -1){\n                        changeEquipemnt = this.setDriverForEquipment(equipment, idleDrivers.filter(driver => driver.id === newDriverId)[0]);\n                    } \n                }\n                return changeEquipemnt\n            })\n        }\n\n        if (unit_num !== equipment.unit_num) {\n            equipments.map((changeEquipment) => {\n                if (changeEquipment.id === equipment.id) {\n                    changeEquipment.unit_num = unit_num\n                }\n                return changeEquipment\n            });\n\n            idleDrivers.map((driver) => {\n                if(driver.equipment.id === equipment.id){\n                    driver.equipment.unit_num = unit_num\n                }\n                return driver;\n            });\n\n            drivers.map((driver) => {\n                if(driver.equipment.id === equipment.id){\n                    driver.equipment.unit_num = unit_num\n                }\n                return driver;\n            });\n            \n            // call service to update the database\n            EquipmentService.updateEquipment(unit_num, 'active', equipment.id);\n        }\n\n        \n        this.context.setIdleDrivers(idleDrivers);\n        this.context.setEquipments(equipments);\n        this.context.setDrivers(drivers);\n\n        handleGoBack(this.props.rprops.history);\n\n    }\n\n    validateUnitNum = (e) => {\n        const unitNum = e.target.value;\n        this.setState({\n            unitNum\n        })\n        if (unitNum.trim() === '') {\n            this.setState({\n                error: 'Invalid Unit Num',\n                unitNumError: true\n            })\n        } else {\n            this.setState({\n                error: '',\n                unitNumError: false\n            })\n        }\n    }\n\n    render() {\n\n        const { unitNum, equipment, availableDrivers, currentDriver } = this.state\n\n        return (\n            <section className='EquipmentEditPage width-wrapper'>\n\n                <form className='edit-equip' onSubmit={(e) => { this.handleEquipmentEdit(e, equipment) }}>\n                    <fieldset>\n                        <legend className='blue-back white-text'>\n                            <GoBackButton onClick={(e) => { handleGoBack(this.props.rprops.history) }} />\n                            <span>Edit Equipment</span>\n                        </legend>\n                        <div className='flex'>\n                            <label htmlFor='unit-num'>\n                                <span className='input-title'>Unit Num:</span>\n                                <input\n                                    type='text'\n                                    id='unit-num'\n                                    name='unit-num'\n                                    required\n                                    value={unitNum}\n                                    onChange={(e) => { this.validateUnitNum(e) }}\n                                />\n                                {\n                                    this.state.unitNumError &&\n                                    <span className='error'>{this.state.error}</span>\n                                }\n                            </label>\n                            {\n                               this.state.inIdleQueue && \n                               <label htmlFor='driver'>\n                                    <span className='input-title'>Available Drivers</span>\n                                    {\n                                        equipment[0] !== undefined &&\n                                        <DriversDropDown\n                                            name={'driver'}\n                                            id={'driver'}\n                                            drivers={availableDrivers}\n                                            className={'select-css'}\n                                            defaultValue={currentDriver} />\n                                    }\n\n                                </label>\n                            }\n                            <button\n                                className='app-button'\n                                type='submit'\n                            >\n                                Save Changes\n                                </button>\n                        </div>\n                    </fieldset>\n                </form>\n            </section>\n        );\n    }\n}\n\nexport default EquipmentEditPage;","export function emptySpaces(word){\n    if(word.trim() === '')\n        return true;\n\n    return false;\n}\n\nexport function notValidState(state){\n    if(state.trim().length < 2)\n        return `Invalid state code, Eg. TX`\n}\n\nexport function notValidDate(date){\n    const date_regex = /^(0?[1-9]|1[0-2])\\/(0?[1-9]|1\\d|2\\d|3[01])\\/(15|18|17|16|19|20|21|23|24|25)\\d{2}$/ ;\n    return date.length < 8 || !date_regex.test(date);\n}\n\nexport function isNotValidDriverName(name){\n    if(name.trim() === ''){\n        return `Driver is required and cannot be just empty spaces`\n    }\n\n    return false;\n}\n\nexport function isNotValidPay(pay){\n    if(pay.trim() === ''){\n        return `Pay cannot be empty spaces`\n    }\n\n    if(isNaN(pay)){\n        return `Pay can only be numeric, cannot contain characters other than 0-9 and only one '.'`;\n    }\n\n    if(pay < 0){\n        return `Pay cannot be negative`;\n    }\n\n    return false;\n}","import TokenService from \"./TokenService\";\nimport config from \"../config\";\n\nconst ShipmentsSerivce = {\n    insertShipment(shipment){\n        return fetch(`${config.API_ENDPOINT}/shipments`, {\n            method: \"POST\",\n            headers: {\n              \"content-type\": \"application/json\",\n              Authorization: `bearer ${TokenService.getAuthToken()}`\n            },\n            body: JSON.stringify({\n                rate: shipment.rate || 0.0, \n                status: shipment.status, \n                miles: shipment.miles || 0, \n                driver_id: shipment.driver_id || null, \n                broker: shipment.broker || null,\n                pickup_date: shipment.pickup_date,\n                delivery_date: shipment.delivery_date,\n                pickup_city: shipment.pickup_city,\n                pickup_state: shipment.pickup_state,\n                pickup_zipcode: shipment.pickup_zipcode,\n                delivery_city: shipment.delivery_city,\n                delivery_state: shipment.delivery_state,\n                delivery_zipcode: shipment.delivery_zipcode\n            })\n          })\n            .then(response => response.json())\n            .then(shipment => shipment)\n            .catch(error => {\n              console.log(error);\n            });\n    },\n\n    updateShipment(shipment){\n      return fetch(`${config.API_ENDPOINT}/shipments/${shipment.id}`, {\n        method: \"PATCH\",\n        headers: {\n          \"content-type\": \"application/json\",\n          Authorization: `bearer ${TokenService.getAuthToken()}`\n        },\n        body: JSON.stringify({\n            rate: shipment.rate, \n            status: shipment.status, \n            miles: shipment.miles, \n            driver_id: shipment.driver_id, \n            broker: shipment.broker,\n            pickup_date: shipment.pickup_date,\n            delivery_date: shipment.delivery_date,\n            pickup_city: shipment.pickup_city,\n            pickup_state: shipment.pickup_state,\n            pickup_zipcode: shipment.pickup_zipcode,\n            delivery_city: shipment.delivery_city,\n            delivery_state: shipment.delivery_state,\n            delivery_zipcode: shipment.delivery_zipcode\n        })\n      })\n        .then(response => response.json())\n        .then(shipment => shipment)\n        .catch(error => {\n          console.log(error);\n        });\n    },\n\n    deleteShipment(id){\n      return fetch(`${config.API_ENDPOINT}/shipments/${id}`, {\n        method: \"DELETE\",\n        headers: {\n          \"content-type\": \"application/json\",\n          Authorization: `bearer ${TokenService.getAuthToken()}`\n        }\n      })\n        .then(response => response.json())\n        .then(shipment => shipment)\n        .catch(error => {\n          console.log(error);\n        });\n    }\n}\n\nexport default ShipmentsSerivce;","import React, { Component } from 'react';\nimport './AddLoadPage.css';\nimport {\n    handleGoBack,\n    routeUserTo,\n    formatDate,\n    getAvailableDrivers,\n} from '../../HelperFunctions/HelperFunctions';\nimport {\n    notValidDate,\n    emptySpaces,\n} from '../../HelperFunctions/InputFieldValidations';\nimport DriversDropDown from '../../Components/DriversDropDown/DriversDropDown';\nimport AppContext from '../../Contexts/AppContext';\nimport config from '../../config';\nimport ShipmentsSerivce from '../../Services/ShipmentsService';\nimport {GoBackButton} from '../../Components/Utils/Utils'\n\nclass AddLoadPage extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            hasError: false,\n            availableDrivers: [],\n            error: {\n                dateError: 'Enter Date in correct format \"MM/DD/YYYY\"',\n                pickupDate: false,\n                deliveryDate: false,\n                cityError: 'City is required',\n                pickupCity: false,\n                deliveryCity: false,\n                stateError: 'State is required and must be two characters, Eg. for New York - NY',\n                pickupState: false,\n                deliveryState: false,\n                zipcodeError: 'Zipcode is required',\n                pickupZipcode: false,\n                deliveryZipcode: false,\n            },\n            pickupDate: formatDate(new Date()),\n            deliveryDate: formatDate(new Date()),\n            pickupCity: '',\n            deliveryCity: '',\n            pickupState: '',\n            deliveryState: '',\n            pickupZipcode: '',\n            deliveryZipcode: '',\n            miles: '',\n            rate: '',\n            broker: '',\n        }\n    }\n\n    static contextType = AppContext\n\n    // validation of date, Validates both pickup date and delivery date\n    // *** THIS FUNCTION IS DEPENDENT ON THE NAME PROPERTY OF THE INPUT BOXES ***\n    validateInputDate = (e) => {\n        const date = e.target.value;\n        const { name } = e.target;\n\n        name === 'pickup-date'\n            ? this.setState({ pickupDate: date })\n            : this.setState({ deliveryDate: date });\n\n        if (notValidDate(date)) {\n            name === 'pickup-date'\n                ? this.setState({\n                    error: {\n                        ...this.state.error,\n                        pickupDate: true,\n                    }\n                })\n                : this.setState({\n                    error: {\n                        ...this.state.error,\n                        deliveryDate: true,\n                    }\n                });\n        } else {\n            name === 'pickup-date'\n                ? this.setState({\n                    error: {\n                        ...this.state.error,\n                        pickupDate: false,\n                    }\n                })\n                : this.setState({\n                    error: {\n                        ...this.state.error,\n                        deliveryDate: false,\n                    }\n                });\n        }\n    }\n\n    validateCityInput = (e) => {\n        const city = e.target.value;\n        const { name } = e.target;\n\n        name === 'pickup-city'\n            ? this.setState({ pickupCity: city })\n            : this.setState({ deliveryCity: city });\n\n\n        if (emptySpaces(city)) {\n            name === 'pickup-city'\n                ? this.setState({\n                    error: {\n                        ...this.state.error,\n                        pickupCity: true,\n                    }\n                })\n                : this.setState({\n                    error: {\n                        ...this.state.error,\n                        deliveryCity: true,\n                    }\n                });\n        } else {\n            name === 'pickup-city'\n                ? this.setState({\n                    error: {\n                        ...this.state.error,\n                        pickupCity: false,\n                    }\n                })\n                : this.setState({\n                    error: {\n                        ...this.state.error,\n                        deliveryCity: false,\n                    }\n                });\n        }\n    }\n\n    validateStateInput = (e) => {\n        const state = e.target.value;\n        const { name } = e.target;\n\n        name === 'pickup-state'\n            ? this.setState({ pickupState: state })\n            : this.setState({ deliveryState: state });\n\n\n        if (emptySpaces(state) || state.trim().length !== 2) {\n            name === 'pickup-state'\n                ? this.setState({\n                    error: {\n                        ...this.state.error,\n                        pickupState: true,\n                    }\n                })\n                : this.setState({\n                    error: {\n                        ...this.state.error,\n                        deliveryState: true,\n                    }\n                });\n        } else {\n            name === 'pickup-state'\n                ? this.setState({\n                    error: {\n                        ...this.state.error,\n                        pickupState: false,\n                    }\n                })\n                : this.setState({\n                    error: {\n                        ...this.state.error,\n                        deliveryState: false,\n                    }\n                });\n        }\n    }\n\n    validateZipcodeInput = (e) => {\n        const zipcode = e.target.value;\n        const { name } = e.target;\n\n        name === 'pickup-zipcode'\n            ? this.setState({ pickupZipcode: zipcode })\n            : this.setState({ deliveryZipcode: zipcode });\n\n\n        if (emptySpaces(zipcode)) {\n            name === 'pickup-zipcode'\n                ? this.setState({\n                    error: {\n                        ...this.state.error,\n                        pickupZipcode: true,\n                    }\n                })\n                : this.setState({\n                    error: {\n                        ...this.state.error,\n                        deliveryZipcode: true,\n                    }\n                });\n        } else {\n            name === 'pickup-zipcode'\n                ? this.setState({\n                    error: {\n                        ...this.state.error,\n                        pickupZipcode: false,\n                    }\n                })\n                : this.setState({\n                    error: {\n                        ...this.state.error,\n                        deliveryZipcode: false,\n                    }\n                });\n        }\n    }\n\n    updateIdleDriverQueue = (driverId) => {\n        let { idleDrivers } = this.context;\n        idleDrivers = idleDrivers.filter(driver => driver.id !== driverId);\n        this.context.setIdleDrivers(idleDrivers)\n    }\n\n    handleAddLoad = async (e) => {\n\n        e.preventDefault();\n\n        const broker = e.target['broker'].value.trim() || '';\n        const delivery_warehouse = {\n            city: e.target['delivery-city'].value.trim(),\n            state: e.target['delivery-state'].value.toUpperCase(),\n            zipcode: e.target['delivery-zipcode'].value.trim()\n        };\n        const pickup_warehouse = {\n            city: e.target['pickup-city'].value.trim(),\n            state: e.target['pickup-state'].value.toUpperCase(),\n            zipcode: e.target['pickup-zipcode'].value.trim()\n        };\n        const miles = e.target['miles'].value.trim() || 0;\n        const rate = e.target['rate'].value.trim() || 0;\n        const driverId = parseInt(e.target['driver'].value, 10);\n\n        // getting driver and equipment from drivers array in context\n        let driver = {}\n        let equipment = {}\n        let status = 'un-assigned';\n        if (driverId !== -1) {\n            this.context.drivers.map(contextDriver => {\n                if (contextDriver.id === driverId) {\n                    driver = {\n                        id: driverId,\n                        full_name: contextDriver.full_name,\n                        pay_rate: contextDriver.pay_rate,\n                        status: contextDriver.status\n                    }\n                    equipment = {\n                        id: contextDriver.equipment.id,\n                        status: contextDriver.equipment.status,\n                        unit_num: contextDriver.equipment.unit_num\n                    }\n                }\n                return contextDriver\n            });\n            this.updateIdleDriverQueue(driverId);\n            status = 'dispatched'\n        }\n\n        const pickup_date = e.target['pickup-date'].value;\n        const delivery_date = e.target['delivery-date'].value;\n\n        // the shipment to store in the database\n        let shipmentInDB = {\n            rate,\n            status,\n            miles,\n            driver_id: driverId !== -1 ? driverId : null,\n            broker,\n            pickup_date,\n            delivery_date,\n            pickup_city: pickup_warehouse.city,\n            pickup_state: pickup_warehouse.state,\n            pickup_zipcode: pickup_warehouse.zipcode,\n            delivery_city: delivery_warehouse.city,\n            delivery_state: delivery_warehouse.state,\n            delivery_zipcode: delivery_warehouse.zipcode\n        }\n        // add and get the new shipment with the id\n        shipmentInDB = await ShipmentsSerivce.insertShipment(shipmentInDB)\n\n        // shipment in the format for the front end to display it correctly\n        // and keep all arrays in order.\n        const newShipment = {\n            id: shipmentInDB.id,\n            pickup_date,\n            delivery_date,\n            broker,\n            delivery_warehouse,\n            pickup_warehouse,\n            miles,\n            driver,\n            equipment,\n            rate,\n            status,\n        }\n\n        this.context.setShipments([\n            ...this.context.shipments,\n            newShipment\n        ])\n\n        // handleGoBack(this.props.history);\n        routeUserTo(this.props.history, `${config.BASEPATH}/load/${newShipment.id}`)\n\n    }\n\n    render() {\n        const availableDrivers = getAvailableDrivers(this.context.idleDrivers)\n        const { error } = this.state\n\n        return (\n            <section className='AddLoadPage width-wrapper'>\n                <form className='add-load-form' onSubmit={(e) => { this.handleAddLoad(e) }}>\n                    <fieldset>\n                        <legend className='blue-back white-text'>\n                            <GoBackButton onClick={(e) => { handleGoBack(this.props.history) }} />\n                            <span>Add Load</span>\n                        </legend>\n                        <div className='flex'>\n                            <h4 className='fieldset-sub-title blue-text'>\n                                Pick Up Info\n                            </h4>\n                            <label htmlFor='pickup-date'>\n                                <span className='input-title'>* Date</span>\n                                <input\n                                    type='text'\n                                    id='pickup-date'\n                                    name='pickup-date'\n                                    maxLength='10'\n                                    value={this.state.pickupDate}\n                                    onChange={(e) => { this.validateInputDate(e) }}\n                                    onBlur={(e) => {\n                                        if (e.target.value === '') {\n                                            this.setState({\n                                                pickupDate: formatDate(new Date()),\n                                                error: {\n                                                    ...this.state.error,\n                                                    pickupDate: false\n                                                }\n                                            })\n                                        }\n                                    }}\n                                />\n                                {\n                                    error.pickupDate &&\n                                    <span className='error'>{error.dateError}</span>\n                                }\n                            </label>\n                            <label htmlFor='pickup-city'>\n                                <span className='input-title'>* City</span>\n                                <input\n                                    type='text'\n                                    id='pickup-city'\n                                    name='pickup-city'\n                                    placeholder='Eg. Dallas'\n                                    required\n                                    value={this.state.pickupCity}\n                                    onChange={(e) => { this.validateCityInput(e) }}\n                                />\n                                {\n                                    error.pickupCity &&\n                                    <span className='error'>{error.cityError}</span>\n                                }\n                            </label>\n                            <label htmlFor='pickup-state'>\n                                <span className='input-title'>* State</span>\n                                <input\n                                    type='text'\n                                    placeholder='Eg. TX'\n                                    maxLength='2'\n                                    id='pickup-state'\n                                    name='pickup-state'\n                                    required\n                                    value={this.state.pickupState}\n                                    onChange={(e) => { this.validateStateInput(e) }}\n                                />\n                                {\n                                    this.state.error.pickupState &&\n                                    <span className='error'>{this.state.error.stateError}</span>\n                                }\n                            </label>\n                            <label htmlFor='pickup-zipcode'>\n                                <span className='input-title'>* Zipcode</span>\n                                <input\n                                    type='text'\n                                    id='pickup-zipcode'\n                                    maxLength='10'\n                                    name='pickup-zipcode'\n                                    placeholder='Eg. 75001'\n                                    required\n                                    value={this.state.pickupZipcode}\n                                    onChange={(e) => { this.validateZipcodeInput(e) }}\n                                />\n                                {\n                                    this.state.error.pickupZipcode &&\n                                    <span className='error'>{this.state.error.zipcodeError}</span>\n                                }\n                            </label>\n                            <h4 className='fieldset-sub-title blue-text'>\n                                Delivery Info\n                            </h4>\n                            <label htmlFor='delivery-date'>\n                                <span className='input-title'>* Date</span>\n                                <input\n                                    type='text'\n                                    id='delivery-date'\n                                    name='delivery-date'\n                                    maxLength='10'\n                                    value={this.state.deliveryDate}\n                                    onChange={(e) => { this.validateInputDate(e) }}\n                                    onBlur={(e) => {\n                                        if (e.target.value === '') {\n                                            this.setState({\n                                                deliveryDate: formatDate(new Date()),\n                                                error: {\n                                                    ...this.state.error,\n                                                    deliveryDate: false\n                                                }\n                                            })\n                                        }\n                                    }}\n                                />\n                                {\n                                    this.state.error.deliveryDate &&\n                                    <span className='error'>{this.state.error.dateError}</span>\n                                }\n                            </label>\n                            <label htmlFor='delivery-city'>\n                                <span className='input-title'>* City</span>\n                                <input\n                                    type='text'\n                                    id='delivery-city'\n                                    name='delivery-city'\n                                    placeholder='Eg. Indianapolis'\n                                    required\n                                    value={this.state.deliveryCity}\n                                    onChange={(e) => { this.validateCityInput(e) }}\n                                />\n                                {\n                                    this.state.error.deliveryCity &&\n                                    <span className='error'>{this.state.error.cityError}</span>\n                                }\n                            </label>\n                            <label htmlFor='delivery-state'>\n                                <span className='input-title'>* State</span>\n                                <input\n                                    type='text'\n                                    placeholder='Eg. IN'\n                                    maxLength='2'\n                                    id='delivery-state'\n                                    name='delivery-state'\n                                    required\n                                    value={this.state.deliveryState}\n                                    onChange={(e) => { this.validateStateInput(e) }}\n                                />\n                                {\n                                    this.state.error.deliveryState &&\n                                    <span className='error'>{this.state.error.stateError}</span>\n                                }\n                            </label>\n                            <label htmlFor='delivery-zipcode'>\n                                <span className='input-title'>* Zipcode</span>\n                                <input\n                                    type='text'\n                                    id='delivery-zipcode'\n                                    name='delivery-zipcode'\n                                    maxLength='10'\n                                    placeholder='Eg. 46225'\n                                    required\n                                    value={this.state.deliveryZipcode}\n                                    onChange={(e) => { this.validateZipcodeInput(e) }}\n                                />\n                                {\n                                    this.state.error.deliveryZipcode &&\n                                    <span className='error'>{this.state.error.zipcodeError}</span>\n                                }\n                            </label>\n                            <h4 className='fieldset-sub-title blue-text'>\n                                Additional Info\n                            </h4>\n                            <label htmlFor='miles'>\n                                <span className='input-title'>Miles</span>\n                                <input\n                                    type='number'\n                                    min='0'\n                                    id='miles'\n                                    name='miles'\n                                />\n                                {\n                                    // this.state.unitNumError &&\n                                    // <span className='error'>{this.state.error}</span>\n                                }\n                            </label>\n                            <label htmlFor='rate'>\n                                <span className='input-title'>Rate</span>\n                                <input\n                                    type='number'\n                                    min='0'\n                                    id='rate'\n                                    name='rate'\n                                />\n                                {\n                                    // this.state.unitNumError &&\n                                    // <span className='error'>{this.state.error}</span>\n                                }\n                            </label>\n                            <label htmlFor='broker'>\n                                <span className='input-title'>Broker</span>\n                                <input\n                                    type='text'\n                                    id='broker'\n                                    name='broker'\n                                />\n                            </label>\n                            <label htmlFor='driver'>\n                                <span className='input-title'>Assign Driver</span>\n                                <DriversDropDown name='driver' id='driver' drivers={availableDrivers} className='select-css' />\n                                {\n                                    // incorrectPassword &&\n                                    // <span className='error'>{error}</span>\n                                }\n                            </label>\n                            {\n                                !(\n                                    error.pickupCity ||\n                                    error.deliveryCity ||\n                                    error.pickupDate ||\n                                    error.deliveryDate ||\n                                    error.pickupState ||\n                                    error.deliveryState ||\n                                    error.pickupZipcode ||\n                                    error.deliveryZipcode\n                                )\n                                    ?\n                                    <button\n                                        className='app-button'\n                                        type='submit'\n                                    >\n                                        Add New Load\n                                    </button>\n                                    :\n                                    <button\n                                        className='app-button'\n                                        type='submit'\n                                        disabled\n                                    >\n                                        Add New Load\n                                    </button>\n                            }\n\n                        </div>\n                    </fieldset>\n                </form>\n            </section>\n        );\n    }\n}\n\nexport default AddLoadPage;","import React, { Component } from 'react';\nimport './LoadByIdPage.css';\nimport AppContext from '../../Contexts/AppContext';\nimport {\n    arrayIsEmpty,\n    objectIsEmpty,\n    renderLoadStatusOptions,\n    formatCurrency,\n    getAvailableDrivers,\n    isNotUndefined,\n    routeUserTo,\n    handleGoBack\n} from '../../HelperFunctions/HelperFunctions';\nimport DriversDropDown from '../../Components/DriversDropDown/DriversDropDown';\nimport config from '../../config';\nimport ShipmentsService from '../../Services/ShipmentsService';\nimport { GoBackButton, EditButton, DeleteButton } from '../../Components/Utils/Utils';\n\nclass LoadByIdPage extends Component {\n\n    static defaultProps = {\n        rprops: {},\n        shipments: [],\n        idleDrivers: []\n    }\n\n    static contextType = AppContext\n\n    constructor(props) {\n        super(props);\n\n        const id = parseInt(props.rprops.match.params.id, 10)\n        const { shipments } = props;\n        let shipment = {};\n        let status = '';\n        let avaialableDrivers = [];\n        let driverAssigned = -1;\n        if (!arrayIsEmpty(shipments)) {\n            shipment = shipments.filter(shipment => shipment.id === id)[0];\n            status = shipment.status\n            if (shipment.status === 'un-assigned') {\n                avaialableDrivers = getAvailableDrivers(props.idleDrivers)\n                driverAssigned = isNotUndefined(avaialableDrivers[0]) ? avaialableDrivers[0].id : -1\n            }\n        }\n        this.state = {\n            shipment,\n            status,\n            avaialableDrivers,\n            driverAssigned,\n            completedShipment: status === 'completed' ? true : false\n        }\n    }\n\n    // remove drivers when status is changed to un-assigned\n    removeDriverAndEquipmentFromShipment = (shipment) => {\n\n        this.sendDriverToIdleDrivers(shipment);\n\n        shipment.driver = {}\n        shipment.equipment = {}\n\n        return shipment;\n    }\n\n    sendDriverToIdleDrivers = (shipment) => {\n        const {idleDrivers} = this.context\n        const driver = {\n            ...shipment.driver,\n            pay_rate: shipment.driver.pay_rate.toString(), // converting to string to make sure all objects are of the same data type\n            equipment: shipment.equipment\n        }\n\n        this.context.setIdleDrivers([\n            ...idleDrivers,\n            driver\n        ])\n    }\n\n    handleChangeLoadStatus = (e) => {\n        e.preventDefault();\n\n        const { status } = this.state;\n        this.setState({\n            shipment: {\n                ...this.state.shipment,\n                status\n            }\n        }, () => {\n            const { shipment } = this.state;\n            let { shipments } = this.props;\n\n            ShipmentsService.updateShipment({id: shipment.id, status})\n            shipments = shipments.map((propShipment) => {\n                if (propShipment.id === shipment.id) {\n                    propShipment.status = status\n                    if (status === 'un-assigned') {\n                        propShipment = this.removeDriverAndEquipmentFromShipment(propShipment);\n                        // update shipment by setting driver_id to null and status to un-assigned\n                        ShipmentsService.updateShipment({id: shipment.id, driver_id: null})\n                    }\n                    if(status === 'completed'){\n                        this.setState({\n                            completedShipment: true\n                        })\n                        this.sendDriverToIdleDrivers(propShipment);\n                    }\n                }\n                return propShipment\n            })\n            this.context.setShipments(shipments);\n        })\n    }\n\n    handleAssignDriver = (e) => {\n        e.preventDefault();\n        let { shipment, driverAssigned } = this.state;\n        let { idleDrivers, shipments } = this.props;\n\n        let driver = {};\n        let equipment = {};\n\n        idleDrivers = idleDrivers.map((idleDriver) => {\n            if (idleDriver.id === driverAssigned) {\n                driver = {\n                    id: driverAssigned,\n                    full_name: idleDriver.full_name,\n                    pay_rate: idleDriver.pay_rate,\n                    status: idleDriver.status\n                }\n                equipment = {\n                    id: idleDriver.equipment.id,\n                    status: idleDriver.equipment.status,\n                    unit_num: idleDriver.equipment.unit_num\n                }\n            }\n            return idleDriver;\n        })\n        idleDrivers = idleDrivers.filter((idleDriver) => idleDriver.id !== driverAssigned);\n\n        shipments = shipments.map((propShipment) => {\n            if (propShipment.id === shipment.id) {\n                propShipment = {\n                    ...propShipment,\n                    driver,\n                    equipment,\n                    status: 'dispatched'\n                }\n            }\n            return propShipment\n        })\n\n        // update shipment in the database\n        ShipmentsService.updateShipment({id: shipment.id ,driver_id: driverAssigned, status: 'dispatched'})\n\n        this.setState({\n            shipment: {\n                ...this.state.shipment,\n                status: 'dispatched'\n            },\n            status: 'dispatched',\n            avaialableDrivers: idleDrivers,\n            driverAssigned: -1\n        })\n\n        this.context.setIdleDrivers(idleDrivers);\n        this.context.setShipments(shipments);\n\n    }\n\n    onDriverDropDownChange = (id) => {\n        this.setState({\n            driverAssigned: parseInt(id, 10)\n        })\n    }\n\n    handleShipmentDelete = (shipmentId) => {\n        \n        let {shipments, idleDrivers} = this.context\n\n        // if shipment has driver, send him to idle driver queue\n        const shipmentToDelete = shipments.filter((shipment) => shipment.id === shipmentId)[0];\n\n        let driver = {};\n        if(!objectIsEmpty(shipmentToDelete.driver)){\n            driver = {\n                ...shipmentToDelete.driver,\n                equipment: {\n                    ...shipmentToDelete.equipment,\n                }\n            }\n\n            idleDrivers = [\n                ...idleDrivers,\n                driver\n            ]            \n        }\n\n        shipments = shipments.filter((shipment) => shipment.id !== shipmentId);\n\n        // remove shipment from the database\n        ShipmentsService.deleteShipment(shipmentId);\n\n        this.context.setIdleDrivers(idleDrivers);\n        this.context.setShipments(shipments);\n        routeUserTo(this.props.rprops.history, '/');\n\n    }\n\n    // render the load status only when reuired and do it always\n    renderUpdateLoadStatusBox = (shipment) => {\n        return (\n            <form onSubmit={(e) => { this.handleChangeLoadStatus(e) }}>\n                <fieldset>\n                <legend><h6><label htmlFor='status'>Status</label></h6></legend>\n                {\n                    <select\n                        className='select-css'\n                        name='status'\n                        id='status'\n                        value={this.state.status}\n                        onChange={(e) => { this.setState({ status: e.target.value }) }}>\n                        {\n                            renderLoadStatusOptions(this.context.loadStatus)\n                        }\n                    </select>\n                }                \n                <button className='app-button' disabled={this.state.status === shipment.status}>\n                    Change Status\n                </button>\n            </fieldset>\n        </form>\n                \n        )\n    }\n\n    \n\n    render() {\n\n        const { shipment } = this.state\n        let driverPayout = 0;\n        if (!objectIsEmpty(shipment)) {\n            driverPayout = shipment.driver.pay_rate * shipment.miles;\n        }\n\n        return (\n            !objectIsEmpty(shipment) ?\n                <section className='LoadByIdPage width-wrapper'>\n                    <div className='load-header'>\n                        <GoBackButton onClick={() => {handleGoBack(this.props.rprops.history)}} className='GoBackButton responsive'>\n                            <span>Back</span>\n                        </GoBackButton>\n                        <span>Load # {shipment.id}</span>\n                        <div className='flex-row'>\n                            <EditButton to={`${config.BASEPATH}/load/edit/${shipment.id}`} className='small' />\n                            <DeleteButton onClick={() => {this.handleShipmentDelete(shipment.id)}} className='small' />\n                        </div>\n                    </div>\n                    <div className='flex-row'>\n                        <div className='pick-up-info box-style'>\n                            <h3>Pick Up Info</h3>\n                            <div className='pickup info-wrapper'>\n                                <div className='pickup info date'>\n                                    <h6>Date</h6>\n                                    <p>{shipment.pickup_date}</p>\n                                </div>\n                                <div className='pickup info city'>\n                                    <h6>City, ST</h6>\n                                    <p>{shipment.pickup_warehouse.city}, {shipment.pickup_warehouse.state}</p>\n                                </div>\n                                <div className='pickup info state'>\n                                    <h6>Zipcode</h6>\n                                    <p>{shipment.pickup_warehouse.zipcode}</p>\n                                </div>\n                            </div>\n                        </div>\n                        <div className='delivery-info box-style'>\n                            <h3>Delivery Info</h3>\n                            <div className='delivery info-wrapper'>\n                                <div className='delivery info'>\n                                    <h6>Delivery Date</h6>\n                                    <p>{shipment.delivery_date}</p>\n                                </div>\n                                <div className='delivery info city'>\n                                    <h6>City, ST</h6>\n                                    <p>{shipment.delivery_warehouse.city}, {shipment.delivery_warehouse.state}</p>\n                                </div>\n                                <div className='delivery info state'>\n                                    <h6>Zipcode</h6>\n                                    <p>{shipment.delivery_warehouse.zipcode}</p>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    <div className='additional-info box-style'>\n                        <h3>Additional Info</h3>\n                        <div className='flex-row'>\n                            <div className='additional-info info-wrapper'>\n                                <div className='additional-info info'>\n                                    <h6>Miles</h6>\n                                    <p>{shipment.miles}</p>\n                                </div>\n                                <div className='additional-info info city'>\n                                    <h6>Rate</h6>\n                                    <p className='red-text'>{formatCurrency(shipment.rate)}</p>\n                                </div>\n                                <div className='additional-info info state'>\n                                    <h6>Broker</h6>\n                                    <p>{shipment.broker}</p>\n                                </div>\n                            </div>\n                            <div className='additional-info change-status'>\n                                <div className='additional-info info'>\n                                    {\n                                        (shipment.status !== 'un-assigned' && !this.state.completedShipment)\n                                        &&\n                                        this.renderUpdateLoadStatusBox(shipment)\n                                    }\n                                    {\n                                        shipment.status === 'un-assigned' &&\n                                        <div className='shipment-status'>\n                                            <h6>Status</h6>\n                                            <span>No Driver Assigned</span>\n                                        </div>\n                                    }\n                                    {\n                                        this.state.completedShipment &&\n                                        <div className='shipment-status'>\n                                            <h6>Status</h6>\n                                            <span>Shipment Delivered</span>\n                                        </div>\n                                    }\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    {\n                        shipment.status !== 'un-assigned'\n                            ?\n                            <div className='driver-info box-style'>\n                                <h3>Driver Info</h3>\n                                <div className='flex-row'>\n\n                                    <div className='additional-info info-wrapper'>\n                                        <div className='additional-info info'>\n                                            <h6>Driver</h6>\n                                            <p>{shipment.driver.full_name}</p>\n                                        </div>\n                                        <div className='additional-info info city'>\n                                            <h6>Pay per Mile</h6>\n                                            <p>{formatCurrency(shipment.driver.pay_rate)}</p>\n                                        </div>\n                                        <div className='additional-info info'>\n                                            <h6>Equipment #</h6>\n                                            <p>{shipment.equipment.unit_num}</p>\n                                        </div>\n                                    </div>\n                                    <div className='additional-info info-wrapper'>\n                                        <div className='additional-info info state'>\n                                            <h6>Drvier Payout</h6>\n                                            <p className='red-text'>{formatCurrency(driverPayout)}</p>\n                                        </div>\n                                        <div className='additional-info info'>\n                                            <h6>Load Balance Amount <br />\n                                                ( rate - driver payout )\n                                            </h6>\n                                            <p className='green-text'>{formatCurrency(shipment.rate - driverPayout)}</p>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                            :\n                            <div className='driver-info box-style'>\n                                <h3>Assign Driver</h3>\n                                <div className='assign-driver'>\n                                    <form className='assign-driver-form' onSubmit={(e) => { this.handleAssignDriver(e) }}>\n                                        <fieldset>\n                                            <div className='assign-driver-fields blue-text'>\n                                                <h6>Available Drivers</h6>\n                                                <DriversDropDown\n                                                    drivers={this.state.avaialableDrivers}\n                                                    defaultValue={this.state.driverAssigned}\n                                                    handleChange={(id) => { this.onDriverDropDownChange(id) }}\n                                                />\n                                                {\n                                                    this.state.driverAssigned === -1\n                                                        ?\n                                                        <button className='app-button' type='submit' disabled>Assign</button>\n                                                        :\n                                                        <button className='app-button' type='submit'>Assign</button>\n                                                }\n\n                                            </div>\n                                        </fieldset>\n                                    </form>\n                                </div>\n                            </div>\n                    }\n                </section>\n                :\n                <></>\n        );\n    }\n}\n\nexport default LoadByIdPage;","import React, { Component } from 'react';\nimport './AddDriverPage.css';\nimport {\n    handleGoBack,\n    routeUserTo,\n    renderEquipmentOptions,\n} from '../../HelperFunctions/HelperFunctions';\nimport AppContext from '../../Contexts/AppContext';\nimport config from '../../config';\nimport { isNotValidDriverName, isNotValidPay } from '../../HelperFunctions/InputFieldValidations';\nimport DriversService from '../../Services/DriversService';\nimport {GoBackButton} from '../../Components/Utils/Utils';\n\nclass AddDriverPage extends Component {\n\n    static defaultProps = {\n        rprops: {},\n        equipments: [],\n    }\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            hasError: false,\n            availableEquipments: [],\n            error: {\n                driverNameError: 'Driver name is required',\n                driverName: false,\n                driverPayError: 'Driver pay cannot have characters in it',\n                driverPay: false,\n            },\n            full_name: '',\n            pay_rate: 0.0,\n            equipment_id: -1,\n        }\n    }\n\n    static contextType = AppContext\n\n    validateDriverName = (full_name) => {\n        const isNotValid = isNotValidDriverName(full_name)\n        this.setState({\n            full_name\n        })\n        if(isNotValid){\n            this.setState({\n                error: {\n                    ...this.state.error,\n                    driverName: true,\n                    driverNameError: isNotValid\n                }\n            })\n        }else{\n            this.setState({\n                error: {\n                    ...this.state.error,\n                    driverName: false,\n                    driverNameError: ''\n                }\n            })\n        }\n    }\n\n    validatePayRate = (pay_rate) => {\n        const isNotValid = isNotValidPay(pay_rate)\n        this.setState({\n            pay_rate\n        })\n        if(isNotValid){\n            this.setState({\n                error: {\n                    ...this.state.error,\n                    driverPay: true,\n                    driverPayError: isNotValid\n                }\n            })\n        }else{\n            this.setState({\n                error: {\n                    ...this.state.error,\n                    driverPay: false,\n                    driverPayError: ''\n                }\n            })\n        }\n    }\n\n    updateIdleDriverQueue = (driver) => {\n        let { idleDrivers } = this.context;\n        idleDrivers = [\n            ...idleDrivers,\n            driver\n        ]\n        this.context.setIdleDrivers(idleDrivers)\n    }\n\n    handleAddDriver = async (e) => {\n\n        e.preventDefault();\n        const full_name = e.target['full_name'].value;\n        const pay_rate = e.target['pay_rate'].value;\n        let equipment_id = parseInt(e.target['equipment_id'].value, 10);\n\n        let dbDriver = {\n            full_name,\n            pay_rate,\n            equipment_id: equipment_id !== -1 ? equipment_id : null\n        }\n\n        dbDriver = await DriversService.addDriver(dbDriver)\n\n        let {drivers, idleDrivers, equipments} = this.context\n\n        let driver = {\n            id: dbDriver.id,\n            full_name,\n            pay_rate,\n            status: 'active'\n        }\n        \n        let equipment = {}\n        if(equipment_id !== -1){\n\n            equipments = equipments.map((contextEquipment) => {\n                if(contextEquipment.id === equipment_id){\n                    contextEquipment.driver = driver\n                    equipment = {\n                        id: contextEquipment.id,\n                        unit_num: contextEquipment.unit_num,\n                        status: contextEquipment.status\n                    }\n                }\n                return contextEquipment\n            });\n        }\n\n        driver = {\n            ...driver,\n            equipment\n        }\n\n        // add new driver to all the drivers\n        drivers = [\n            ...drivers,\n            driver\n        ]\n\n        // adding new driver to the idle driver queue\n        idleDrivers = [\n            ...idleDrivers,\n            driver\n        ]\n\n        this.context.setDrivers(drivers);\n        this.context.setIdleDrivers(idleDrivers);\n        this.context.setEquipments(equipments);\n\n        routeUserTo(this.props.rprops.history, `${config.BASEPATH}/drivers`)\n    }\n\n    render() {\n\n        const { error } = this.state\n        const availableEquipments = this.props.equipments.filter((equipment) => !equipment.driver.hasOwnProperty('id') && equipment.status === 'active')\n\n        return (\n            <section className='AddDriverPage width-wrapper'>\n                <form className='add-load-form' onSubmit={(e) => { this.handleAddDriver(e) }}>\n                    <fieldset>\n                        <legend className='blue-back white-text'>\n                            <GoBackButton onClick={(e) => { handleGoBack(this.props.rprops.history) }} />\n                            <span>Add Driver</span>\n                        </legend>\n                        <div className='flex'>\n                            <label htmlFor='full_name'>\n                                <span className='input-title'>* driver name</span>\n                                <input\n                                    type='text'\n                                    id='full_name'\n                                    name='full_name'\n                                    placeholder='Eg. John Doe'\n                                    value={this.state.full_name}\n                                    onChange={(e) => { this.validateDriverName(e.target.value) }}\n                                    required\n                                />\n                                {\n                                    error.driverName &&\n                                    <span className='error'>{error.driverNameError}</span>\n                                }\n                            </label>\n                            <label htmlFor='pay_rate'>\n                                <span className='input-title'>salary Per mile</span>\n                                <input\n                                    type='text'\n                                    id='pay_rate'\n                                    name='pay_rate'\n                                    min='0'\n                                    placeholder='Eg. 0.43'\n                                    value={this.state.pay_rate}\n                                    onChange={(e) => { this.validatePayRate(e.target.value) }}\n                                    onBlur={(e) => {\n                                        if(e.target.value.trim() === ''){\n                                            this.setState({\n                                                pay_rate: 0.0,\n                                                error: {\n                                                    ...this.state.error,\n                                                    driverPay: false,\n                                                    driverPayError: ''\n                                                }\n                                            })\n                                        }\n                                    }}\n                                />\n                                {\n                                    error.driverPay &&\n                                    <span className='error'>{error.driverPayError}</span>\n                                }\n                            </label>\n                            <label htmlFor='delivery-zipcode'>\n                                <span className='input-title'>Available Equipments</span>\n                                <select className='select-css' \n                                    name='equipment_id' \n                                    id='equipment_id'\n                                    value={this.state.equipment_id}\n                                    onChange={(e) => {this.setState({equipment_id: e.target.value})}}\n                                >\n                                    <option value='-1'>No Equipment</option>\n                                    {renderEquipmentOptions(availableEquipments)}\n                                </select>\n                                {\n                                    this.state.error.deliveryZipcode &&\n                                    <span className='error'>{this.state.error.zipcodeError}</span>\n                                }\n                            </label>\n                            {\n                                !(\n                                    error.driverName ||\n                                    error.driverPay\n                                )\n                                    ?\n                                    <button\n                                        className='app-button'\n                                        type='submit'\n                                    >\n                                        Add New Driver\n                                    </button>\n                                    :\n                                    <button\n                                        className='app-button'\n                                        type='submit'\n                                        disabled\n                                    >\n                                        Add New Driver\n                                    </button>\n                            }\n\n                        </div>\n                    </fieldset>\n                </form>\n            </section>\n        );\n    }\n}\n\nexport default AddDriverPage;","import React, { Component } from 'react';\nimport './AddEquipmentPage.css';\nimport {\n    handleGoBack,\n    routeUserTo,\n    renderDriverOptions,\n    objectIsEmpty,\n} from '../../HelperFunctions/HelperFunctions';\nimport AppContext from '../../Contexts/AppContext';\nimport config from '../../config';\nimport { emptySpaces } from '../../HelperFunctions/InputFieldValidations';\nimport EquipmentService from '../../Services/EquipmentsService';\nimport DriversService from '../../Services/DriversService';\nimport { GoBackButton } from '../../Components/Utils/Utils';\n\nclass AddEquipmentPage extends Component {\n\n    static defaultProps = {\n        rprops: {},\n        drivers: [],\n    }\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            availableDrivers: [],\n            error: {\n                equipmentNumError: 'Equipment number is required',\n                equipmentNum: false,\n            },\n            unit_num: '',\n            driver_id: -1,\n        }\n    }\n\n    static contextType = AppContext\n\n    validateUnitNumField = (unit_num) => {\n        this.setState({\n            unit_num\n        })\n        if(emptySpaces(unit_num)){\n            this.setState({\n                hasError: true,\n                error: {\n                    equipmentNumError: 'Equipment number is required',\n                    equipmentNum: true,\n                }\n            })\n        }else{\n            this.setState({\n                hasError: false,\n                error: {\n                    equipmentNumError: '',\n                    equipmentNum: false,\n                }\n            })\n        }\n    }\n\n    updateIdleDriverQueue = (driver) => {\n        let { idleDrivers } = this.context;\n        idleDrivers = [\n            ...idleDrivers,\n            driver\n        ]\n        this.context.setIdleDrivers(idleDrivers)\n    }\n\n    handleAddEquipment = async (e) => {\n\n        e.preventDefault();\n\n        const unit_num = e.target['unit_num'].value;\n        const driver_id = parseInt(e.target['driver_id'].value,10);\n\n        // Add Equipment to the db\n        const dbEquipment = await EquipmentService.addNewEquipment(unit_num);        \n\n        let equipment = {\n            unit_num: dbEquipment.unit_num,\n            id: dbEquipment.id,\n            status: 'active'\n        }\n\n        let driver = {}\n        let {equipments, drivers, idleDrivers} = this.context\n\n        if(driver_id !== -1){\n\n            // update driver to reference equipment in the db\n            DriversService.updateEquipment(driver_id, equipment.id);\n\n            drivers = drivers.map((contextDriver) => {\n                if(contextDriver.id === driver_id){\n                    contextDriver.equipment = equipment\n                    driver = {\n                        id: contextDriver.id,\n                        full_name: contextDriver.full_name,\n                        pay_rate: contextDriver.pay_rate,\n                        status: 'active',\n                    }\n                }\n                return contextDriver;\n            })\n            \n            idleDrivers = idleDrivers.map((idleDriver) => {\n                if(idleDriver.id === driver_id){\n                    idleDriver.equipment = equipment\n                }\n                return idleDriver;\n            })\n        } else {\n            driver = {\n                full_name: '',\n                pay_rate: ''\n            }\n        }\n\n        // adding driver to the equipment \n        equipment = {\n            ...equipment,\n            driver,\n        }\n\n        // adding new equipment to all equipments array\n        equipments = [\n            ...equipments,\n            equipment\n        ]\n        \n        this.context.setDrivers(drivers);\n        this.context.setIdleDrivers(idleDrivers);\n        this.context.setEquipments(equipments);\n        routeUserTo(this.props.rprops.history, `${config.BASEPATH}/equipments`)\n    }\n\n    render() {\n\n        const { error } = this.state\n        const availableDrivers = this.props.drivers.filter((driver) => objectIsEmpty(driver.equipment) && driver.status === 'active')\n\n        return (\n            <section className='AddEquipmentPage width-wrapper'>\n                <form className='add-load-form' onSubmit={(e) => { this.handleAddEquipment(e) }}>\n                    <fieldset>\n                        <legend className='blue-back white-text'>\n                            <GoBackButton onClick={(e) => { handleGoBack(this.props.rprops.history) }} />\n                            <span>Add Equipment</span>\n                        </legend>\n                        <div className='flex'>\n                            <label htmlFor='unit_num'>\n                                <span className='input-title'>* Equipment Number</span>\n                                <input\n                                    type='text'\n                                    id='unit_num'\n                                    name='unit_num'\n                                    placeholder='Eg. A 101'\n                                    value={this.state.unit_num}\n                                    onChange={(e) => { this.validateUnitNumField(e.target.value) }}\n                                    required\n                                />\n                                {\n                                    error.equipmentNum &&\n                                    <span className='error'>{error.equipmentNumError}</span>\n                                }\n                            </label>\n                            <label htmlFor='driver_id'>\n                                <span className='input-title'>Available Drivers</span>\n                                <select className='select-css' \n                                    name='driver_id' \n                                    id='driver_id'\n                                    value={this.state.driver_id}\n                                    onChange={(e) => {this.setState({driver_id: e.target.value})}}\n                                >\n                                    <option value='-1'>No Driver</option>\n                                    {renderDriverOptions(availableDrivers)}\n                                </select>\n                                \n                            </label>\n                            {\n                                !error.equipmentNum\n                                    ?\n                                    <button\n                                        className='app-button'\n                                        type='submit'\n                                    >\n                                        Add New Equipment\n                                    </button>\n                                    :\n                                    <button\n                                        className='app-button'\n                                        type='submit'\n                                        disabled\n                                    >\n                                        Add New Equipment\n                                    </button>\n                            }\n\n                        </div>\n                    </fieldset>\n                </form>\n            </section>\n        );\n    }\n}\n\nexport default AddEquipmentPage;","import React, { Component } from 'react';\nimport './DriverEditPage.css';\nimport AppContext from '../../Contexts/AppContext';\nimport {\n    handleGoBack,\n    objectIsEmpty,\n    renderEquipmentOptions,\n    routeUserTo,\n} from '../../HelperFunctions/HelperFunctions';\nimport { isNotValidDriverName, isNotValidPay } from '../../HelperFunctions/InputFieldValidations';\nimport config from '../../config';\nimport DriversSerivce from '../../Services/DriversService';\nimport {GoBackButton} from '../../Components/Utils/Utils';\n\nclass DriverEditPage extends Component {\n\n    static defaultProps = {\n        equipments: {},\n        idleDrivers: {},\n        rprops: {},\n    }\n\n    constructor(props) {\n        super(props);\n\n        // setting state so that edit equipment page\n        // already has values in it for the selected equipment to edit\n        // if not done this way , then another Get request had to be made for\n        // getting equipment by id \n        let full_name = '';\n        let pay_rate= '';\n        let equipment_id = -1;\n        const driver_id = parseInt(this.props.rprops.match.params.id, 10)\n        let driver = this.props.drivers.filter((driver) => driver.id === driver_id)[0] || {};\n        \n        if(!objectIsEmpty(driver)){\n            full_name = driver.full_name;\n            pay_rate = driver.pay_rate;\n            equipment_id = !objectIsEmpty(driver.equipment) ? driver.equipment.id : -1;\n        }\n\n        let availableEquipments = [];\n        availableEquipments = this.props.equipments.filter((equipment) => !equipment.driver.hasOwnProperty('id') && equipment.status === 'active')\n        if(equipment_id !== -1){\n            const currentEquipment = this.props.equipments.filter((propsEquipment) => propsEquipment.id === equipment_id)[0]\n            availableEquipments = [\n                currentEquipment,\n                ...availableEquipments\n            ]\n            // console.log(currentEquipment);\n        }\n\n        this.state = {\n            error: {\n                driverNameError: '',\n                driverName: false,\n                driverPayError: '',\n                driverPay: false,\n            },\n            availableEquipments,\n            driver,\n            full_name,\n            pay_rate,\n            equipment_id,\n        }\n    }\n\n    static contextType = AppContext\n\n    validateDriverName = (full_name) => {\n        const isNotValid = isNotValidDriverName(full_name)\n        this.setState({\n            full_name\n        })\n        if(isNotValid){\n            this.setState({\n                error: {\n                    ...this.state.error,\n                    driverName: true,\n                    driverNameError: isNotValid\n                }\n            })\n        }else{\n            this.setState({\n                error: {\n                    ...this.state.error,\n                    driverName: false,\n                    driverNameError: ''\n                }\n            })\n        }\n    }\n\n    validatePayRate = (pay_rate) => {\n        const isNotValid = isNotValidPay(pay_rate)\n        this.setState({\n            pay_rate\n        })\n        if(isNotValid){\n            this.setState({\n                error: {\n                    ...this.state.error,\n                    driverPay: true,\n                    driverPayError: isNotValid\n                }\n            })\n        }else{\n            this.setState({\n                error: {\n                    ...this.state.error,\n                    driverPay: false,\n                    driverPayError: ''\n                }\n            })\n        }\n    }\n\n    changeEquipment = (drivers, driverToChange, equipment) => {\n        const driversArray = drivers.map((driver) => {\n            if(driver.id === driverToChange.id){\n                driver.equipment = equipment\n            }\n            return driver\n        }) \n        return driversArray;\n    }\n\n    makeDriverChanges = (drivers, driverToChange, changes) => {\n        const driversArray = drivers.map((driver) => {\n            if(driver.id === driverToChange.id){\n                driver = {\n                    ...driver,\n                    full_name: changes.full_name,\n                    pay_rate: changes.pay_rate\n                }\n            }\n            return driver;\n        })\n        return driversArray;\n    }\n\n    handleEditDriver = (e, changeDriver) => {\n\n        e.preventDefault();\n\n        const full_name = e.target['full_name'].value\n        const pay_rate = e.target['pay_rate'].value\n        const newEquipmentId = parseInt(e.target['equipment_id'].value)\n        const oldEquipmentId = !objectIsEmpty(changeDriver.equipment) ? changeDriver.equipment.id : -1;\n\n        let {drivers, idleDrivers, equipments} = this.context\n        let newEquipment= {};\n\n        if(newEquipmentId !== oldEquipmentId){\n\n            newEquipment = newEquipmentId !== -1 ? equipments.filter((equipment) => equipment.id === newEquipmentId)[0] : {};\n            newEquipment = !objectIsEmpty(newEquipment) \n                ?\n                {\n                    id: newEquipment.id,\n                    unit_num: newEquipment.unit_num,\n                    status: 'active'\n                } \n                : {}\n\n            drivers = this.changeEquipment(drivers, changeDriver, newEquipment)\n            idleDrivers = this.changeEquipment(idleDrivers, changeDriver, newEquipment)\n\n            // remove driver from old equipment if id not -1\n            if(oldEquipmentId !== -1){\n                equipments = equipments.map((equipment) => {\n                    if(equipment.id === oldEquipmentId){\n                        equipment.driver = {}\n                    }\n                    return equipment\n                })\n            }\n\n            equipments = equipments.map((equipment) => {\n                if(equipment.id === newEquipmentId){\n                    equipment.driver = {\n                        id: changeDriver.id,\n                        full_name,\n                        pay_rate,\n                        status: 'active'\n                    }\n                }\n                return equipment\n            })\n\n        }\n        \n        const changes = {\n            full_name,\n            pay_rate\n        }\n        // make changes to the changed driver in all drivers array\n        drivers = this.makeDriverChanges(drivers, changeDriver, changes)\n        idleDrivers = this.makeDriverChanges(idleDrivers, changeDriver, changes)\n\n        const updateDriverInDB = {\n            id: changeDriver.id,\n            full_name,\n            pay_rate,\n            equipment_id: newEquipmentId === -1 ? null : newEquipmentId\n        }\n\n        DriversSerivce.updateDriver(updateDriverInDB);\n\n        this.context.setDrivers(drivers);\n        this.context.setEquipments(equipments);\n        this.context.setIdleDrivers(idleDrivers);\n\n        routeUserTo(this.props.rprops.history, `${config.BASEPATH}/drivers`);\n    }\n\n    render() {\n\n        \n        const {full_name, pay_rate, equipment_id, driver, availableEquipments, error} = this.state;\n        \n\n        return (\n            <section className='DriverEditPage width-wrapper'>\n\n                <form className='edit-equip' onSubmit={(e) => { this.handleEditDriver(e, driver) }}>\n                    <fieldset>\n                        <legend className='blue-back white-text'>\n                            <GoBackButton onClick={(e) => { handleGoBack(this.props.rprops.history) }} />\n                            <span>Edit Driver</span>\n                        </legend>\n                        <div className='flex'>\n                            <label htmlFor='full_name'>\n                                <span className='input-title'>Name</span>\n                                <input\n                                    type='text'\n                                    id='full_name'\n                                    name='full_name'\n                                    required\n                                    value={full_name}\n                                    onChange={(e) => { this.validateDriverName(e.target.value)}}\n                                />\n                                {\n                                    error.driverName &&\n                                    <span className='error'>{error.driverNameError}</span>\n                                }\n                            </label>\n                            <label htmlFor='pay_rate'>\n                                <span className='input-title'>Pay Rate</span>\n                                <input\n                                    type='text'\n                                    id='pay_rate'\n                                    name='pay_rate'\n                                    required\n                                    value={pay_rate}\n                                    onChange={(e) => { this.validatePayRate(e.target.value) }}\n                                    onBlur={(e) => {\n                                        if(e.target.value.trim() === ''){\n                                            this.setState({\n                                                pay_rate: 0.0,\n                                                error: {\n                                                    ...this.state.error,\n                                                    driverPay: false,\n                                                    driverPayError: ''\n                                                }\n                                            })\n                                        }\n                                    }}\n                                />\n                                {\n                                    error.driverPay &&\n                                    <span className='error'>{error.driverPayError}</span>\n                                }\n                            </label>\n                            <label htmlFor='driver'>\n                                <span className='input-title'>Available Equipment</span>\n                                <select \n                                    className='select-css' \n                                    value={equipment_id}\n                                    name='equipmen_id'\n                                    id='equipment_id'\n                                    onChange={(e) => {this.setState({equipment_id: e.target.value})}}>\n                                        <option value='-1'>No Equipment</option>\n                                        {renderEquipmentOptions(availableEquipments)}\n                                </select>\n                            </label>\n                            <button\n                                className='app-button'\n                                type='submit'\n                                disabled={error.driverPay || error.driverName}\n                            >\n                                Save\n                            </button>\n                        </div>\n                    </fieldset>\n                </form>\n            </section>\n        );\n    }\n}\n\nexport default DriverEditPage;","import React, { Component } from 'react';\nimport './EditLoadPage.css';\nimport {\n    handleGoBack,\n    routeUserTo,\n    formatDate,\n    arrayIsEmpty,\n} from '../../HelperFunctions/HelperFunctions';\nimport {\n    notValidDate,\n    emptySpaces,\n} from '../../HelperFunctions/InputFieldValidations';\nimport AppContext from '../../Contexts/AppContext';\nimport config from '../../config';\nimport ShipmentsSerivce from '../../Services/ShipmentsService';\nimport { GoBackButton } from '../../Components/Utils/Utils'\n\nclass EditLoadPage extends Component {\n\n    constructor(props) {\n        super(props);\n\n        const id = parseInt(props.rprops.match.params.id, 10);\n        const {shipments} = this.props;\n        let shipment = {};\n        let pickup_warehouse = {};\n        let delivery_warehouse = {};\n        let driver = {};\n        if(!arrayIsEmpty(shipments)){\n            shipment = props.shipments.filter((shipment) => shipment.id === id)[0];\n            pickup_warehouse = shipment.pickup_warehouse;\n            delivery_warehouse = shipment.delivery_warehouse;\n            driver = shipment.driver\n        }\n\n\n\n        this.state = {\n            shipmentId: id,\n            availableDrivers: [],\n            error: {\n                dateError: 'Enter Date in correct format \"MM/DD/YYYY\"',\n                pickupDate: false,\n                deliveryDate: false,\n                cityError: 'City is required',\n                pickupCity: false,\n                deliveryCity: false,\n                stateError: 'State is required and must be two characters, Eg. New York will be NY',\n                pickupState: false,\n                deliveryState: false,\n                zipcodeError: 'Zipcode is required',\n                pickupZipcode: false,\n                deliveryZipcode: false,\n            },\n            pickupDate: formatDate(shipment.pickup_date),\n            deliveryDate: formatDate(shipment.delivery_date),\n            pickupCity: pickup_warehouse.city,\n            deliveryCity: delivery_warehouse.city,\n            pickupState: pickup_warehouse.state,\n            deliveryState: delivery_warehouse.state,\n            pickupZipcode: pickup_warehouse.zipcode,\n            deliveryZipcode: delivery_warehouse.zipcode,\n            miles: shipment.miles,\n            rate: shipment.rate,\n            broker: shipment.broker || '',\n            driverId: driver.id\n        }\n    }\n\n    static contextType = AppContext\n\n    // validation of date, Validates both pickup date and delivery date\n    // *** THIS FUNCTION IS DEPENDENT ON THE NAME PROPERTY OF THE INPUT BOXES ***\n    validateInputDate = (e) => {\n        const date = e.target.value;\n        const { name } = e.target;\n\n        name === 'pickup-date'\n            ? this.setState({ pickupDate: date })\n            : this.setState({ deliveryDate: date });\n\n        if (notValidDate(date)) {\n            name === 'pickup-date'\n                ? this.setState({\n                    error: {\n                        ...this.state.error,\n                        pickupDate: true,\n                    }\n                })\n                : this.setState({\n                    error: {\n                        ...this.state.error,\n                        deliveryDate: true,\n                    }\n                });\n        } else {\n            \n            name === 'pickup-date'\n                ? this.setState({\n                    error: {\n                        ...this.state.error,\n                        pickupDate: false,\n                    }\n                })\n                : this.setState({\n                    error: {\n                        ...this.state.error,\n                        deliveryDate: false,\n                    }\n                });\n        }\n    }\n\n    validateCityInput = (e) => {\n        const city = e.target.value;\n        const { name } = e.target;\n\n        name === 'pickup-city'\n            ? this.setState({ pickupCity: city })\n            : this.setState({ deliveryCity: city });\n\n\n        if (emptySpaces(city)) {\n            name === 'pickup-city'\n                ? this.setState({\n                    error: {\n                        ...this.state.error,\n                        pickupCity: true,\n                    }\n                })\n                : this.setState({\n                    error: {\n                        ...this.state.error,\n                        deliveryCity: true,\n                    }\n                });\n        } else {\n            name === 'pickup-city'\n                ? this.setState({\n                    error: {\n                        ...this.state.error,\n                        pickupCity: false,\n                    }\n                })\n                : this.setState({\n                    error: {\n                        ...this.state.error,\n                        deliveryCity: false,\n                    }\n                });\n        }\n    }\n\n    validateStateInput = (e) => {\n        const stateCode = e.target.value;\n        const { name } = e.target;\n\n        name === 'pickup-state'\n            ? this.setState({ pickupState: stateCode })\n            : this.setState({ deliveryState: stateCode });\n\n\n        if (emptySpaces(stateCode) || stateCode.trim().length !== 2) {\n            name === 'pickup-state'\n                ? this.setState({\n                    error: {\n                        ...this.state.error,\n                        pickupState: true,\n                    }\n                })\n                : this.setState({\n                    error: {\n                        ...this.state.error,\n                        deliveryState: true,\n                    }\n                });\n        } else {\n            name === 'pickup-state'\n                ? this.setState({\n                    error: {\n                        ...this.state.error,\n                        pickupState: false,\n                    }\n                })\n                : this.setState({\n                    error: {\n                        ...this.state.error,\n                        deliveryState: false,\n                    }\n                });\n        }\n    }\n\n    validateZipcodeInput = (e) => {\n        const zipcode = e.target.value;\n        const { name } = e.target;\n\n        name === 'pickup-zipcode'\n            ? this.setState({ pickupZipcode: zipcode })\n            : this.setState({ deliveryZipcode: zipcode });\n\n\n        if (emptySpaces(zipcode)) {\n            name === 'pickup-zipcode'\n                ? this.setState({\n                    error: {\n                        ...this.state.error,\n                        pickupZipcode: true,\n                    }\n                })\n                : this.setState({\n                    error: {\n                        ...this.state.error,\n                        deliveryZipcode: true,\n                    }\n                });\n        } else {\n            name === 'pickup-zipcode'\n                ? this.setState({\n                    error: {\n                        ...this.state.error,\n                        pickupZipcode: false,\n                    }\n                })\n                : this.setState({\n                    error: {\n                        ...this.state.error,\n                        deliveryZipcode: false,\n                    }\n                });\n        }\n    }\n\n    handleEditLoad = (e) => {\n\n        e.preventDefault();\n\n        const { shipmentId } = this.state;\n        const broker = e.target['broker'].value.trim() || '';\n        const delivery_warehouse = {\n            city: e.target['delivery-city'].value.trim(),\n            state: e.target['delivery-state'].value,\n            zipcode: e.target['delivery-zipcode'].value.trim()\n        };\n        const pickup_warehouse = {\n            city: e.target['pickup-city'].value.trim(),\n            state: e.target['pickup-state'].value,\n            zipcode: e.target['pickup-zipcode'].value.trim()\n        };\n        const miles = e.target['miles'].value.trim() || '0';\n        const rate = e.target['rate'].value.trim() || '0'\n        const pickup_date = e.target['pickup-date'].value;\n        const delivery_date = e.target['delivery-date'].value;\n\n        const newShipmentFields = {\n            pickup_date,\n            pickup_warehouse,\n            delivery_date,\n            delivery_warehouse,\n            miles,\n            rate,\n            broker\n        }\n\n        const updateShipmentInDB = {\n            id: shipmentId,\n            pickup_date,\n            delivery_date,\n            rate,\n            miles,\n            broker,\n            pickup_city: pickup_warehouse.city,\n            pickup_state: pickup_warehouse.state,\n            pickup_zipcode: pickup_warehouse.zipcode,\n            delivery_city: delivery_warehouse.city,\n            delivery_state: delivery_warehouse.state,\n            delivery_zipcode: delivery_warehouse.zipcode\n        }\n\n        // update the fields in the database.\n        ShipmentsSerivce.updateShipment(updateShipmentInDB)\n\n        let {shipments} = this.context\n        shipments = shipments.map((shipment) => {\n            if(shipment.id === shipmentId){\n                shipment = {\n                    ...shipment,\n                    ...newShipmentFields,\n                }\n            }\n            return shipment;\n        })\n\n        this.context.setShipments(shipments);\n        routeUserTo(this.props.rprops.history, `${config.BASEPATH}/load/${shipmentId}`)\n\n    }\n\n    render() {        \n        const { error } = this.state\n\n        return (\n            <section className='EditLoadPage width-wrapper'>\n                <form className='add-load-form' onSubmit={(e) => { this.handleEditLoad(e) }}>\n                    <fieldset>\n                        <legend className='blue-back white-text'>\n                            <GoBackButton onClick={(e) => { handleGoBack(this.props.rprops.history) }} />\n                            <span>Edit Equipment</span>\n                        </legend>\n                        <div className='flex'>\n                            <h4 className='fieldset-sub-title blue-text'>\n                                Pick Up Info\n                            </h4>\n                            <label htmlFor='pickup-date'>\n                                <span className='input-title'>* Date</span>\n                                <input\n                                    type='text'\n                                    id='pickup-date'\n                                    name='pickup-date'\n                                    maxLength='10'\n                                    value={this.state.pickupDate}\n                                    onChange={(e) => { this.validateInputDate(e) }}\n                                    onBlur={(e) => {\n                                        if (e.target.value === '') {\n                                            this.setState({\n                                                pickupDate: formatDate(new Date()),\n                                                error: {\n                                                    ...this.state.error,\n                                                    pickupDate: false\n                                                }\n                                            })\n                                        }\n                                    }}\n                                />\n                                {\n                                    error.pickupDate &&\n                                    <span className='error'>{error.dateError}</span>\n                                }\n                            </label>\n                            <label htmlFor='pickup-city'>\n                                <span className='input-title'>* City</span>\n                                <input\n                                    type='text'\n                                    id='pickup-city'\n                                    name='pickup-city'\n                                    placeholder='Eg. Dallas'\n                                    required\n                                    value={this.state.pickupCity}\n                                    onChange={(e) => { this.validateCityInput(e) }}\n                                />\n                                {\n                                    error.pickupCity &&\n                                    <span className='error'>{error.cityError}</span>\n                                }\n                            </label>\n                            <label htmlFor='pickup-state'>\n                                <span className='input-title'>* State</span>\n                                <input\n                                    type='text'\n                                    placeholder='Eg. TX'\n                                    maxLength='2'\n                                    id='pickup-state'\n                                    name='pickup-state'\n                                    required\n                                    value={this.state.pickupState}\n                                    onChange={(e) => { this.validateStateInput(e) }}\n                                />\n                                {\n                                    this.state.error.pickupState &&\n                                    <span className='error'>{this.state.error.stateError}</span>\n                                }\n                            </label>\n                            <label htmlFor='pickup-zipcode'>\n                                <span className='input-title'>* Zipcode</span>\n                                <input\n                                    type='text'\n                                    id='pickup-zipcode'\n                                    maxLength='10'\n                                    name='pickup-zipcode'\n                                    placeholder='Eg. 75001'\n                                    required\n                                    value={this.state.pickupZipcode}\n                                    onChange={(e) => { this.validateZipcodeInput(e) }}\n                                />\n                                {\n                                    this.state.error.pickupZipcode &&\n                                    <span className='error'>{this.state.error.zipcodeError}</span>\n                                }\n                            </label>\n                            <h4 className='fieldset-sub-title blue-text'>\n                                Delivery Info\n                            </h4>\n                            <label htmlFor='delivery-date'>\n                                <span className='input-title'>* Date</span>\n                                <input\n                                    type='text'\n                                    id='delivery-date'\n                                    name='delivery-date'\n                                    maxLength='10'\n                                    value={this.state.deliveryDate}\n                                    onChange={(e) => { this.validateInputDate(e) }}\n                                    onBlur={(e) => {\n                                        if (e.target.value === '') {\n                                            this.setState({\n                                                deliveryDate: formatDate(new Date()),\n                                                error: {\n                                                    ...this.state.error,\n                                                    deliveryDate: false\n                                                }\n                                            })\n                                        }\n                                    }}\n                                />\n                                {\n                                    this.state.error.deliveryDate &&\n                                    <span className='error'>{this.state.error.dateError}</span>\n                                }\n                            </label>\n                            <label htmlFor='delivery-city'>\n                                <span className='input-title'>* City</span>\n                                <input\n                                    type='text'\n                                    id='delivery-city'\n                                    name='delivery-city'\n                                    placeholder='Eg. Indianapolis'\n                                    required\n                                    value={this.state.deliveryCity}\n                                    onChange={(e) => { this.validateCityInput(e) }}\n                                />\n                                {\n                                    this.state.error.deliveryCity &&\n                                    <span className='error'>{this.state.error.cityError}</span>\n                                }\n                            </label>\n                            <label htmlFor='delivery-state'>\n                                <span className='input-title'>* State</span>\n                                <input\n                                    type='text'\n                                    placeholder='Eg. IN'\n                                    maxLength='2'\n                                    id='delivery-state'\n                                    name='delivery-state'\n                                    required\n                                    value={this.state.deliveryState}\n                                    onChange={(e) => { this.validateStateInput(e) }}\n                                />\n                                {\n                                    this.state.error.deliveryState &&\n                                    <span className='error'>{this.state.error.stateError}</span>\n                                }\n                            </label>\n                            <label htmlFor='delivery-zipcode'>\n                                <span className='input-title'>* Zipcode</span>\n                                <input\n                                    type='text'\n                                    id='delivery-zipcode'\n                                    name='delivery-zipcode'\n                                    maxLength='10'\n                                    placeholder='Eg. 46225'\n                                    required\n                                    value={this.state.deliveryZipcode}\n                                    onChange={(e) => { this.validateZipcodeInput(e) }}\n                                />\n                                {\n                                    this.state.error.deliveryZipcode &&\n                                    <span className='error'>{this.state.error.zipcodeError}</span>\n                                }\n                            </label>\n                            <h4 className='fieldset-sub-title blue-text'>\n                                Additional Info\n                            </h4>\n                            <label htmlFor='miles'>\n                                <span className='input-title'>Miles</span>\n                                <input\n                                    type='number'\n                                    min='0'\n                                    id='miles'\n                                    name='miles'\n                                    value={this.state.miles}\n                                    onChange={(e) => {this.setState({miles: e.target.value})}}\n                                />\n                                {\n                                    // this.state.unitNumError &&\n                                    // <span className='error'>{this.state.error}</span>\n                                }\n                            </label>\n                            <label htmlFor='rate'>\n                                <span className='input-title'>Rate</span>\n                                <input\n                                    type='number'\n                                    min='0'\n                                    id='rate'\n                                    name='rate'\n                                    value={this.state.rate}\n                                    onChange={(e) => {this.setState({rate: e.target.value})}}\n                                />\n                                {\n                                    // this.state.unitNumError &&\n                                    // <span className='error'>{this.state.error}</span>\n                                }\n                            </label>\n                            <label htmlFor='broker'>\n                                <span className='input-title'>Broker</span>\n                                <input\n                                    type='text'\n                                    id='broker'\n                                    name='broker'\n                                    value={this.state.broker}\n                                    onChange={(e) => {this.setState({broker: e.target.value})}}\n                                />\n                            </label>\n                            {\n                                !(\n                                    error.pickupCity ||\n                                    error.deliveryCity ||\n                                    error.pickupDate ||\n                                    error.deliveryDate ||\n                                    error.pickupState ||\n                                    error.deliveryState ||\n                                    error.pickupZipcode ||\n                                    error.deliveryZipcode\n                                )\n                                    ?\n                                    <button\n                                        className='app-button'\n                                        type='submit'\n                                    >\n                                        Edit Load\n                                    </button>\n                                    :\n                                    <button\n                                        className='app-button'\n                                        type='submit'\n                                        disabled\n                                    >\n                                        Edit Load\n                                    </button>\n                            }\n\n                        </div>\n                    </fieldset>\n                </form>\n            </section>\n        );\n    }\n}\n\nexport default EditLoadPage;","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { Switch, Route, Redirect } from \"react-router-dom\";\nimport Header from \"../Header/Header\";\nimport HomePage from \"../../Routes/HomePage/HomePage\";\nimport AppContext from \"../../Contexts/AppContext\";\nimport LoginPage from \"../../Routes/LoginPage/LoginPage\";\nimport TokenService from \"../../Services/TokenService\";\nimport DashboardPage from \"../../Routes/DashboardPage/DashboardPage\";\nimport Logout from \"../Logout/Logout\";\nimport CarrierService from \"../../Services/CarrierServices\";\nimport DriversService from \"../../Services/DriversService\";\nimport EquipmentService from \"../../Services/EquipmentsService\";\nimport LoadsPage from \"../../Routes/LoadsPage/LoadsPage\";\nimport EquipmentsPage from \"../../Routes/EquipmentsPage/EquipmentsPage\";\nimport DriversPage from \"../../Routes/DriversPage/DriversPage\";\nimport EquipmentEditPage from \"../../Routes/EquipmentEditPaage/EquipmentEditPage\";\nimport AddLoadPage from \"../../Routes/AddLoadPage/AddLoadPage\";\nimport { objectIsEmpty } from '../../HelperFunctions/HelperFunctions';\nimport LoadByIdPage from \"../../Routes/LoadByIdPage/LoadByIdPage\";\nimport AddDriverPage from \"../../Routes/AddDriverPage/AddDriverPage\";\nimport AddEquipmentPage from \"../../Routes/AddEquipmentPage/AddEquipmentPage\";\nimport DriverEditPage from \"../../Routes/DriverEditPage/DriverEditPage\";\nimport EditLoadPage from \"../../Routes/EditLoadPage/EditLoadPage\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      basePath: \"/dispatch-office-client\",\n      loggedIn: false,\n      newUser: false,\n      shipments: [],\n      drivers: [],\n      idleDrivers: [],\n      idleEquipments: [],\n      equipments: [],\n      loggedInCarrier: {\n        full_name: \"\",\n        company_name: \"\",\n        mc_num: \"\"\n      }\n    };\n  }\n\n  // gets all the shipments\n  getShipments = async () => {\n    return CarrierService.getCarrierData()\n      .then(data => data)\n      .catch(err => console.log(err));\n  };\n\n  getDrivers = async () => {\n    return DriversService.getDriversData()\n      .then(data => data)\n      .catch(err => console.log(err))\n  }\n\n  // gets all idleDrivers for dashboard\n  getIdleDrivers = async () => {\n    return DriversService.getIdleDrivers()\n      .then(data => {\n        data.map((driver) => {\n          if (!objectIsEmpty(driver.equipment)) {\n            this.setState({\n              idleEquipments: [\n                ...this.state.idleEquipments,\n                driver.equipment\n              ]\n            })\n          }\n          return driver\n        })\n        return data\n      })\n      .catch(err => console.log(err));\n  };\n\n  getEquipments = async () => {\n    return EquipmentService.getEquipments()\n      .then(data => data)\n      .catch(err => console.log(err));\n  }\n\n  // only one function used in context now to be used in login page\n  getAllData = async () => {\n    if (TokenService.hasAuthToken()) {\n      await Promise.all([\n        this.getShipments(),\n        this.getDrivers(),\n        this.getEquipments(),\n        this.getIdleDrivers()\n      ])\n        .then(([\n          shipments,\n          drivers,\n          equipments,\n          idleDrivers\n        ]) => {\n          this.setState({\n            shipments,\n            drivers,\n            equipments,\n            idleDrivers\n          })\n        })\n        .catch((err) => console.log(err));\n    }\n  }\n\n  componentDidMount = () => {\n    this.setState({\n      loggedIn: TokenService.hasAuthToken()\n    });\n    this.getAllData();\n  };\n\n  setLoggedIn = loggedIn => {\n    this.setState({\n      loggedIn\n    });\n  };\n\n  setLoggedInCarrier = loggedInCarrier => {\n    this.setState({\n      loggedInCarrier\n    });\n  };\n\n  setShipments = shipments => {\n    this.setState({\n      shipments\n    });\n  };\n\n  setEquipments = equipments => {\n    this.setState({\n      equipments\n    })\n  }\n\n  setDrivers = drivers => {\n    this.setState({\n      drivers\n    })\n  }\n\n  setIdleDrivers = idleDrivers => {\n    const idleEquipments = [];\n    this.setState({\n      idleEquipments\n    })\n    idleDrivers.map(driver => {\n      if (!objectIsEmpty(driver.equipment)) {\n        idleEquipments.push(driver.equipment)\n        this.setState({\n          idleEquipments\n        })\n      }\n      return driver\n    })\n    this.setState({\n      idleDrivers\n    })\n  }\n\n  setNewUser = newUser => {\n    this.setState({\n      newUser\n    });\n  };\n\n  render() {\n    const value = {\n      basePath: this.state.basePath,\n      loggedIn: this.state.loggedIn,\n      newUser: this.state.newUser,\n      setLoggedIn: this.setLoggedIn,\n      setNewUser: this.setNewUser,\n      setShipments: this.setShipments,\n      setEquipments: this.setEquipments,\n      setIdleDrivers: this.setIdleDrivers,\n      setDrivers: this.setDrivers,\n      setLoggedInCarrier: this.setLoggedInCarrier,\n      loggedInCarrier: this.state.loggedInCarrier,\n      shipments: this.state.shipments,\n      idleDrivers: this.state.idleDrivers,\n      equipments: this.state.equipments,\n      drivers: this.state.drivers,\n      idleEquipments: this.state.idleEquipments,\n      getAllData: this.getAllData,\n      loadStatus: [\n        'un-assigned',\n        'dispatched',\n        'loading',\n        'in transit',\n        'unloading',\n        'completed'\n      ]\n    };\n\n    return (\n      <AppContext.Provider value={value}>\n        <div className=\"App\">\n          <Header />\n          {this.state.loggedIn && <Route path=\"/\" component={Logout} />}\n          <Switch>\n            {/* Begin the app with the /app endpoint */}\n\n            <Route exact path=\"/\">\n              <Redirect to={value.basePath} />\n            </Route>\n\n            <Route exact path={value.basePath} component={HomePage} />\n\n            <Route\n              exact\n              path={`${value.basePath}/login`}\n              component={LoginPage}\n            />\n\n            <Route\n              exact\n              path={`${value.basePath}/dashboard`}\n              component={DashboardPage}\n            />\n\n            <Route\n              exact\n              path={`${value.basePath}/loads`}\n              component={(rprops) => {\n                return <LoadsPage \n                  rprops={rprops}\n                  shipments={this.state.shipments}\n                  boxHeader={`All Loads`}\n                />\n              }}\n            />\n\n            <Route\n              exact\n              path={`${value.basePath}/equipments`}\n              component={EquipmentsPage}\n            />\n\n            <Route\n              exact\n              path={`${value.basePath}/drivers`}\n              component={DriversPage}\n            />\n\n            <Route\n              exact\n              path={`${value.basePath}/equipment/edit/:id`}\n              component={(rprops) => {\n                return <EquipmentEditPage\n                  rprops={rprops}\n                  equipments={this.state.equipments}\n                  idleDrivers={this.state.idleDrivers}\n                  drivers={this.state.drivers} />\n              }}\n            />\n\n            <Route\n              exact\n              path={`${value.basePath}/load/new`}\n              component={AddLoadPage}\n            />\n\n            <Route\n              exact\n              path={`${value.basePath}/driver/new`}\n              component={(rprops) => {\n                return <AddDriverPage\n                  rprops={rprops}\n                  equipments={this.state.equipments} />\n              }}\n            />\n\n            <Route\n              exact\n              path={`${value.basePath}/equipment/new`}\n              component={(rprops) => {\n                return <AddEquipmentPage\n                  rprops={rprops}\n                  drivers={this.state.drivers} />\n              }}\n            />\n\n            <Route\n              exact\n              path={`${value.basePath}/driver/edit/:id`}\n              component={(rprops) => {\n                return <DriverEditPage\n                  rprops={rprops}\n                  equipments={this.state.equipments}\n                  idleDrivers={this.state.idleDrivers}\n                  drivers={this.state.drivers} />\n              }}\n            />\n\n            <Route\n              exact\n              path={`${value.basePath}/load/:id`}\n              component={(rprops) => {\n                return <LoadByIdPage\n                  rprops={rprops}\n                  shipments={this.state.shipments}\n                  idleDrivers={this.state.idleDrivers}\n                />\n              }}\n            />\n\n            <Route\n              exact\n              path={`${value.basePath}/load/edit/:id`}\n              component={(rprops) => {\n                return <EditLoadPage \n                  rprops={rprops}\n                  shipments={this.state.shipments}\n                  drivers={this.state.drivers}\n                  idleDrivers={this.state.idleDrivers}\n                />\n              }}\n            />\n\n          </Switch>\n        </div>\n      </AppContext.Provider>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>\n    , \n    document.getElementById('root'));\n"],"sourceRoot":""}